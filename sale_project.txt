[START]
// File: AuditorAwareImpl.java

package com.example.sales.config;

import com.example.sales.security.CustomUserDetails;
import org.springframework.data.domain.AuditorAware;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Component;

import java.util.Optional;

@Component("auditorAware")
public class AuditorAwareImpl implements AuditorAware<String> {

    @Override
    public Optional<String> getCurrentAuditor() {
        Authentication auth = SecurityContextHolder.getContext().getAuthentication();

        if (auth != null && auth.isAuthenticated()
                && auth.getPrincipal() instanceof CustomUserDetails user) {
            return Optional.of(user.getId());
        }

        return Optional.empty();
    }
}

// File: com/example/sales/config/SecurityConfig.java
package com.example.sales.config;

import com.example.sales.security.CustomUserDetailsService;
import com.example.sales.security.JwtAuthenticationFilter;
import lombok.RequiredArgsConstructor;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;
import org.springframework.web.cors.CorsConfiguration;
import org.springframework.web.cors.CorsConfigurationSource;
import org.springframework.web.cors.UrlBasedCorsConfigurationSource;

import java.util.List;

@Configuration
@RequiredArgsConstructor
public class SecurityConfig {

    private final JwtAuthenticationFilter jwtAuthenticationFilter;
    private final CustomUserDetailsService userDetailsService;

    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        http
                .cors() // Kích hoạt CORS
                .and()
                .csrf(AbstractHttpConfigurer::disable) // Vô hiệu hóa CSRF
                .sessionManagement(sm -> sm.sessionCreationPolicy(SessionCreationPolicy.STATELESS))
                .authorizeHttpRequests(auth -> auth
                        .requestMatchers(
                                "/v3/api-docs/**", "/swagger-ui/**", "/swagger-ui.html"
                        ).permitAll()
                        .requestMatchers("/api/auth/**").permitAll() // Allow unauthenticated access
                        .requestMatchers("/api/webhook/**").permitAll()
                        .requestMatchers("/api/admin/**").hasRole("ADMIN")
                        .anyRequest().authenticated()
                )
                .addFilterBefore(jwtAuthenticationFilter, UsernamePasswordAuthenticationFilter.class);

        return http.build();
    }


    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }

    @Bean
    public AuthenticationManager authenticationManager(HttpSecurity http) throws Exception {
        DaoAuthenticationProvider provider = new DaoAuthenticationProvider();
        provider.setUserDetailsService(userDetailsService);
        provider.setPasswordEncoder(passwordEncoder());

        AuthenticationManagerBuilder builder = http.getSharedObject(AuthenticationManagerBuilder.class);
        builder.authenticationProvider(provider);

        return builder.build();
    }

    @Bean
    public CorsConfigurationSource corsConfigurationSource() {
        CorsConfiguration config = new CorsConfiguration();
        config.setAllowedOrigins(List.of("http://localhost:5173")); // FE origin
        config.setAllowedMethods(List.of("GET", "POST", "PUT", "DELETE", "OPTIONS"));
        config.setAllowedHeaders(List.of("*"));
        config.setAllowCredentials(true); // nếu gửi cookie / auth

        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
        source.registerCorsConfiguration("/**", config);
        return source;
    }
}

// File: com/example/sales/config/WebConfig.java
package com.example.sales.config;

import com.example.sales.security.PlanInterceptor;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.MessageSource;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.support.ReloadableResourceBundleMessageSource;
import org.springframework.web.servlet.config.annotation.InterceptorRegistry;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;
import org.springframework.web.servlet.i18n.AcceptHeaderLocaleResolver;

import java.util.Locale;

@Configuration
public class WebConfig implements WebMvcConfigurer {

    @Autowired
    private PlanInterceptor planInterceptor;

    @Bean
    public AcceptHeaderLocaleResolver localeResolver() {
        AcceptHeaderLocaleResolver resolver = new AcceptHeaderLocaleResolver();
        resolver.setDefaultLocale(Locale.ENGLISH);
        return resolver;
    }

    @Bean
    public MessageSource messageSource() {
        ReloadableResourceBundleMessageSource ms = new ReloadableResourceBundleMessageSource();
        ms.setBasename("classpath:messages");
        ms.setDefaultEncoding("UTF-8");
        return ms;
    }

    @Override
    public void addInterceptors(InterceptorRegistry registry) {
        registry.addInterceptor(planInterceptor)
                .addPathPatterns("/api/**"); // áp dụng cho mọi API
    }
}

// File: DiscountType.java

package com.example.sales.constant;

public enum DiscountType {
    PERCENT, // Giảm theo %
    AMOUNT   // Giảm cố định số tiền
}
// File: OrderStatus.java

package com.example.sales.constant;

public enum OrderStatus {
    PENDING,       // Mới tạo
    CONFIRMED,     // Đã xác nhận
    SHIPPING,      // Đang vận chuyển
    COMPLETED,     // Hoàn tất
    CANCELLED      // Đã huỷ
}
// File: ShopRole.java

package com.example.sales.constant;

public enum ShopRole {
    ADMIN,
    OWNER,
    STAFF,
    CASHIER
}

// File: ShopType.java

package com.example.sales.constant;

import lombok.Getter;

@Getter
public enum ShopType {
    RESTAURANT(false),
    CAFE(false),
    BAR(false),
    GROCERY(true),
    CONVENIENCE(true),
    PHARMACY(true),
    RETAIL(true),
    OTHER(false);

    private final boolean trackInventory;

    ShopType(boolean trackInventory) {
        this.trackInventory = trackInventory;
    }

}

// File: TableStatus.java

package com.example.sales.constant;

public enum TableStatus {
    AVAILABLE,  // Trống
    OCCUPIED,   // Đang có khách
    CLOSED      // Không hoạt động / Khoá
}

// File: UserRole.java

package com.example.sales.constant;

public enum UserRole {
    ROLE_USER,
    ROLE_ADMIN
}

// File: src/main/java/com/example/sales/controller/admin/AdminUserController.java

package com.example.sales.controller.admin;

import com.example.sales.constant.ApiCode;
import com.example.sales.dto.ApiResponse;
import com.example.sales.exception.BusinessException;
import com.example.sales.model.User;
import com.example.sales.service.AdminUserService;
import lombok.RequiredArgsConstructor;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/admin/users")
@RequiredArgsConstructor
@Validated
public class AdminUserController {

    private final AdminUserService adminUserService;

    @GetMapping
    public ApiResponse<List<User>> getAll() {
        return ApiResponse.success(ApiCode.SUCCESS, adminUserService.getAllUsers());
    }

    @GetMapping("/{id}")
    public ApiResponse<User> getById(@PathVariable String id) {
        return ApiResponse.success(ApiCode.SUCCESS, adminUserService.getUserById(id));
    }

    @PutMapping("/{id}")
    public ApiResponse<User> updateUser(@PathVariable String id,
                                        @RequestBody User userUpdate) {
        return ApiResponse.success(ApiCode.USER_UPDATED, adminUserService.updateUser(id, userUpdate));
    }

    @DeleteMapping("/{id}")
    public ApiResponse<?> deleteUser(@PathVariable String id,
                                     @AuthenticationPrincipal User currentUser) {
        if (id.equals(currentUser.getId())) {
            throw new BusinessException(ApiCode.CANNOT_DELETE_SELF);
        }

        adminUserService.deleteUser(id);
        return ApiResponse.success(ApiCode.USER_DELETED);
    }
}


// File: src/main/java/com/example/sales/controller/AuditLogController.java

package com.example.sales.controller;

import com.example.sales.constant.ApiCode;
import com.example.sales.constant.SubscriptionPlan;
import com.example.sales.dto.ApiResponse;
import com.example.sales.model.AuditLog;
import com.example.sales.repository.AuditLogRepository;
import com.example.sales.security.RequirePlan;
import lombok.RequiredArgsConstructor;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/audit")
@RequiredArgsConstructor
@Validated
public class AuditLogController {

    private final AuditLogRepository auditLogRepository;

    @RequirePlan({SubscriptionPlan.PRO, SubscriptionPlan.ENTERPRISE})
    @GetMapping("/{targetId}")
    public ApiResponse<List<AuditLog>> getLogs(@PathVariable String targetId) {
        List<AuditLog> logs = auditLogRepository.findByTargetIdAndDeletedFalseOrderByCreatedAtDesc(targetId);
        return ApiResponse.success(ApiCode.SUCCESS, logs);
    }
}

// File: src/main/java/com/example/sales/controller/AuthController.java
package com.example.sales.controller;

import com.example.sales.constant.ApiCode;
import com.example.sales.dto.*;
import com.example.sales.service.AuthService;
import com.example.sales.service.TokenService;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/api/auth")
@RequiredArgsConstructor
@Validated
public class AuthController {

    private final AuthService authService;
    private final TokenService tokenService;

    @PostMapping("/register")
    public ApiResponse<?> register(@RequestBody @Valid RegisterRequest request) {
        authService.register(request);
        return ApiResponse.success(ApiCode.EMAIL_SENT);
    }

    @PostMapping("/login")
    public ApiResponse<JwtResponse> login(@RequestBody @Valid LoginRequest request) {
        JwtResponse token = authService.login(request);
        return ApiResponse.success(ApiCode.SUCCESS, token);
    }

    @PostMapping("/forgot-password")
    public ApiResponse<?> forgotPassword(@RequestParam String email) {
        authService.forgotPassword(email);
        return ApiResponse.success(ApiCode.EMAIL_SENT);
    }

    @PostMapping("/resend-verification")
    public ApiResponse<?> resendVerification(@RequestParam String email) {
        authService.resendVerification(email);
        return ApiResponse.success(ApiCode.EMAIL_SENT);
    }

    @GetMapping("/verify")
    public ApiResponse<?> verify(@RequestParam String token) {
        authService.verifyEmail(token);
        return ApiResponse.success(ApiCode.SUCCESS);
    }

    @PostMapping("/refresh-token")
    public ApiResponse<JwtResponse> refreshToken(@RequestBody RefreshTokenRequest request) {
        String newAccessToken = tokenService.refreshAccessToken(request.getRefreshToken());
        JwtResponse response = new JwtResponse(newAccessToken, request.getRefreshToken());
        return ApiResponse.success(ApiCode.SUCCESS, response);
    }

    @PostMapping("/logout")
    public ApiResponse<?> logout(@RequestBody RefreshTokenRequest request) {
        tokenService.revokeToken(request.getRefreshToken());
        return ApiResponse.success(ApiCode.SUCCESS);
    }
}


// File: src/main/java/com/example/sales/controller/BranchController.java

package com.example.sales.controller;

import com.example.sales.constant.ApiCode;
import com.example.sales.constant.ShopRole;
import com.example.sales.constant.SubscriptionPlan;
import com.example.sales.dto.ApiResponse;
import com.example.sales.dto.branch.BranchRequest;
import com.example.sales.dto.branch.BranchResponse;
import com.example.sales.security.RequirePlan;
import com.example.sales.security.RequireRole;
import com.example.sales.service.BranchService;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/branches")
@RequiredArgsConstructor
@Validated
public class BranchController {

    private final BranchService branchService;

    @GetMapping
    @RequireRole({ShopRole.OWNER, ShopRole.STAFF})
    public ApiResponse<List<BranchResponse>> getAll(@RequestParam String shopId) {
        return ApiResponse.success(ApiCode.SUCCESS, branchService.getAll(shopId));
    }

    @RequirePlan({SubscriptionPlan.PRO, SubscriptionPlan.ENTERPRISE})
    @PostMapping
    @RequireRole(ShopRole.OWNER)
    public ApiResponse<BranchResponse> create(@RequestParam String shopId,
                                              @RequestBody @Valid BranchRequest request) {
        return ApiResponse.success(ApiCode.SUCCESS, branchService.create(shopId, request));
    }

    @RequirePlan({SubscriptionPlan.PRO, SubscriptionPlan.ENTERPRISE})
    @PutMapping("/{id}")
    @RequireRole(ShopRole.OWNER)
    public ApiResponse<BranchResponse> update(@RequestParam String shopId,
                                              @PathVariable String id,
                                              @RequestBody @Valid BranchRequest request) {
        return ApiResponse.success(ApiCode.SUCCESS, branchService.update(shopId, id, request));
    }

    @RequirePlan({SubscriptionPlan.PRO, SubscriptionPlan.ENTERPRISE})
    @DeleteMapping("/{id}")
    @RequireRole(ShopRole.OWNER)
    public ApiResponse<?> delete(@RequestParam String shopId,
                                 @PathVariable String id) {
        branchService.delete(shopId, id);
        return ApiResponse.success(ApiCode.SUCCESS);
    }
}

// File: src/main/java/com/example/sales/controller/CustomerController.java

package com.example.sales.controller;

import com.example.sales.constant.ApiCode;
import com.example.sales.constant.ShopRole;
import com.example.sales.dto.ApiResponse;
import com.example.sales.dto.customer.CustomerRequest;
import com.example.sales.dto.customer.CustomerResponse;
import com.example.sales.security.CustomUserDetails;
import com.example.sales.security.RequireRole;
import com.example.sales.service.CustomerService;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/customers")
@RequiredArgsConstructor
@Validated
public class CustomerController {

    private final CustomerService customerService;

    @GetMapping
    @RequireRole({ShopRole.OWNER, ShopRole.STAFF})
    public ApiResponse<List<CustomerResponse>> getAll(@RequestParam String shopId,
                                                      @RequestParam(required = false) String branchId) {
        return ApiResponse.success(ApiCode.CUSTOMER_LIST, customerService.getCustomers(shopId, branchId));
    }

    @PostMapping
    @RequireRole({ShopRole.OWNER, ShopRole.STAFF})
    public ApiResponse<CustomerResponse> create(@AuthenticationPrincipal CustomUserDetails user,
                                                @RequestParam String shopId,
                                                @RequestBody @Valid CustomerRequest request) {
        return ApiResponse.success(ApiCode.CUSTOMER_CREATED, customerService.createCustomer(shopId, user.getId(), request));
    }

    @PutMapping("/{id}")
    @RequireRole({ShopRole.OWNER, ShopRole.STAFF})
    public ApiResponse<CustomerResponse> update(@RequestParam String shopId,
                                                @PathVariable String id,
                                                @RequestBody @Valid CustomerRequest request) {
        return ApiResponse.success(ApiCode.CUSTOMER_UPDATED, customerService.updateCustomer(shopId, id, request));
    }

    @DeleteMapping("/{id}")
    @RequireRole({ShopRole.OWNER, ShopRole.STAFF})
    public ApiResponse<?> delete(@RequestParam String shopId,
                                 @RequestParam String branchId,
                                 @PathVariable String id) {
        customerService.deleteCustomer(shopId, branchId, id);
        return ApiResponse.success(ApiCode.CUSTOMER_DELETED);
    }
}


// File: src/main/java/com/example/sales/controller/OrderController.java

package com.example.sales.controller;

import com.example.sales.constant.ApiCode;
import com.example.sales.constant.OrderStatus;
import com.example.sales.constant.ShopRole;
import com.example.sales.dto.ApiResponse;
import com.example.sales.dto.order.OrderRequest;
import com.example.sales.dto.order.OrderResponse;
import com.example.sales.security.CustomUserDetails;
import com.example.sales.security.RequireRole;
import com.example.sales.service.OrderService;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/orders")
@RequiredArgsConstructor
@Validated
public class OrderController {

    private final OrderService orderService;

    @GetMapping
    @RequireRole({ShopRole.OWNER, ShopRole.STAFF})
    public ApiResponse<List<OrderResponse>> getMyOrders(@AuthenticationPrincipal CustomUserDetails user,
                                                        @RequestParam String shopId) {
        List<OrderResponse> orders = orderService.getOrdersByUser(user.getId(), shopId);
        return ApiResponse.success(ApiCode.ORDER_LIST, orders);
    }

    @PostMapping
    @RequireRole({ShopRole.OWNER, ShopRole.STAFF})
    public ApiResponse<OrderResponse> createOrder(@AuthenticationPrincipal CustomUserDetails user,
                                                  @RequestParam String shopId,
                                                  @RequestBody @Valid OrderRequest request) {
        OrderResponse created = orderService.createOrder(user.getId(), shopId, request);
        return ApiResponse.success(ApiCode.ORDER_CREATED, created);
    }

    @PutMapping("/{id}/cancel")
    @RequireRole({ShopRole.OWNER, ShopRole.STAFF})
    public ApiResponse<?> cancelOrder(@AuthenticationPrincipal CustomUserDetails user,
                                      @RequestParam String shopId,
                                      @PathVariable String id) {
        orderService.cancelOrder(user.getId(), shopId, id);
        return ApiResponse.success(ApiCode.ORDER_CANCELLED);
    }

    @PostMapping("/{orderId}/confirm-payment")
    @RequireRole({ShopRole.OWNER, ShopRole.STAFF})
    public ApiResponse<OrderResponse> confirmPayment(@PathVariable String orderId,
                                                     @RequestParam String paymentId,
                                                     @RequestParam String paymentMethod,
                                                     @RequestParam String shopId,
                                                     @AuthenticationPrincipal CustomUserDetails user) {
        OrderResponse confirmed = orderService.confirmPayment(user.getId(), shopId, orderId, paymentId, paymentMethod);
        return ApiResponse.success(ApiCode.ORDER_PAYMENT_CONFIRMED, confirmed);
    }

    @PutMapping("/{id}/status")
    @RequireRole({ShopRole.OWNER, ShopRole.STAFF})
    public ApiResponse<OrderResponse> updateStatus(@AuthenticationPrincipal CustomUserDetails user,
                                                   @RequestParam String shopId,
                                                   @PathVariable String id,
                                                   @RequestParam OrderStatus status) {
        OrderResponse updated = orderService.updateStatus(user.getId(), shopId, id, status);
        return ApiResponse.success(ApiCode.ORDER_STATUS_UPDATED, updated);
    }

    @GetMapping("/filter")
    @RequireRole({ShopRole.OWNER, ShopRole.STAFF})
    public ApiResponse<List<OrderResponse>> getByStatus(@AuthenticationPrincipal CustomUserDetails user,
                                                        @RequestParam String shopId,
                                                        @RequestParam OrderStatus status,
                                                        @RequestParam(required = false) String branchId) {
        List<OrderResponse> filtered = orderService.getOrdersByStatus(user.getId(), shopId, status, branchId);
        return ApiResponse.success(ApiCode.ORDER_LIST, filtered);
    }
}

// File: src/main/java/com/example/sales/controller/PromotionController.java

package com.example.sales.controller;

import com.example.sales.constant.ApiCode;
import com.example.sales.constant.ShopRole;
import com.example.sales.constant.SubscriptionPlan;
import com.example.sales.dto.ApiResponse;
import com.example.sales.dto.promotion.PromotionRequest;
import com.example.sales.dto.promotion.PromotionResponse;
import com.example.sales.security.RequirePlan;
import com.example.sales.security.RequireRole;
import com.example.sales.service.PromotionService;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/promotions")
@RequiredArgsConstructor
@Validated
public class PromotionController {

    private final PromotionService promotionService;

    @RequirePlan({SubscriptionPlan.PRO, SubscriptionPlan.ENTERPRISE})
    @GetMapping
    @RequireRole({ShopRole.OWNER, ShopRole.STAFF})
    public ApiResponse<List<PromotionResponse>> getAll(@RequestParam String shopId,
                                                       @RequestParam(required = false) String branchId) {
        return ApiResponse.success(ApiCode.SUCCESS, promotionService.getAll(shopId, branchId));
    }

    @RequirePlan({SubscriptionPlan.PRO, SubscriptionPlan.ENTERPRISE})
    @PostMapping
    @RequireRole(ShopRole.OWNER)
    public ApiResponse<PromotionResponse> create(@RequestParam String shopId,
                                                 @RequestBody @Valid PromotionRequest request) {
        return ApiResponse.success(ApiCode.SUCCESS, promotionService.create(shopId, request));
    }

    @RequirePlan({SubscriptionPlan.PRO, SubscriptionPlan.ENTERPRISE})
    @PutMapping("/{id}")
    @RequireRole(ShopRole.OWNER)
    public ApiResponse<PromotionResponse> update(@RequestParam String shopId,
                                                 @PathVariable String id,
                                                 @RequestBody @Valid PromotionRequest request) {
        return ApiResponse.success(ApiCode.SUCCESS, promotionService.update(shopId, id, request));
    }

    @RequirePlan({SubscriptionPlan.PRO, SubscriptionPlan.ENTERPRISE})
    @DeleteMapping("/{id}")
    @RequireRole(ShopRole.OWNER)
    public ApiResponse<?> delete(@RequestParam String shopId,
                                 @PathVariable String id) {
        promotionService.delete(shopId, id);
        return ApiResponse.success(ApiCode.SUCCESS);
    }
}

// File: src/main/java/com/example/sales/controller/ReportController.java

package com.example.sales.controller;

import com.example.sales.constant.ApiCode;
import com.example.sales.constant.ShopRole;
import com.example.sales.constant.SubscriptionPlan;
import com.example.sales.dto.ApiResponse;
import com.example.sales.dto.report.DailyReportResponse;
import com.example.sales.dto.report.ReportRequest;
import com.example.sales.dto.report.ReportResponse;
import com.example.sales.security.RequirePlan;
import com.example.sales.security.RequireRole;
import com.example.sales.service.ReportService;
import lombok.RequiredArgsConstructor;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import java.time.LocalDate;
import java.util.List;

@RestController
@RequestMapping("/api/reports")
@RequiredArgsConstructor
@Validated
public class ReportController {

    private final ReportService reportService;

    @RequirePlan({SubscriptionPlan.PRO, SubscriptionPlan.ENTERPRISE})
    @PostMapping("/summary")
    @RequireRole({ShopRole.OWNER, ShopRole.STAFF})
    public ApiResponse<ReportResponse> getReport(@RequestParam String shopId,
                                                 @RequestBody ReportRequest request) {
        return ApiResponse.success(ApiCode.SUCCESS, reportService.getReport(shopId, request));
    }

    @RequirePlan({SubscriptionPlan.PRO, SubscriptionPlan.ENTERPRISE})
    @PostMapping("/daily")
    @RequireRole({ShopRole.OWNER, ShopRole.STAFF})
    public ApiResponse<List<DailyReportResponse>> getDaily(@RequestParam String shopId,
                                                           @RequestBody ReportRequest request) {
        return ApiResponse.success(ApiCode.SUCCESS, reportService.getDailyReport(shopId, request));
    }

    @RequirePlan({SubscriptionPlan.PRO, SubscriptionPlan.ENTERPRISE})
    @GetMapping("/daily/export")
    @RequireRole({ShopRole.OWNER, ShopRole.STAFF})
    public ResponseEntity<byte[]> exportDaily(@RequestParam String shopId,
                                              @RequestParam @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate startDate,
                                              @RequestParam @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate endDate) {
        return reportService.exportDailyReportExcel(shopId, startDate, endDate);
    }
}

// File: src/main/java/com/example/sales/controller/ShopController.java

package com.example.sales.controller;

import com.example.sales.constant.ApiCode;
import com.example.sales.dto.ApiResponse;
import com.example.sales.dto.shop.ShopRequest;
import com.example.sales.dto.shop.ShopSimpleResponse;
import com.example.sales.model.Shop;
import com.example.sales.security.CustomUserDetails;
import com.example.sales.service.FileUploadService;
import com.example.sales.service.ShopService;
import com.example.sales.service.ShopUserService;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import java.util.List;

@RestController
@RequestMapping("/api/shop")
@RequiredArgsConstructor
@Validated
public class ShopController {

    private final ShopService shopService;
    private final ShopUserService shopUserService;
    private final FileUploadService fileUploadService;

    @PostMapping(consumes = "multipart/form-data")
    public ApiResponse<Shop> create(@AuthenticationPrincipal CustomUserDetails user,
                                    @RequestPart("shop") @Valid ShopRequest request,
                                    @RequestPart(value = "file", required = false) MultipartFile file) {
        String logoUrl = null;
        if (file != null && !file.isEmpty()) {
            logoUrl = fileUploadService.upload(file);
        }
        return ApiResponse.success(ApiCode.SUCCESS, shopService.createShop(user.getId(), request, logoUrl));
    }


    @GetMapping("/me")
    public ApiResponse<?> getMyShop(@AuthenticationPrincipal CustomUserDetails user) {
        Shop shop = shopService.getShopByOwner(user.getId());
        return ApiResponse.success(ApiCode.SUCCESS, shopService.getShopResponse(user, shop));
    }

    @PutMapping("/me")
    public ApiResponse<Shop> update(@AuthenticationPrincipal CustomUserDetails user,
                                    @RequestBody @Valid ShopRequest request) {
        return ApiResponse.success(ApiCode.SUCCESS, shopService.updateShop(user.getId(), request));
    }
    @GetMapping("/my")
    public ApiResponse<List<ShopSimpleResponse>> getMyShops(@AuthenticationPrincipal CustomUserDetails user) {
        return ApiResponse.success(ApiCode.SUCCESS, shopUserService.getShopsForUser(user.getId()));
    }

    @DeleteMapping
    public ApiResponse<?> deleteShop(@AuthenticationPrincipal CustomUserDetails user) {
        shopService.deleteShop(user.getId());
        return ApiResponse.success(ApiCode.SUCCESS);
    }
}

// File: src/main/java/com/example/sales/controller/ShopUserController.java
package com.example.sales.controller;

import com.example.sales.constant.ApiCode;
import com.example.sales.constant.ShopRole;
import com.example.sales.dto.ApiResponse;
import com.example.sales.security.CustomUserDetails;
import com.example.sales.security.RequireRole;
import com.example.sales.service.ShopUserService;
import lombok.RequiredArgsConstructor;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/api/shop-users")
@RequiredArgsConstructor
@Validated
public class ShopUserController {

    private final ShopUserService shopUserService;

    @GetMapping("/my")
    public ApiResponse<?> getMyShops(@AuthenticationPrincipal CustomUserDetails customUserDetails) {
        return ApiResponse.success(ApiCode.SUCCESS, shopUserService.getShopsForUser(customUserDetails.getId()));
    }

    @PostMapping("/add")
    @RequireRole(ShopRole.OWNER)
    public ApiResponse<?> addUser(@RequestParam String shopId,
                                  @RequestParam String userId,
                                  @RequestParam ShopRole role) {
        shopUserService.addUser(shopId, userId, role);
        return ApiResponse.success(ApiCode.SUCCESS);
    }

    @DeleteMapping("/remove")
    @RequireRole(ShopRole.OWNER)
    public ApiResponse<?> removeUser(@RequestParam String shopId,
                                     @RequestParam String userId) {
        shopUserService.removeUser(shopId, userId);
        return ApiResponse.success(ApiCode.SUCCESS);
    }
}

// File: src/main/java/com/example/sales/controller/TableController.java

package com.example.sales.controller;

import com.example.sales.constant.ApiCode;
import com.example.sales.constant.ShopRole;
import com.example.sales.constant.TableStatus;
import com.example.sales.dto.ApiResponse;
import com.example.sales.dto.TableRequest;
import com.example.sales.dto.TableResponse;
import com.example.sales.security.RequireRole;
import com.example.sales.service.TableService;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/tables")
@RequiredArgsConstructor
@Validated
public class TableController {

    private final TableService tableService;

    @PostMapping
    @RequireRole(ShopRole.OWNER)
    public ApiResponse<TableResponse> create(@RequestBody @Valid TableRequest request) {
        return ApiResponse.success(ApiCode.SUCCESS, tableService.create(request));
    }

    @GetMapping
    @RequireRole({ShopRole.OWNER, ShopRole.STAFF})
    public ApiResponse<List<TableResponse>> getByShop(@RequestParam String shopId,
                                                      @RequestParam String branchId) {
        return ApiResponse.success(ApiCode.SUCCESS, tableService.getByShop(shopId, branchId));
    }

    @PutMapping("/{id}/status")
    @RequireRole({ShopRole.OWNER, ShopRole.STAFF})
    public ApiResponse<TableResponse> updateStatus(@PathVariable String id,
                                                   @RequestParam TableStatus status) {
        return ApiResponse.success(ApiCode.SUCCESS, tableService.updateStatus(id, status));
    }
}

// File: src/main/java/com/example/sales/controller/UserController.java

package com.example.sales.controller;

import com.example.sales.constant.ApiCode;
import com.example.sales.dto.ApiResponse;
import com.example.sales.dto.ChangePasswordRequest;
import com.example.sales.dto.UpdateProfileRequest;
import com.example.sales.security.CustomUserDetails;
import com.example.sales.service.UserService;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/api/user")
@RequiredArgsConstructor
@Validated
public class UserController {

    private final UserService userService;

    @GetMapping("/me")
    public ApiResponse<com.example.sales.model.User> getCurrentUser(@AuthenticationPrincipal CustomUserDetails user) {
        return ApiResponse.success(ApiCode.USER_INFO, userService.getCurrentUser(user.getId()));
    }

    @PutMapping("/update-profile")
    public ApiResponse<com.example.sales.model.User> updateProfile(@AuthenticationPrincipal CustomUserDetails user,
                                           @RequestBody UpdateProfileRequest request) {
        com.example.sales.model.User updated = userService.updateProfile(user.getId(), request.getFullName(), request.getPhone(), request.getBusinessType());
        return ApiResponse.success(ApiCode.USER_UPDATED, updated);
    }

    @PostMapping("/change-password")
    public ApiResponse<?> changePassword(@AuthenticationPrincipal CustomUserDetails user,
                                         @RequestBody @Valid ChangePasswordRequest request) {
        userService.changePassword(user.getId(), request.getCurrentPassword(), request.getNewPassword());
        return ApiResponse.success(ApiCode.PASSWORD_CHANGED);
    }
}

// File: src/main/java/com/example/sales/dto/branch/BranchRequest.java

package com.example.sales.dto.branch;

import jakarta.validation.constraints.NotBlank;
import lombok.Getter;
import lombok.Setter;

@Getter
@Setter
public class BranchRequest {

    @NotBlank(message = "Tên chi nhánh không được để trống")
    private String name;

    private String address;

    private String phone;

    private boolean active = true;
}
// File: src/main/java/com/example/sales/dto/branch/BranchResponse.java

package com.example.sales.dto.branch;

import lombok.Builder;
import lombok.Data;

@Data
@Builder
public class BranchResponse {
    private String id;
    private String name;
    private String address;
    private String phone;
    private boolean active;
    private String createdAt;
}
// File: src/main/java/com/example/sales/dto/customer/CustomerRequest.java

package com.example.sales.dto.customer;

import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.NotBlank;
import lombok.Data;

@Data
public class CustomerRequest {
    @NotBlank(message = "Tên khách hàng không được để trống")
    private String name;

    private String phone;

    @Email(message = "Email không hợp lệ")
    private String email;

    private String address;

    private String note;
    private String branchId; // Có thể null nếu không phân biệt chi nhánh
}
// File: src/main/java/com/example/sales/dto/customer/CustomerResponse.java

package com.example.sales.dto.customer;

import lombok.Builder;
import lombok.Data;

@Data
@Builder
public class CustomerResponse {
    private String id;
    private String name;
    private String phone;
    private String email;
    private String address;
    private String note;
}
// File: src/main/java/com/example/sales/dto/customer/CustomerSearchRequest.java

package com.example.sales.dto.customer;

import lombok.Data;

import java.time.LocalDate;

@Data
public class CustomerSearchRequest {
    private String keyword = "";
    private int page = 0;
    private int size = 20;
    private LocalDate fromDate;
    private LocalDate toDate;
    private String sortBy = "createdAt";
    private String sortDir = "desc";
}

// File: src/main/java/com/example/sales/dto/order/OrderItemRequest.java

package com.example.sales.dto.order;

import jakarta.validation.constraints.Min;
import jakarta.validation.constraints.NotBlank;
import lombok.Data;

@Data
public class OrderItemRequest {
    @NotBlank
    private String productId;

    @Min(1)
    private int quantity;

    @Min(0)
    private double price;
}

// File: src/main/java/com/example/sales/dto/order/OrderItemResponse.java

package com.example.sales.dto.order;
import lombok.Builder;
import lombok.Data;

@Data
@Builder
public class OrderItemResponse {
    private String productId;
    private String productName;
    private int quantity;
    private double price;
    private double priceAfterDiscount; // giá sau khi đã áp dụng khuyến mãi
    private String appliedPromotionId; // id khuyến mãi được áp dụng (nếu có)
}
// File: src/main/java/com/example/sales/dto/order/OrderRequest.java

package com.example.sales.dto.order;

import jakarta.validation.Valid;
import jakarta.validation.constraints.NotNull;
import lombok.Data;

import java.util.List;

@Data
public class OrderRequest {
    @NotNull
    @Valid
    private List<OrderItemRequest> items;

    private String tableId; // optional
    private String note;
    private String branchId;
}
// File: src/main/java/com/example/sales/dto/order/OrderResponse.java

package com.example.sales.dto.order;

import com.example.sales.constant.OrderStatus;
import lombok.Builder;
import lombok.Data;

import java.time.LocalDateTime;
import java.util.List;

@Data
@Builder
public class OrderResponse {
    private String id;
    private String tableId;
    private String note;
    private OrderStatus status;

    private boolean paid;
    private String paymentMethod;
    private String paymentId;
    private LocalDateTime paymentTime;

    private double totalAmount;
    private double totalPrice;

    private List<OrderItemResponse> items;
}

// File: src/main/java/com/example/sales/dto/product/ProductRequest.java
package com.example.sales.dto.product;

import jakarta.validation.constraints.*;
import lombok.Getter;
import lombok.Setter;

/**
 * DTO yêu cầu tạo/cập nhật sản phẩm.
 */
@Getter
@Setter
public class ProductRequest {

    /**
     * Tên sản phẩm, không được để trống.
     */
    @NotBlank(message = "Tên sản phẩm không được để trống")
    @Size(max = 100, message = "Tên sản phẩm không được vượt quá 100 ký tự")
    private String name;

    /**
     * Giá sản phẩm, phải là số dương.
     */
    @NotNull(message = "Giá sản phẩm là bắt buộc")
    @Positive(message = "Giá sản phẩm phải lớn hơn 0")
    private Double price;

    /**
     * Số lượng tồn kho, phải là số không âm.
     */
    @NotNull(message = "Số lượng tồn kho là bắt buộc")
    @PositiveOrZero(message = "Số lượng tồn kho phải là số không âm")
    private Integer quantity;

    /**
     * Danh mục sản phẩm, không được để trống.
     */
    @NotBlank(message = "Danh mục sản phẩm không được để trống")
    @Size(max = 50, message = "Danh mục không được vượt quá 50 ký tự")
    private String category;

    /**
     * Mã sản phẩm, nếu có, phải tuân theo định dạng (ví dụ: SKU-123).
     */
    @Pattern(regexp = "^[A-Z0-9-]{0,20}$", message = "Mã sản phẩm không hợp lệ")
    private String sku;

    /**
     * URL hình ảnh sản phẩm, nếu có.
     */
    @Size(max = 255, message = "URL hình ảnh không được vượt quá 255 ký tự")
    private String imageUrl;

    /**
     * Mô tả sản phẩm, nếu có.
     */
    @Size(max = 500, message = "Mô tả không được vượt quá 500 ký tự")
    private String description;

    /**
     * Đơn vị sản phẩm (ví dụ: kg, cái), nếu có.
     */
    @Size(max = 20, message = "Đơn vị không được vượt quá 20 ký tự")
    private String unit;

    /**
     * Trạng thái sản phẩm (mặc định là true).
     */
    private boolean active = true;

    /**
     * Mã định danh sản phẩm, nếu có.
     */
    @Size(max = 50, message = "Mã định danh sản phẩm không được vượt quá 50 ký tự")
    private String productCode;

    /**
     * ID chi nhánh, có thể để null nếu không thuộc chi nhánh cụ thể.
     */
    @Size(max = 50, message = "ID chi nhánh không được vượt quá 50 ký tự")
    private String branchId;
}

// File: src/main/java/com/example/sales/dto/product/ProductResponse.java
package com.example.sales.dto.product;

import lombok.Builder;
import lombok.Data;

import java.time.LocalDateTime;

/**
 * DTO phản hồi thông tin sản phẩm.
 */
@Data
@Builder
public class ProductResponse {
    /**
     * ID sản phẩm.
     */
    private String id;

    /**
     * Tên sản phẩm.
     */
    private String name;

    /**
     * Giá sản phẩm.
     */
    private double price;

    /**
     * Số lượng tồn kho.
     */
    private int quantity;

    /**
     * Danh mục sản phẩm.
     */
    private String category;

    /**
     * Mã sản phẩm.
     */
    private String sku;

    /**
     * URL hình ảnh sản phẩm.
     */
    private String imageUrl;

    /**
     * Mô tả sản phẩm.
     */
    private String description;

    /**
     * Trạng thái sản phẩm (kích hoạt hay không).
     */
    private boolean active;

    /**
     * Đơn vị sản phẩm (ví dụ: kg, lít).
     */
    private String unit;

    /**
     * Mã định danh sản phẩm.
     */
    private String productCode;

    /**
     * ID cửa hàng sở hữu sản phẩm.
     */
    private String shopId;

    /**
     * Thời gian tạo sản phẩm.
     */
    private LocalDateTime createdAt;

    /**
     * Thời gian cập nhật sản phẩm.
     */
    private LocalDateTime updatedAt;
}

// File: src/main/java/com/example/sales/dto/product/ProductSearchRequest.java
package com.example.sales.dto.product;

import lombok.Data;

@Data
public class ProductSearchRequest {
    private String keyword = "";
    private String category = "";
    private Boolean active;
    private Double minPrice;
    private Double maxPrice;
    private int page = 0;
    private int size = 20;
    private String sortBy = "createdAt";
    private String sortDir = "desc";
    private String branchId; // nếu có chi nhánh, có thể để null nếu không có
}
// File: src/main/java/com/example/sales/dto/promotion/PromotionRequest.java
package com.example.sales.dto.promotion;

import com.example.sales.constant.DiscountType;
import jakarta.validation.constraints.*;
import lombok.Data;

import java.time.LocalDateTime;
import java.util.List;

@Data
public class PromotionRequest {

    @NotBlank
    private String name;

    @NotNull
    private DiscountType discountType;

    @Positive
    private double discountValue;

    private List<String> applicableProductIds;

    @NotNull
    private LocalDateTime startDate;

    @NotNull
    private LocalDateTime endDate;

    private boolean active = true;
    private String branchId;
}
// File: src/main/java/com/example/sales/dto/promotion/PromotionResponse.java
package com.example.sales.dto.promotion;

import com.example.sales.constant.DiscountType;
import lombok.Builder;
import lombok.Data;

import java.time.LocalDateTime;
import java.util.List;

@Data
@Builder
public class PromotionResponse {
    private String id;
    private String name;
    private DiscountType discountType;
    private double discountValue;
    private List<String> applicableProductIds;
    private LocalDateTime startDate;
    private LocalDateTime endDate;
    private boolean active;
}
// File: src/main/java/com/example/sales/dto/report/DailyReportResponse.java
package com.example.sales.dto.report;

import lombok.Builder;
import lombok.Data;

import java.time.LocalDate;

@Data
@Builder
public class DailyReportResponse {
    private LocalDate date;
    private long totalOrders;
    private long totalProductsSold;
    private double totalRevenue;
}

// File: src/main/java/com/example/sales/dto/report/ReportRequest.java
package com.example.sales.dto.report;

import com.example.sales.constant.OrderStatus;
import com.example.sales.validation.ValidDateRange;
import lombok.Data;

import java.time.LocalDate;

@Data
@ValidDateRange
public class ReportRequest {
    private LocalDate startDate;
    private LocalDate endDate;
    private OrderStatus status; // optional
}

// File: src/main/java/com/example/sales/dto/report/ReportResponse.java
package com.example.sales.dto.report;

import lombok.Builder;
import lombok.Data;

@Data
@Builder
public class ReportResponse {
    private long totalOrders;
    private long totalProductsSold;
    private double totalRevenue;
}

// File: src/main/java/com/example/sales/dto/ApiResponse.java
package com.example.sales.dto;

import com.example.sales.constant.ApiCode;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;

import java.time.Instant;

/**
 * Generic response class for API responses, including success status, error code, message, data, and timestamp.
 */
@Getter
@NoArgsConstructor
@AllArgsConstructor
public class ApiResponse<T> {
    private boolean success;
    private String code;
    private String message;
    private T data;
    private String timestamp;

    /**
     * Creates a successful response with data.
     */
    public static <T> ApiResponse<T> success(ApiCode code, T data) {
        return new ApiResponse<>(true, code.getCode(), code.getMessage(), data, Instant.now().toString());
    }

    /**
     * Creates a successful response without data.
     */
    public static <T> ApiResponse<T> success(ApiCode code) {
        return new ApiResponse<>(true, code.getCode(), code.getMessage(), null, Instant.now().toString());
    }

    /**
     * Creates an error response without data.
     */
    public static <T> ApiResponse<T> error(ApiCode code) {
        return new ApiResponse<>(false, code.getCode(), code.getMessage(), null, Instant.now().toString());
    }

    /**
     * Creates an error response with custom message and data.
     */
    public static <T> ApiResponse<T> error(ApiCode code, String message, T data) {
        return new ApiResponse<>(false, code.getCode(), message, data, Instant.now().toString());
    }
}


// File: src/main/java/com/example/sales/dto/ChangePasswordRequest.java
package com.example.sales.dto;

import jakarta.validation.constraints.NotBlank;
import lombok.Data;

@Data
public class ChangePasswordRequest {

    @NotBlank
    private String currentPassword;

    @NotBlank
    private String newPassword;
}
// File: src/main/java/com/example/sales/dto/JwtResponse.java
package com.example.sales.dto;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@AllArgsConstructor
@NoArgsConstructor
public class JwtResponse {
    private String accessToken;
    private String refreshToken;
}

// File: src/main/java/com/example/sales/dto/LoginRequest.java
package com.example.sales.dto;

import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.NotBlank;
import lombok.Data;

@Data
public class LoginRequest {
    @Email
    private String email;

    @NotBlank
    private String password;
}

// File: src/main/java/com/example/sales/dto/RefreshTokenRequest.java
package com.example.sales.dto;

import lombok.Data;

@Data
public class RefreshTokenRequest {
    private String refreshToken;
}

// File: src/main/java/com/example/sales/dto/RegisterRequest.java
package com.example.sales.dto;

import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.Size;
import lombok.Data;

@Data
public class RegisterRequest {
    @Email
    private String email;

    @Size(min = 6, message = "Mật khẩu phải từ 6 ký tự")
    private String password;
}

// File: src/main/java/com/example/sales/dto/SalesReportDto.java
package com.example.sales.dto;

import lombok.AllArgsConstructor;
import lombok.Data;

import java.time.LocalDate;

@Data
@AllArgsConstructor
public class SalesReportDto {
    private LocalDate date;
    private long totalOrders;
    private double totalAmount;
}

// File: src/main/java/com/example/sales/dto/shop/ShopRequest.java
package com.example.sales.dto.shop;

import com.example.sales.constant.ShopType;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Pattern;
import lombok.Getter;
import lombok.Setter;

@Getter
@Setter
public class ShopRequest {
    @NotBlank(message = "Tên cửa hàng không được để trống")
    private String name;

    @NotNull(message = "Loại cửa hàng là bắt buộc")
    private ShopType type;

    @Pattern(regexp = "^\\+?[1-9]\\d{1,14}$", message = "Số điện thoại không hợp lệ")
    private String phone;

    private String address;
}

// File: src/main/java/com/example/sales/dto/TableRequest.java
package com.example.sales.dto;

import com.example.sales.constant.TableStatus;
import jakarta.validation.constraints.NotBlank;
import lombok.Getter;
import lombok.Setter;

@Getter
@Setter
public class TableRequest {
    @NotBlank
    private String name;

    private TableStatus status = TableStatus.AVAILABLE;
    private String shopId;
    private Integer capacity;
    private String note;
    private String branchId; // Có thể null nếu không phân biệt chi nhánh
}

// File: src/main/java/com/example/sales/dto/TableResponse.java
package com.example.sales.dto;

import com.example.sales.constant.TableStatus;
import lombok.*;

@Getter
@Setter
@Builder
public class TableResponse {
    private String id;
    private String name;
    private TableStatus status;
    private String shopId;
    private String shopName;
    private Integer capacity;
    private String note;
    private String currentOrderId;
    private String branchId; // Có thể null nếu không phân biệt chi nhánh
}


// File: src/main/java/com/example/sales/dto/UpdateProfileRequest.java
package com.example.sales.dto;

import lombok.Data;

@Data
public class UpdateProfileRequest {
    private String fullName;
    private String phone;
    private String businessType;
}

// File: src/main/java/com/example/sales/exception/BusinessException.java
package com.example.sales.exception;

import com.example.sales.constant.ApiCode;
import lombok.Getter;

@Getter
public class BusinessException extends RuntimeException {
    private final ApiCode error;

    public BusinessException(ApiCode error) {
        super(error.name());
        this.error = error;
    }
}

// File: main/java/com/example/sales/exception/GlobalExceptionHandler.java
package com.example.sales.exception;

import com.example.sales.constant.ApiCode;
import com.example.sales.dto.ApiResponse;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.http.converter.HttpMessageNotReadableException;
import org.springframework.security.access.AccessDeniedException;
import org.springframework.validation.FieldError;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.RestControllerAdvice;
import org.springframework.web.context.request.WebRequest;

import java.util.HashMap;
import java.util.Map;

@RestControllerAdvice
@Slf4j
public class GlobalExceptionHandler {

    /**
     * Xử lý lỗi validation cho các DTO
     */
    @ExceptionHandler(MethodArgumentNotValidException.class)
    public ResponseEntity<ApiResponse<Map<String, String>>> handleValidationExceptions(
            MethodArgumentNotValidException ex, WebRequest request) {
        Map<String, String> errors = new HashMap<>();
        for (FieldError error : ex.getBindingResult().getFieldErrors()) {
            errors.put(error.getField(), error.getDefaultMessage());
        }
        log.warn("Validation error at {}: {}", request.getDescription(false), errors);
        return ResponseEntity
                .status(HttpStatus.BAD_REQUEST)
                .body(ApiResponse.error(ApiCode.VALIDATION_ERROR, ApiCode.VALIDATION_ERROR.getMessage(), errors));
    }

    /**
     * Xử lý lỗi khi người dùng không có quyền truy cập
     */
    @ExceptionHandler(AccessDeniedException.class)
    public ResponseEntity<ApiResponse<String>> handleAccessDeniedException(
            AccessDeniedException ex, WebRequest request) {
        log.warn("Access denied at {}: {}", request.getDescription(false), ex.getMessage());
        return ResponseEntity
                .status(HttpStatus.FORBIDDEN)
                .body(ApiResponse.error(ApiCode.ACCESS_DENIED, ApiCode.ACCESS_DENIED.getMessage(), ex.getMessage()));
    }

    /**
     * Xử lý lỗi kinh doanh
     */
    @ExceptionHandler(BusinessException.class)
    public ResponseEntity<ApiResponse<String>> handleBusinessException(
            BusinessException ex, WebRequest request) {
        log.error("Business error at {}: {} - {}",
                request.getDescription(false), ex.getError().getCode(), ex.getError().getMessage());
        return ResponseEntity
                .status(getHttpStatus(ex.getError()))
                .body(ApiResponse.error(ex.getError(), ex.getError().getMessage(), null));
    }

    /**
     * Xử lý các lỗi chung (fallback)
     */
    @ExceptionHandler(Exception.class)
    public ResponseEntity<ApiResponse<String>> handleAllExceptions(
            Exception ex, WebRequest request) {
        request.getRemoteUser();
        log.error("Internal server error at {} for user {} (requestId: {}): {}",
                request.getDescription(false),
                request.getRemoteUser(),
                request.getHeader("X-Request-ID"),
                ex.getMessage(), ex);
        return ResponseEntity
                .status(HttpStatus.INTERNAL_SERVER_ERROR)
                .body(ApiResponse.error(ApiCode.INTERNAL_ERROR, ApiCode.INTERNAL_ERROR.getMessage(), ex.getMessage()));
    }

    @ExceptionHandler(IllegalArgumentException.class)
    public ResponseEntity<ApiResponse<String>> handleIllegalArgumentException(
            IllegalArgumentException ex, WebRequest request) {
        log.warn("Invalid argument at {}: {}", request.getDescription(false), ex.getMessage());
        return ResponseEntity
                .status(HttpStatus.BAD_REQUEST)
                .body(ApiResponse.error(ApiCode.VALIDATION_ERROR, ApiCode.VALIDATION_ERROR.getMessage(), ex.getMessage()));
    }

    @ExceptionHandler(HttpMessageNotReadableException.class)
    public ResponseEntity<ApiResponse<String>> handleHttpMessageNotReadableException(
            HttpMessageNotReadableException ex, WebRequest request) {
        log.warn("Invalid JSON at {}: {}", request.getDescription(false), ex.getMessage());
        return ResponseEntity
                .status(HttpStatus.BAD_REQUEST)
                .body(ApiResponse.error(ApiCode.VALIDATION_ERROR, ApiCode.VALIDATION_ERROR.getMessage(), ex.getMessage()));
    }

    /**
     * Ánh xạ ApiCode sang mã trạng thái HTTP
     */
    private HttpStatus getHttpStatus(ApiCode errorCode) {
        return switch (errorCode) {
            case UNAUTHORIZED -> HttpStatus.UNAUTHORIZED;
            case ACCESS_DENIED -> HttpStatus.FORBIDDEN;
            case NOT_FOUND, USER_NOT_FOUND, SHOP_NOT_FOUND, PRODUCT_NOT_FOUND, ORDER_NOT_FOUND,
                    TABLE_NOT_FOUND, BRANCH_NOT_FOUND, CUSTOMER_NOT_FOUND, PROMOTION_NOT_FOUND ->
                    HttpStatus.NOT_FOUND;
            case VALIDATION_ERROR, INVALID_TOKEN, ACCOUNT_LOCKED, REFRESH_TOKEN_EXPIRED,
                    REFRESH_TOKEN_INVALID, INCORRECT_PASSWORD, VALIDATION_FILE_ERROR,
                    PLAN_UPGRADE_REQUIRED, ORDER_ALREADY_PAID, INVALID_STATUS_TRANSITION,
                    PRODUCT_OUT_OF_STOCK, DUPLICATE_DATA, CANNOT_DELETE_SELF, SHOP_ALREADY_EXISTS,
                    EMAIL_EXISTS, ALREADY_VERIFIED, TOKEN_EXPIRED, EMAIL_NOT_VERIFIED ->
                    HttpStatus.BAD_REQUEST;
            case INTERNAL_ERROR, FILE_UPLOAD_FAILED, FILE_TYPE_NOT_ALLOWED ->
                    HttpStatus.INTERNAL_SERVER_ERROR;
            default -> HttpStatus.OK;
        };
    }
}

// File: src/main/java/com/example/sales/exception/ResourceNotFoundException.java
package com.example.sales.exception;

import com.example.sales.constant.ApiCode;
import lombok.Getter;

@Getter
public class ResourceNotFoundException extends RuntimeException {
    private final ApiCode error;

    public ResourceNotFoundException(ApiCode error) {
        super(error.name());
        this.error = error;
    }
}

// File: src/main/java/com/example/sales/export/GenericExcelExporter.java
package com.example.sales.export;

import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import java.io.*;
import java.util.List;
import java.util.function.Function;

public class GenericExcelExporter<T> {

    public InputStream export(String sheetName, List<String> headers, List<T> data, Function<T, List<String>> mapper) throws IOException {
        try (Workbook workbook = new XSSFWorkbook()) {
            Sheet sheet = workbook.createSheet(sheetName);

            // Header row
            Row headerRow = sheet.createRow(0);
            CellStyle headerStyle = createHeaderStyle(workbook);
            for (int i = 0; i < headers.size(); i++) {
                Cell cell = headerRow.createCell(i);
                cell.setCellValue(headers.get(i));
                cell.setCellStyle(headerStyle);
            }

            // Data rows
            int rowNum = 1;
            for (T item : data) {
                Row row = sheet.createRow(rowNum++);
                List<String> values = mapper.apply(item);
                for (int i = 0; i < values.size(); i++) {
                    row.createCell(i).setCellValue(values.get(i));
                }
            }

            // Auto-size columns
            for (int i = 0; i < headers.size(); i++) {
                sheet.autoSizeColumn(i);
            }

            ByteArrayOutputStream out = new ByteArrayOutputStream();
            workbook.write(out);
            return new ByteArrayInputStream(out.toByteArray());
        }
    }

    private CellStyle createHeaderStyle(Workbook wb) {
        CellStyle style = wb.createCellStyle();
        Font font = wb.createFont();
        font.setBold(true);
        style.setFont(font);
        return style;
    }
}
// File: src/main/java/com/example/sales/helper/CustomerSearchHelper.java
package com.example.sales.helper;

import com.example.sales.dto.customer.CustomerSearchRequest;
import com.example.sales.model.Customer;
import org.bson.Document;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.data.mongodb.core.MongoTemplate;
import org.springframework.data.mongodb.core.aggregation.*;
import org.springframework.data.mongodb.core.query.Criteria;
import org.springframework.stereotype.Component;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import static org.springframework.data.mongodb.core.aggregation.Aggregation.*;

@Component
public class CustomerSearchHelper {

    private final MongoTemplate mongoTemplate;

    public CustomerSearchHelper(MongoTemplate mongoTemplate) {
        this.mongoTemplate = mongoTemplate;
    }

    public List<Customer> search(String userId, CustomerSearchRequest req, Pageable pageable) {
        Aggregation agg = newAggregation(
                buildMatch(userId, req),
                sort(Sort.Direction.DESC, "_id"),
                skip((long) pageable.getPageNumber() * pageable.getPageSize()),
                limit(pageable.getPageSize())
        );

        return mongoTemplate.aggregate(agg, "customers", Customer.class).getMappedResults();
    }

    public long counts(String userId, CustomerSearchRequest req) {
        Aggregation countAgg = newAggregation(
                buildMatch(userId, req),
                count().as("total")
        );

        return Optional.of(
                mongoTemplate.aggregate(countAgg, "customers", Document.class)
                        .getUniqueMappedResult()
        ).map(d -> ((Number) d.get("total")).longValue()).orElse(0L);
    }

    public List<Customer> exportAll(String userId, CustomerSearchRequest req) {
        Aggregation agg = newAggregation(
                buildMatch(userId, req),
                sort(Sort.Direction.ASC, "name")
        );

        return mongoTemplate.aggregate(agg, "customers", Customer.class).getMappedResults();
    }

    private MatchOperation buildMatch(String userId, CustomerSearchRequest req) {
        String keyword = Optional.ofNullable(req.getKeyword()).orElse("").trim();

        Criteria base = Criteria.where("userId").is(userId);
        List<Criteria> andConditions = new ArrayList<>();
        andConditions.add(base);

        // keyword
        if (!keyword.isEmpty()) {
            andConditions.add(new Criteria().orOperator(
                    Criteria.where("name").regex(keyword, "i"),
                    Criteria.where("email").regex(keyword, "i"),
                    Criteria.where("phone").regex(keyword, "i")
            ));
        }

        // filter ngày tạo
        if (req.getFromDate() != null || req.getToDate() != null) {
            Criteria dateCriteria = Criteria.where("createdAt");
            if (req.getFromDate() != null) {
                dateCriteria = dateCriteria.gte(req.getFromDate().atStartOfDay());
            }
            if (req.getToDate() != null) {
                dateCriteria = dateCriteria.lte(req.getToDate().atTime(23, 59, 59));
            }
            andConditions.add(dateCriteria);
        }

        return match(new Criteria().andOperator(andConditions.toArray(new Criteria[0])));
    }
}
// File: src/main/java/com/example/sales/helper/ProductSearchHelper.java
package com.example.sales.helper;

import com.example.sales.dto.product.ProductSearchRequest;
import com.example.sales.model.Product;
import lombok.RequiredArgsConstructor;
import org.bson.Document;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.data.mongodb.core.MongoTemplate;
import org.springframework.data.mongodb.core.aggregation.*;
import org.springframework.data.mongodb.core.query.Criteria;
import org.springframework.stereotype.Component;

import java.util.*;

import static org.springframework.data.mongodb.core.aggregation.Aggregation.*;

@Component
@RequiredArgsConstructor
public class ProductSearchHelper {

    private final MongoTemplate mongoTemplate;

    public List<Product> search(String shopId, String branchId, ProductSearchRequest req, Pageable pageable) {
        Aggregation agg = newAggregation(
                buildMatch(shopId, branchId, req),
                sort(Sort.Direction.fromString(req.getSortDir()), req.getSortBy()),
                skip((long) pageable.getPageNumber() * pageable.getPageSize()),
                limit(pageable.getPageSize())
        );

        return mongoTemplate.aggregate(agg, "products", Product.class).getMappedResults();
    }

    public long counts(String shopId, String branchId, ProductSearchRequest req) {
        Aggregation agg = newAggregation(
                buildMatch(shopId, branchId, req),
                count().as("total")
        );

        return Optional.of(
                mongoTemplate.aggregate(agg, "products", Document.class).getUniqueMappedResult()
        ).map(d -> ((Number) d.get("total")).longValue()).orElse(0L);
    }

    private MatchOperation buildMatch(String shopId, String branchId, ProductSearchRequest req) {
        List<Criteria> criteria = new ArrayList<>();
        criteria.add(Criteria.where("shopId").is(shopId));
        if (branchId != null && !branchId.isBlank()) {
            criteria.add(Criteria.where("branchId").is(branchId));
        }
        if (req.getKeyword() != null && !req.getKeyword().isBlank()) {
            String pattern = ".*" + req.getKeyword().trim() + ".*";
            criteria.add(new Criteria().orOperator(
                    Criteria.where("name").regex(pattern, "i"),
                    Criteria.where("category").regex(pattern, "i")
            ));
        }

        if (req.getCategory() != null && !req.getCategory().isBlank()) {
            criteria.add(Criteria.where("category").is(req.getCategory()));
        }

        if (req.getActive() != null) {
            criteria.add(Criteria.where("active").is(req.getActive()));
        }

        if (req.getMinPrice() != null) {
            criteria.add(Criteria.where("price").gte(req.getMinPrice()));
        }

        if (req.getMaxPrice() != null) {
            criteria.add(Criteria.where("price").lte(req.getMaxPrice()));
        }

        return match(new Criteria().andOperator(criteria.toArray(new Criteria[0])));
    }
}
// File: src/main/java/com/example/sales/job/ImageCleanupJob.java
package com.example.sales.job;

import lombok.extern.slf4j.Slf4j;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;

import java.io.File;
import java.time.Instant;
import java.time.temporal.ChronoUnit;

@Slf4j
@Component
public class ImageCleanupJob {

    private static final String TEMP_FOLDER = "uploads/temp";
    private static final long EXPIRE_MINUTES = 30;

    @Scheduled(fixedRate = 15 * 60 * 1000) // mỗi 15 phút
    public void cleanUpTempImages() {
        File dir = new File(TEMP_FOLDER);
        if (!dir.exists() || !dir.isDirectory()) return;

        File[] files = dir.listFiles();
        if (files == null) return;

        Instant now = Instant.now();

        for (File file : files) {
            if (file.isFile()) {
                long lastModified = file.lastModified();
                Instant modifiedTime = Instant.ofEpochMilli(lastModified);
                if (modifiedTime.isBefore(now.minus(EXPIRE_MINUTES, ChronoUnit.MINUTES))) {
                    boolean deleted = file.delete();
                    log.info("Deleted temp image {}: {}", file.getName(), deleted);
                }
            }
        }
    }
}

// File: src/main/java/com/example/sales/model/base/BaseEntity.java

package com.example.sales.model.base;

import lombok.Getter;
import lombok.Setter;
import lombok.ToString;
import lombok.EqualsAndHashCode;
import lombok.NoArgsConstructor;
import lombok.AllArgsConstructor;
import org.springframework.data.annotation.CreatedBy;
import org.springframework.data.annotation.CreatedDate;
import org.springframework.data.annotation.LastModifiedBy;
import org.springframework.data.annotation.LastModifiedDate;
import org.springframework.data.mongodb.core.mapping.Field;

import java.time.LocalDateTime;

@Getter
@Setter
@ToString(exclude = {"createdBy", "updatedBy"}) // 👈 Tránh vòng lặp khi log
@EqualsAndHashCode
@NoArgsConstructor
@AllArgsConstructor
public abstract class BaseEntity {

    @CreatedDate
    private LocalDateTime createdAt;

    @LastModifiedDate
    private LocalDateTime updatedAt;

    @CreatedBy
    private String createdBy;

    @LastModifiedBy
    private String updatedBy;

    @Field("deleted")
    private boolean deleted = false;

    private LocalDateTime deletedAt;
}

// File: src/main/java/com/example/sales/model/AuditLog.java
package com.example.sales.model;

import com.example.sales.model.base.BaseEntity;
import lombok.*;
import org.springframework.data.annotation.Id;
import org.springframework.data.mongodb.core.mapping.Document;

@Getter
@Setter
@ToString
@EqualsAndHashCode(callSuper = true)
@Builder
@AllArgsConstructor
@NoArgsConstructor
@Document("audit_logs")
public class AuditLog extends BaseEntity {

    @Id
    private String id;

    private String userId;
    private String shopId;

    private String targetId;     // ID của Order hoặc Product
    private String targetType;   // "ORDER", "PRODUCT"

    private String action;       // PRICE_CHANGED, STATUS_UPDATED, etc.
    private String description;
}

// File: src/main/java/com/example/sales/model/Branch.java
package com.example.sales.model;

import com.example.sales.model.base.BaseEntity;
import lombok.*;
import org.springframework.data.annotation.Id;
import org.springframework.data.mongodb.core.mapping.Document;

@Getter
@Setter
@ToString
@EqualsAndHashCode(callSuper = true)
@Builder
@AllArgsConstructor
@NoArgsConstructor
@Document("branches")
public class Branch extends BaseEntity {

    @Id
    private String id;

    private String shopId;
    private String name;
    private String address;
    private String phone;

    @Builder.Default
    private boolean active = true;
}


// File: src/main/java/com/example/sales/model/Customer.java
package com.example.sales.model;

import com.example.sales.model.base.BaseEntity;
import lombok.*;
import org.springframework.data.annotation.Id;
import org.springframework.data.mongodb.core.mapping.Document;

@Getter
@Setter
@ToString
@EqualsAndHashCode(callSuper = true)
@Builder
@AllArgsConstructor
@NoArgsConstructor
@Document("customers")
public class Customer extends BaseEntity {

    @Id
    private String id;

    private String userId;     // Chủ sở hữu
    private String name;
    private String phone;
    private String email;
    private String address;
    private String note;
    private String shopId;
    private String branchId;   // Có thể null nếu không phân biệt chi nhánh
}

// File: src/main/java/com/example/sales/model/Order.java
package com.example.sales.model;

import com.example.sales.constant.OrderStatus;
import com.example.sales.model.base.BaseEntity;
import lombok.*;
import org.springframework.data.annotation.Id;
import org.springframework.data.mongodb.core.mapping.Document;

import java.time.LocalDateTime;
import java.util.List;

@Getter
@Setter
@ToString(exclude = "items") // 👈 Quan trọng: không in danh sách item
@EqualsAndHashCode(callSuper = true)
@Builder
@AllArgsConstructor
@NoArgsConstructor
@Document("orders")
public class Order extends BaseEntity {
    @Id
    private String id;

    private String shopId;
    private String branchId;
    private String tableId;
    private String userId;

    private List<OrderItem> items;

    private double totalPrice;
    private double totalAmount;

    @Builder.Default
    private OrderStatus status = OrderStatus.PENDING;

    private String paymentId;
    private String paymentMethod;
    private LocalDateTime paymentTime;
    private boolean isPaid;

    private String note;
}

// File: src/main/java/com/example/sales/model/OrderItem.java
package com.example.sales.model;

import lombok.Getter;
import lombok.Setter;
import lombok.ToString;
import lombok.NoArgsConstructor;
import lombok.AllArgsConstructor;
import lombok.Builder;

@Getter
@Setter
@ToString
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class OrderItem {
    private String productId;
    private String productName;
    private int quantity;
    private double price;
    private double priceAfterDiscount;
    private String appliedPromotionId;
}

// File: src/main/java/com/example/sales/model/Product.java
package com.example.sales.model;

import com.example.sales.model.base.BaseEntity;
import jakarta.validation.constraints.DecimalMin;
import jakarta.validation.constraints.Min;
import jakarta.validation.constraints.NotBlank;
import lombok.*;
import org.springframework.data.annotation.Id;
import org.springframework.data.mongodb.core.mapping.Document;

/**
 * Mô hình sản phẩm trong cơ sở dữ liệu.
 */
@Getter
@Setter
@ToString
@EqualsAndHashCode(callSuper = true)
@Builder
@AllArgsConstructor
@NoArgsConstructor
@Document("products")
public class Product extends BaseEntity {
    @Id
    private String id;

    @NotBlank(message = "Tên sản phẩm không được để trống")
    private String name;

    @NotBlank(message = "Danh mục không được để trống")
    private String category;

    @Min(value = 0, message = "Số lượng không được âm")
    private int quantity;

    @DecimalMin(value = "0.0", inclusive = false, message = "Giá phải lớn hơn 0")
    private double price;

    private String unit;
    private String imageUrl;
    private String description;

    private String shopId;
    private String branchId;

    @Builder.Default
    private boolean active = true;

    private String productCode;
    private String sku;
}

// File: src/main/java/com/example/sales/model/Promotion.java
package com.example.sales.model;

import com.example.sales.constant.DiscountType;
import com.example.sales.model.base.BaseEntity;
import lombok.*;
import org.springframework.data.annotation.Id;
import org.springframework.data.mongodb.core.mapping.Document;

import java.time.LocalDateTime;
import java.util.List;

@Getter
@Setter
@ToString
@EqualsAndHashCode(callSuper = true)
@Builder
@AllArgsConstructor
@NoArgsConstructor
@Document(collection = "promotions")
public class Promotion extends BaseEntity {

    @Id
    private String id;

    private String shopId;
    private String branchId;

    private String name;

    private DiscountType discountType; // PERCENT, AMOUNT

    private double discountValue;

    private List<String> applicableProductIds;

    private LocalDateTime startDate;
    private LocalDateTime endDate;

    private boolean active;
}

// File: src/main/java/com/example/sales/model/RefreshToken.java
package com.example.sales.model;

import lombok.Getter;
import lombok.Setter;
import lombok.ToString;
import lombok.NoArgsConstructor;
import lombok.AllArgsConstructor;
import org.springframework.data.annotation.Id;
import org.springframework.data.mongodb.core.mapping.Document;

import java.util.Date;

@Getter
@Setter
@ToString(exclude = "token") // ❗ tránh log token
@NoArgsConstructor
@AllArgsConstructor
@Document(collection = "refresh_tokens")
public class RefreshToken {
    @Id
    private String id;
    private String token;
    private String userId;
    private Date expiryDate;
}

// File: src/main/java/com/example/sales/model/Shop.java
package com.example.sales.model;

import com.example.sales.constant.ShopType;
import com.example.sales.constant.SubscriptionPlan;
import com.example.sales.model.base.BaseEntity;
import lombok.*;
import org.springframework.data.annotation.Id;
import org.springframework.data.mongodb.core.mapping.Document;

import java.time.LocalDateTime;

@Getter
@Setter
@ToString
@EqualsAndHashCode(callSuper = true)
@Builder
@AllArgsConstructor
@NoArgsConstructor
@Document(collection = "shops")
public class Shop extends BaseEntity {

    @Id
    private String id;

    private String name;
    private String ownerId;
    private ShopType type;
    private String address;
    private String phone;
    private String logoUrl;

    @Builder.Default
    private boolean active = true;

    // ====== Nâng cao (SS) ======
    @Builder.Default
    private boolean trackInventory = true;

    @Builder.Default
    private String currency = "VND";

    @Builder.Default
    private String timezone = "Asia/Ho_Chi_Minh";

    @Builder.Default
    private String orderPrefix = "ORD";

    @Builder.Default
    private SubscriptionPlan plan = SubscriptionPlan.FREE;

    private LocalDateTime planExpiry;
}

// File: src/main/java/com/example/sales/model/ShopUser.java
package com.example.sales.model;

import com.example.sales.constant.ShopRole;
import com.example.sales.model.base.BaseEntity;
import lombok.*;
import org.springframework.data.annotation.Id;
import org.springframework.data.mongodb.core.mapping.Document;

@Getter
@Setter
@ToString
@EqualsAndHashCode(callSuper = true)
@Builder
@AllArgsConstructor
@NoArgsConstructor
@Document(collection = "shop_users")
public class ShopUser extends BaseEntity {

    @Id
    private String id;

    private String shopId;

    private String userId;

    private ShopRole role;
}

// File: src/main/java/com/example/sales/model/Table.java
package com.example.sales.model;

import com.example.sales.constant.TableStatus;
import com.example.sales.model.base.BaseEntity;
import lombok.*;
import org.springframework.data.annotation.Id;
import org.springframework.data.mongodb.core.mapping.Document;

@Getter
@Setter
@ToString
@EqualsAndHashCode(callSuper = true)
@Builder
@AllArgsConstructor
@NoArgsConstructor
@Document(collection = "tables")
public class Table extends BaseEntity {
    @Id
    private String id;

    private String shopId;
    private String branchId;
    private String name;
    private TableStatus status;

    private Integer capacity;
    private String note;
    private String currentOrderId;
}

// File: src/main/java/com/example/sales/model/User.java
package com.example.sales.model;

import com.example.sales.constant.UserRole;
import com.example.sales.model.base.BaseEntity;
import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.NotBlank;
import lombok.*;
import org.springframework.data.annotation.Id;
import org.springframework.data.mongodb.core.mapping.Document;

import java.util.Date;

@Getter
@Setter
@ToString(exclude = {
        "password",
        "verificationToken",
        "resetToken"
}) // 👈 Tránh lộ thông tin nhạy cảm & vòng lặp
@EqualsAndHashCode(callSuper = true)
@Builder
@AllArgsConstructor
@NoArgsConstructor
@Document(collection = "users")
public class User extends BaseEntity {

    @Id
    private String id;

    @Email
    @NotBlank
    private String email;

    @NotBlank
    private String password;

    private String businessType;
    private String shopName;
    private String fullName;
    private String phone;
    private String avatarUrl;

    @Builder.Default
    private boolean verified = false;

    private String verificationToken;
    private Date verificationExpiry;

    @Builder.Default
    private UserRole role = UserRole.ROLE_USER;

    private String resetToken;
    private Date resetTokenExpiry;
}

// File: src/main/java/com/example/sales/repository/AuditLogRepository.java
package com.example.sales.repository;

import com.example.sales.model.AuditLog;
import org.springframework.data.mongodb.repository.MongoRepository;

import java.util.List;

public interface AuditLogRepository extends MongoRepository<AuditLog, String> {
    List<AuditLog> findByTargetIdAndDeletedFalseOrderByCreatedAtDesc(String targetId);
}

// File: src/main/java/com/example/sales/repository/BranchRepository.java
package com.example.sales.repository;

import com.example.sales.model.Branch;
import org.springframework.data.mongodb.repository.MongoRepository;
import org.springframework.stereotype.Repository;

import java.util.List;
import java.util.Optional;

@Repository
public interface BranchRepository extends MongoRepository<Branch, String> {
    List<Branch> findByShopIdAndDeletedFalse(String shopId);
    Optional<Branch> findByIdAndDeletedFalse(String id);
}

// File: src/main/java/com/example/sales/repository/CustomerRepository.java
package com.example.sales.repository;

import com.example.sales.model.Customer;
import org.springframework.data.mongodb.repository.MongoRepository;

import java.util.List;
import java.util.Optional;

public interface CustomerRepository extends MongoRepository<Customer, String> {

    List<Customer> findByShopIdAndBranchIdAndDeletedFalse(String shopId, String branchId);

    Optional<Customer> findByIdAndDeletedFalse(String id);
}

// File: src/main/java/com/example/sales/repository/OrderRepository.java
package com.example.sales.repository;

import com.example.sales.constant.OrderStatus;
import com.example.sales.model.Order;
import org.springframework.data.mongodb.repository.MongoRepository;

import java.util.List;
import java.util.Optional;

public interface OrderRepository extends MongoRepository<Order, String> {

    Optional<Order> findByIdAndDeletedFalse(String id);

    List<Order> findByShopIdAndDeletedFalse(String shopId);

    List<Order> findByShopIdAndBranchIdAndStatusAndDeletedFalse(String shopId, String branchId, OrderStatus status);

}

// File: src/main/java/com/example/sales/repository/ProductRepository.java
package com.example.sales.repository;

import com.example.sales.model.Product;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.mongodb.repository.MongoRepository;

import java.util.List;
import java.util.Optional;

/**
 * Repository cho sản phẩm.
 */
public interface ProductRepository extends MongoRepository<Product, String> {
    Optional<Product> findByIdAndDeletedFalse(String id);
    Optional<Product> findByIdAndShopIdAndDeletedFalse(String id, String shopId);
    Page<Product> findByShopIdAndDeletedFalse(String shopId, Pageable pageable);
    List<Product> findByShopIdAndQuantityLessThanAndDeletedFalse(String shopId, int threshold);

}

// File: src/main/java/com/example/sales/repository/PromotionRepository.java
package com.example.sales.repository;

import com.example.sales.model.Promotion;
import org.springframework.data.mongodb.repository.MongoRepository;

import java.util.List;
import java.util.Optional;

public interface PromotionRepository extends MongoRepository<Promotion, String> {
    List<Promotion> findByShopIdAndDeletedFalse(String shopId);

    Optional<Promotion> findByIdAndDeletedFalse(String id);

    List<Promotion> findByShopIdAndBranchIdAndDeletedFalse(String shopId, String branchId);

}

// File: src/main/java/com/example/sales/repository/RefreshTokenRepository.java
package com.example.sales.repository;

import com.example.sales.model.RefreshToken;
import org.springframework.data.mongodb.repository.MongoRepository;

import java.util.Optional;

public interface RefreshTokenRepository extends MongoRepository<RefreshToken, String> {
    Optional<RefreshToken> findByToken(String token);
}

// File: src/main/java/com/example/sales/repository/ShopRepository.java
package com.example.sales.repository;

import com.example.sales.constant.SubscriptionPlan;
import com.example.sales.model.Shop;
import org.springframework.data.mongodb.repository.MongoRepository;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

public interface ShopRepository extends MongoRepository<Shop, String> {
    Optional<Shop> findByOwnerIdAndDeletedFalse(String ownerId);
    Optional<Shop> findByIdAndDeletedFalse(String id);
    List<Shop> findByPlanExpiryBeforeAndPlanNot(LocalDateTime date, SubscriptionPlan plan);
    List<Shop> findByPlanExpiryBetween(LocalDateTime start, LocalDateTime end);
}

// File: src/main/java/com/example/sales/repository/ShopUserRepository.java
package com.example.sales.repository;

import com.example.sales.model.ShopUser;
import org.springframework.data.mongodb.repository.MongoRepository;

import java.util.List;
import java.util.Optional;

public interface ShopUserRepository extends MongoRepository<ShopUser, String> {
    Optional<ShopUser> findByIdAndDeletedFalse(String id);

    Optional<ShopUser> findByShopIdAndUserIdAndDeletedFalse(String shopId, String userId);

    List<ShopUser> findByUserIdAndDeletedFalse(String userId);
}

// File: src/main/java/com/example/sales/repository/TableRepository.java
package com.example.sales.repository;

import com.example.sales.model.Table;
import org.springframework.data.mongodb.repository.MongoRepository;

import java.util.List;
import java.util.Optional;

public interface TableRepository extends MongoRepository<Table, String> {

    List<Table> findByShopIdAndBranchIdAndDeletedFalse(String shopId, String branchId);

    Optional<Table> findByIdAndDeletedFalse(String id);
}

// File: src/main/java/com/example/sales/repository/UserRepository.java
package com.example.sales.repository;

import com.example.sales.model.User;
import org.springframework.data.mongodb.repository.MongoRepository;

import java.util.Optional;

public interface UserRepository extends MongoRepository<User, String> {
    Optional<User> findByEmailAndDeletedFalse(String email);
    Optional<User> findByIdAndDeletedFalse(String id);
    Optional<User> findByVerificationTokenAndDeletedFalse(String token);
}

// File: src/main/java/com/example/sales/security/JwtAuthenticationFilter.java
package com.example.sales.security;

import com.example.sales.constant.UserRole;
import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Component;
import org.springframework.web.filter.OncePerRequestFilter;

import java.io.IOException;
import java.util.List;

@Slf4j
@Component
@RequiredArgsConstructor
public class JwtAuthenticationFilter extends OncePerRequestFilter {

    private final JwtUtil jwtUtil;

    @Override
    protected void doFilterInternal(HttpServletRequest request,
                                    HttpServletResponse response,
                                    FilterChain filterChain)
            throws ServletException, IOException {

        if ("OPTIONS".equalsIgnoreCase(request.getMethod())) {
            response.setStatus(HttpServletResponse.SC_OK);
            return;
        }

        String authHeader = request.getHeader("Authorization");
        if (authHeader == null || !authHeader.startsWith("Bearer ")) {
            filterChain.doFilter(request, response);
            return;
        }

        String token = authHeader.substring(7);
        if (!jwtUtil.isTokenValid(token)) {
            log.warn("JWT không hợp lệ hoặc hết hạn: {}", token);
            filterChain.doFilter(request, response);
            return;
        }

        if (SecurityContextHolder.getContext().getAuthentication() == null) {
            String userId = jwtUtil.extractUserId(token);
            String email = jwtUtil.extractEmail(token);
            String role = jwtUtil.extractRole(token);

            CustomUserDetails userDetails = new CustomUserDetails(
                    userId,
                    email,
                    null,
                    UserRole.valueOf(role),
                    List.of(new SimpleGrantedAuthority("ROLE_" + role))
            );
            UsernamePasswordAuthenticationToken authToken =
                    new UsernamePasswordAuthenticationToken(userDetails, null, userDetails.getAuthorities());
            authToken.setDetails(userDetails);

            SecurityContextHolder.getContext().setAuthentication(authToken);
            log.debug("JWT hợp lệ. Gán userId = {}, role = {}", userId, role);
        }

        filterChain.doFilter(request, response);
    }
}

// File: src/main/java/com/example/sales/security/JwtUtil.java
package com.example.sales.security;

import com.example.sales.model.User;
import io.jsonwebtoken.*;
import io.jsonwebtoken.security.Keys;
import jakarta.annotation.PostConstruct;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;

import java.nio.charset.StandardCharsets;
import java.security.Key;
import java.util.Date;

@Component
public class JwtUtil {

    @Value("${app.jwt.secret}")
    private String jwtSecret;

    private Key key;

    private static final long EXPIRATION_TIME = 1000 * 60 * 60 * 24; // 24h

    @PostConstruct
    public void init() {
        if (jwtSecret == null || jwtSecret.isBlank()) {
            throw new IllegalStateException("❌ JWT secret is missing. Please define 'app.jwt.secret' in application.properties.");
        }
        this.key = Keys.hmacShaKeyFor(jwtSecret.getBytes(StandardCharsets.UTF_8));
    }

    public String generateToken(User user) {
        return Jwts.builder()
                .setSubject(user.getId())
                .claim("email", user.getEmail())
                .claim("businessType", user.getBusinessType())
                .claim("role", user.getRole().name())
                .setIssuedAt(new Date())
                .setExpiration(new Date(System.currentTimeMillis() + EXPIRATION_TIME))
                .signWith(key, SignatureAlgorithm.HS256)
                .compact();
    }

    public String extractUserId(String token) {
        return getClaims(token).getSubject();
    }

    public String extractRole(String token) {
        return getClaims(token).get("role", String.class);
    }

    public String extractEmail(String token) {
        return getClaims(token).get("email", String.class);
    }

    public boolean isTokenValid(String token) {
        try {
            getClaims(token);
            return true;
        } catch (JwtException e) {
            return false;
        }
    }

    private Claims getClaims(String token) {
        return Jwts.parserBuilder()
                .setSigningKey(key)
                .build()
                .parseClaimsJws(token)
                .getBody();
    }
}

// File: src/main/java/com/example/sales/service/AdminUserService.java
package com.example.sales.service;

import com.example.sales.constant.ApiCode;
import com.example.sales.exception.ResourceNotFoundException;
import com.example.sales.model.User;
import com.example.sales.repository.UserRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
@RequiredArgsConstructor
public class AdminUserService {

    private final UserRepository userRepository;
    private final AuditLogService auditLogService;

    public List<User> getAllUsers() {
        return userRepository.findAll();
    }

    public User getUserById(String id) {
        return userRepository.findByIdAndDeletedFalse(id)
                .orElseThrow(() -> new ResourceNotFoundException(ApiCode.USER_NOT_FOUND));
    }

    public User updateUser(String id, User update) {
        User user = getUserById(id);
        user.setEmail(update.getEmail());
        user.setFullName(update.getFullName());
        user.setPhone(update.getPhone());
        user.setBusinessType(update.getBusinessType());
        user.setVerified(update.isVerified());
        user.setRole(update.getRole());
        return userRepository.save(user);
    }

    public void deleteUser(String userId) {
        User user = userRepository.findByIdAndDeletedFalse(userId)
                .orElseThrow(() -> new ResourceNotFoundException(ApiCode.USER_NOT_FOUND));
        user.setDeleted(true);
        userRepository.save(user);
        auditLogService.log(null, user.getId(), user.getId(), "USER", "DELETED", "Xoá mềm tài khoản người dùng");
    }
}

// File: src/main/java/com/example/sales/service/AuditLogService.java
package com.example.sales.service;

import com.example.sales.model.AuditLog;
import com.example.sales.repository.AuditLogRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

@Service
@RequiredArgsConstructor
public class AuditLogService {

    private final AuditLogRepository auditLogRepository;

    public void log(String userId, String shopId, String targetId, String targetType, String action, String description) {
        AuditLog log = AuditLog.builder()
                .userId(userId)
                .shopId(shopId)
                .targetId(targetId)
                .targetType(targetType)
                .action(action)
                .description(description)
                .build();

        auditLogRepository.save(log);
    }
}

// File: src/main/java/com/example/sales/service/AuthService.java
package com.example.sales.service;

import com.example.sales.constant.ApiCode;
import com.example.sales.dto.JwtResponse;
import com.example.sales.dto.LoginRequest;
import com.example.sales.dto.RegisterRequest;
import com.example.sales.exception.BusinessException;
import com.example.sales.exception.ResourceNotFoundException;
import com.example.sales.model.User;
import com.example.sales.repository.UserRepository;
import com.example.sales.security.JwtUtil;
import lombok.RequiredArgsConstructor;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import java.util.Date;
import java.util.UUID;

@Service
@RequiredArgsConstructor
public class AuthService {

    private final UserRepository userRepository;
    private final JwtUtil jwtUtil;
    private final PasswordEncoder passwordEncoder;
    private final AuthenticationManager authenticationManager;
    private final MailService mailService;
    private final TokenService tokenService;

    @Value("${app.frontend.verify-url}")
    private String verifyUrl;

    public void register(RegisterRequest request) {
        if (userRepository.findByEmailAndDeletedFalse(request.getEmail()).isPresent()) {
            throw new BusinessException(ApiCode.EMAIL_EXISTS);
        }

        User user = new User();
        user.setEmail(request.getEmail());
        user.setPassword(passwordEncoder.encode(request.getPassword()));

        String token = UUID.randomUUID().toString();
        user.setVerificationToken(token);
        user.setVerificationExpiry(new Date(System.currentTimeMillis() + 15 * 60 * 1000));
        user.setVerified(false);

        userRepository.save(user);

        String verifyLink = verifyUrl + "?token=" + token;
        String html = "<p>Xin chào,</p>" +
                "<p>Vui lòng xác thực tài khoản của bạn bằng cách nhấn vào liên kết bên dưới:</p>" +
                "<a href=\"" + verifyLink + "\">Xác thực tài khoản</a>" +
                "<p><i>Liên kết này sẽ hết hạn sau 15 phút.</i></p>";

        mailService.send(user.getEmail(), "Xác thực tài khoản - Sandro Sales", html);
    }


    public JwtResponse login(LoginRequest request) {
        // 1. Xác thực tài khoản và mật khẩu
        authenticationManager.authenticate(
                new UsernamePasswordAuthenticationToken(request.getEmail(), request.getPassword())
        );
        // 2. Lấy user từ DB
        User user = userRepository.findByEmailAndDeletedFalse(request.getEmail())
                .orElseThrow(() -> new ResourceNotFoundException(ApiCode.USER_NOT_FOUND));
        // 3. Kiểm tra đã xác thực chưa
        if (!user.isVerified()) {
            throw new BusinessException(ApiCode.EMAIL_NOT_VERIFIED);
        }
        String accessToken = jwtUtil.generateToken(user);
        String refreshToken = tokenService.createRefreshToken(user).getToken();
        return new JwtResponse(accessToken, refreshToken);
    }

    public void forgotPassword(String email) {
        User user = userRepository.findByEmailAndDeletedFalse(email)
                .orElseThrow(() -> new ResourceNotFoundException(ApiCode.USER_NOT_FOUND));

        String token = UUID.randomUUID().toString();
        user.setResetToken(token);
        user.setResetTokenExpiry(new Date(System.currentTimeMillis() + 15 * 60 * 1000)); // 15 phút
        userRepository.save(user);

        System.out.println("Gửi email tới " + email + ": Token đặt lại mật khẩu: " + token);
    }

    public void resendVerification(String email) {
        User user = userRepository.findByEmailAndDeletedFalse(email)
                .orElseThrow(() -> new ResourceNotFoundException(ApiCode.USER_NOT_FOUND));

        if (user.isVerified()) {
            throw new BusinessException(ApiCode.ALREADY_VERIFIED);
        }

        // Tạo token mới và cập nhật expiry
        String newToken = UUID.randomUUID().toString();
        user.setVerificationToken(newToken);
        user.setVerificationExpiry(new Date(System.currentTimeMillis() + 15 * 60 * 1000));

        userRepository.save(user);

        String verifyLink = verifyUrl + "?token=" + newToken;

        String html = "<p>Xin chào,</p>" +
                "<p>Bạn đã yêu cầu gửi lại email xác thực tài khoản.</p>" +
                "<p>Vui lòng xác thực tài khoản của bạn bằng cách nhấn vào liên kết bên dưới:</p>" +
                "<a href=\"" + verifyLink + "\">Xác thực tài khoản</a>" +
                "<p><i>Liên kết này sẽ hết hạn sau 15 phút.</i></p>";

        mailService.send(user.getEmail(), "Gửi lại xác thực tài khoản - Sandro Sales", html);
    }

    public void verifyEmail(String token) {
        User user = userRepository.findByVerificationTokenAndDeletedFalse(token)
                .orElseThrow(() -> new BusinessException(ApiCode.INVALID_TOKEN));

        if (user.isVerified()) {
            throw new BusinessException(ApiCode.ALREADY_VERIFIED);
        }

        if (user.getVerificationExpiry().before(new Date())) {
            throw new BusinessException(ApiCode.TOKEN_EXPIRED);
        }

        user.setVerified(true);
        user.setVerificationToken(null);
        user.setVerificationExpiry(null);
        userRepository.save(user);
    }

}

// File: src/main/java/com/example/sales/service/BranchService.java
package com.example.sales.service;

import com.example.sales.constant.ApiCode;
import com.example.sales.dto.branch.BranchRequest;
import com.example.sales.dto.branch.BranchResponse;
import com.example.sales.exception.ResourceNotFoundException;
import com.example.sales.model.Branch;
import com.example.sales.repository.BranchRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
@RequiredArgsConstructor
public class BranchService {

    private final BranchRepository branchRepository;
    private final AuditLogService auditLogService;

    public List<BranchResponse> getAll(String shopId) {
        return branchRepository.findByShopIdAndDeletedFalse(shopId)
                .stream()
                .map(this::toResponse)
                .toList();
    }

    public BranchResponse create(String shopId, BranchRequest req) {
        Branch branch = Branch.builder()
                .shopId(shopId)
                .name(req.getName())
                .address(req.getAddress())
                .phone(req.getPhone())
                .active(req.isActive())
                .build();

        Branch saved = branchRepository.save(branch);
        auditLogService.log(null, shopId, saved.getId(), "BRANCH", "CREATED",
                String.format("Tạo chi nhánh: %s - %s", saved.getName(), saved.getAddress()));
        return toResponse(saved);
    }

    public BranchResponse update(String shopId, String id, BranchRequest req) {
        Branch branch = branchRepository.findByIdAndDeletedFalse(id)
                .filter(b -> b.getShopId().equals(shopId))
                .orElseThrow(() -> new ResourceNotFoundException(ApiCode.BRANCH_NOT_FOUND));

        branch.setName(req.getName());
        branch.setAddress(req.getAddress());
        branch.setPhone(req.getPhone());
        branch.setActive(req.isActive());

        Branch saved = branchRepository.save(branch);
        auditLogService.log(null, shopId, saved.getId(), "BRANCH", "UPDATED",
                String.format("Cập nhật chi nhánh: %s - %s", saved.getName(), saved.getAddress()));
        return toResponse(saved);
    }

    public void delete(String shopId, String id) {
        Branch branch = branchRepository.findByIdAndDeletedFalse(id)
                .filter(b -> b.getShopId().equals(shopId))
                .orElseThrow(() -> new ResourceNotFoundException(ApiCode.BRANCH_NOT_FOUND));

        branch.setDeleted(true);
        branchRepository.save(branch);
        auditLogService.log(null, shopId, branch.getId(), "BRANCH", "DELETED",
                String.format("Xoá mềm chi nhánh: %s - %s", branch.getName(), branch.getAddress()));

    }

    private BranchResponse toResponse(Branch branch) {
        return BranchResponse.builder()
                .id(branch.getId())
                .name(branch.getName())
                .address(branch.getAddress())
                .phone(branch.getPhone())
                .active(branch.isActive())
                .createdAt(branch.getCreatedAt() != null ? branch.getCreatedAt().toString() : null)
                .build();
    }
}

// File: src/main/java/com/example/sales/service/CustomerService.java
package com.example.sales.service;

import com.example.sales.constant.ApiCode;
import com.example.sales.dto.customer.CustomerRequest;
import com.example.sales.dto.customer.CustomerResponse;
import com.example.sales.exception.BusinessException;
import com.example.sales.exception.ResourceNotFoundException;
import com.example.sales.model.Customer;
import com.example.sales.repository.CustomerRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
@RequiredArgsConstructor
public class CustomerService {

    private final CustomerRepository customerRepository;
    private final AuditLogService auditLogService;

    public List<CustomerResponse> getCustomers(String shopId, String branchId) {
        return customerRepository.findByShopIdAndBranchIdAndDeletedFalse(shopId, branchId)
                .stream()
                .map(this::toResponse)
                .toList();
    }

    public CustomerResponse createCustomer(String shopId, String userId, CustomerRequest request) {
        Customer customer = new Customer();
        customer.setShopId(shopId);
        customer.setUserId(userId);
        customer.setName(request.getName());
        customer.setPhone(request.getPhone());
        customer.setEmail(request.getEmail());
        customer.setAddress(request.getAddress());
        customer.setNote(request.getNote());
        customer.setBranchId(request.getBranchId());

        Customer saved = customerRepository.save(customer);
        auditLogService.log(userId, shopId, saved.getId(), "CUSTOMER", "CREATED",
                String.format("Tạo khách hàng: %s (%s)", saved.getName(), saved.getPhone()));
        return toResponse(saved);
    }

    public CustomerResponse updateCustomer(String shopId, String id, CustomerRequest request) {
        Customer existing = customerRepository.findByIdAndDeletedFalse(id)
                .filter(c -> c.getShopId().equals(shopId))
                .orElseThrow(() -> new ResourceNotFoundException(ApiCode.CUSTOMER_NOT_FOUND));

        if (!existing.getBranchId().equals(request.getBranchId())) {
            throw new BusinessException(ApiCode.UNAUTHORIZED);
        }

        existing.setName(request.getName());
        existing.setPhone(request.getPhone());
        existing.setEmail(request.getEmail());
        existing.setAddress(request.getAddress());
        existing.setNote(request.getNote());

        Customer saved = customerRepository.save(existing);
        auditLogService.log(null, shopId, saved.getId(), "CUSTOMER", "UPDATED",
                String.format("Cập nhật khách hàng: %s (%s)", saved.getName(), saved.getPhone()));
        return toResponse(saved);
    }

    public void deleteCustomer(String shopId, String branchId, String id) {
        Customer customer = customerRepository.findByIdAndDeletedFalse(id)
                .filter(c -> c.getShopId().equals(shopId))
                .orElseThrow(() -> new ResourceNotFoundException(ApiCode.CUSTOMER_NOT_FOUND));

        if (!customer.getBranchId().equals(branchId)) {
            throw new BusinessException(ApiCode.UNAUTHORIZED);
        }

        customer.setDeleted(true);
        customerRepository.save(customer);
        auditLogService.log(null, shopId, customer.getId(), "CUSTOMER", "DELETED",
                String.format("Xoá mềm khách hàng: %s (%s)", customer.getName(), customer.getPhone()));
    }

    private CustomerResponse toResponse(Customer c) {
        return CustomerResponse.builder()
                .id(c.getId())
                .name(c.getName())
                .phone(c.getPhone())
                .email(c.getEmail())
                .address(c.getAddress())
                .note(c.getNote())
                .build();
    }
}

// File: src/main/java/com/example/sales/service/ExcelExportService.java
package com.example.sales.service;

import com.example.sales.export.GenericExcelExporter;
import lombok.RequiredArgsConstructor;
import org.springframework.http.*;
import org.springframework.stereotype.Service;

import java.io.InputStream;
import java.util.List;
import java.util.function.Function;

@Service
@RequiredArgsConstructor
public class ExcelExportService {

    public <T> ResponseEntity<byte[]> exportExcel(String fileName,
                                                  String sheetName,
                                                  List<String> headers,
                                                  List<T> data,
                                                  Function<T, List<String>> rowMapper) {
        try {
            GenericExcelExporter<T> exporter = new GenericExcelExporter<>();
            InputStream excelStream = exporter.export(sheetName, headers, data, rowMapper);
            byte[] content = excelStream.readAllBytes();

            HttpHeaders responseHeaders = new HttpHeaders();
            responseHeaders.setContentType(MediaType.APPLICATION_OCTET_STREAM);
            responseHeaders.setContentDisposition(ContentDisposition.attachment().filename(fileName).build());

            return new ResponseEntity<>(content, responseHeaders, HttpStatus.OK);
        } catch (Exception e) {
            throw new RuntimeException("Không thể export file Excel", e);
        }
    }
}

// File: src/main/java/com/example/sales/service/FileUploadService.java
package com.example.sales.service;

import com.example.sales.constant.ApiCode;
import com.example.sales.exception.BusinessException;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import java.nio.file.Files;
import java.nio.file.Path;
import java.util.List;
import java.util.UUID;

@Slf4j
@Service
@RequiredArgsConstructor
public class FileUploadService {

    @Value("${app.upload.temp-dir:uploads/temp/}")
    private String tempDir;

    private static final long MAX_FILE_SIZE = 5 * 1024 * 1024; // 5MB
    private static final List<String> ALLOWED_MIME_TYPES = List.of(
            "image/jpeg",
            "image/png",
            "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    );

    public String upload(MultipartFile file) {
        try {
            log.info("Bắt đầu upload file: tên gốc = {}", file.getOriginalFilename());

            if (file.isEmpty()) {
                throw new BusinessException(ApiCode.VALIDATION_ERROR);
            }

            if (file.getSize() > MAX_FILE_SIZE) {
                throw new BusinessException(ApiCode.VALIDATION_FILE_ERROR);
            }

            String contentType = file.getContentType();
            if (!ALLOWED_MIME_TYPES.contains(contentType)) {
                throw new BusinessException(ApiCode.VALIDATION_FILE_ERROR);
            }

            // Tạo tên file ngẫu nhiên
            String filename = UUID.randomUUID() + "_" + sanitize(file.getOriginalFilename());

            // Đường dẫn thư mục uploads/temp/
            Path uploadPath = Path.of(tempDir).toAbsolutePath();
            Files.createDirectories(uploadPath);
            log.debug("Thư mục upload: {}", uploadPath);

            // Ghi file vào disk
            Path filePath = uploadPath.resolve(filename);
            file.transferTo(filePath);
            log.info("File đã được lưu tại: {}", filePath);

            // Trả về URL public
            return "/uploads/temp/" + filename;

        } catch (BusinessException e) {
            throw e;
        } catch (Exception e) {
            log.error("Lỗi khi upload file", e);
            throw new RuntimeException("Không thể upload file", e);
        }
    }

    // Dọn tên file cho an toàn
    private String sanitize(String original) {
        String sanitized = original.replaceAll("[^a-zA-Z0-9._-]", "_");
        log.debug("Sanitize tên file: {} -> {}", original, sanitized);
        return sanitized;
    }

    public String moveToProduct(String imageUrl) {
        try {
            log.info("Di chuyển file từ temp sang product: {}", imageUrl);

            // Chỉ xử lý nếu là ảnh trong uploads/temp
            if (imageUrl == null || !imageUrl.startsWith("/uploads/temp/")) {
                log.warn("Bỏ qua file không thuộc temp: {}", imageUrl);
                return imageUrl; // đã là ảnh final hoặc ảnh CDN thì bỏ qua
            }

            String filename = Path.of(imageUrl).getFileName().toString();

            Path tempPath = Path.of(tempDir).resolve(filename).toAbsolutePath();
            Path productDir = Path.of("uploads/product").toAbsolutePath();
            Files.createDirectories(productDir);
            Path targetPath = productDir.resolve(filename);

            if (Files.exists(tempPath)) {
                Files.move(tempPath, targetPath);
                log.info("Đã chuyển file: {} -> {}", tempPath, targetPath);
            } else {
                log.warn("File không tồn tại tại tempPath: {}", tempPath);
            }

            return "/uploads/product/" + filename;

        } catch (Exception e) {
            log.error("Lỗi khi di chuyển ảnh từ temp sang product", e);
            throw new RuntimeException("Không thể chuyển ảnh từ temp sang product", e);
        }
    }

}

// File: src/main/java/com/example/sales/service/MailService.java
package com.example.sales.service;

import jakarta.mail.MessagingException;
import lombok.RequiredArgsConstructor;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.mail.javamail.MimeMessageHelper;
import org.springframework.stereotype.Service;

import jakarta.mail.internet.MimeMessage;
import org.thymeleaf.TemplateEngine;
import org.thymeleaf.context.Context;

import java.util.Map;

@Service
@RequiredArgsConstructor
public class MailService {

    private final JavaMailSender mailSender;
    private final TemplateEngine templateEngine;

    @Value("${spring.mail.username}")
    private String from;

    public void send(String to, String subject, String htmlContent) {
        try {
            MimeMessage message = mailSender.createMimeMessage();
            MimeMessageHelper helper = new MimeMessageHelper(message, "utf-8");

            helper.setText(htmlContent, true); // true = html
            helper.setTo(to);
            helper.setSubject(subject);
            helper.setFrom(from);

            mailSender.send(message);
        } catch (MessagingException e) {
            throw new RuntimeException("Không gửi được email", e);
        }
    }

    public void sendHtmlTemplate(String to, String subject, String templateName, Map<String, Object> model) {
        try {
            Context context = new Context();
            context.setVariables(model);

            String htmlContent = templateEngine.process(templateName, context);

            MimeMessage message = mailSender.createMimeMessage();
            MimeMessageHelper helper = new MimeMessageHelper(message, "utf-8");

            helper.setTo(to);
            helper.setSubject(subject);
            helper.setFrom(from);
            helper.setText(htmlContent, true);

            mailSender.send(message);
        } catch (MessagingException e) {
            throw new RuntimeException("Không gửi được email", e);
        }
    }
}

// File: src/main/java/com/example/sales/service/OrderService.java
package com.example.sales.service;

import com.example.sales.constant.*;
import com.example.sales.dto.order.OrderItemResponse;
import com.example.sales.dto.order.OrderRequest;
import com.example.sales.dto.order.OrderResponse;
import com.example.sales.exception.BusinessException;
import com.example.sales.exception.ResourceNotFoundException;
import com.example.sales.model.*;
import com.example.sales.repository.*;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDateTime;
import java.util.List;

@Service
@RequiredArgsConstructor
public class OrderService {

    private final OrderRepository orderRepository;
    private final TableRepository tableRepository;
    private final ProductRepository productRepository;
    private final PromotionRepository promotionRepository;
    private final AuditLogService auditLogService;
    private final ShopRepository shopRepository;
    private final InventoryTransactionRepository inventoryTransactionRepository;

    public List<OrderResponse> getOrdersByUser(String userId, String shopId) {
        return orderRepository.findByShopIdAndDeletedFalse(shopId)
                .stream().map(this::toResponse).toList();
    }

    @Transactional
    public OrderResponse createOrder(String userId, String shopId, OrderRequest request) {
        Order order = new Order();
        order.setShopId(shopId);
        order.setTableId(request.getTableId());
        order.setUserId(userId);
        order.setNote(request.getNote());
        order.setStatus(OrderStatus.PENDING);
        order.setPaid(false);

        String branchId = request.getBranchId();
        if (branchId != null && !branchId.isBlank()) {
            order.setBranchId(branchId);
        }

        double[] totals = {0, 0};

        List<OrderItem> orderItems = request.getItems().stream().map(reqItem -> {
            Product product = productRepository.findById(reqItem.getProductId())
                    .filter(p -> p.getShopId().equals(shopId))
                    .orElseThrow(() -> new ResourceNotFoundException(ApiCode.PRODUCT_NOT_FOUND));

            double basePrice = reqItem.getPrice();
            double finalPrice = basePrice;
            String promoId = null;

            Promotion promo = findApplicablePromotion(shopId, branchId, product.getId());
            if (promo != null) {
                promoId = promo.getId();
                if (promo.getDiscountType() == DiscountType.PERCENT) {
                    finalPrice = basePrice * (1 - promo.getDiscountValue() / 100.0);
                } else if (promo.getDiscountType() == DiscountType.AMOUNT) {
                    finalPrice = Math.max(0, basePrice - promo.getDiscountValue());
                }
            }

            OrderItem item = new OrderItem();
            item.setProductId(product.getId());
            item.setProductName(product.getName());
            item.setQuantity(reqItem.getQuantity());
            item.setPrice(basePrice);
            item.setPriceAfterDiscount(finalPrice);
            item.setAppliedPromotionId(promoId);

            totals[0] += reqItem.getQuantity();
            totals[1] += reqItem.getQuantity() * finalPrice;

            return item;
        }).toList();

        order.setItems(orderItems);
        order.setTotalAmount(totals[0]);
        order.setTotalPrice(totals[1]);

        Order created = orderRepository.save(order);
        Shop shop = shopRepository.findByIdAndDeletedFalse(shopId)
                .orElseThrow(() -> new ResourceNotFoundException(ApiCode.SHOP_NOT_FOUND));

        if (shop.getType().isTrackInventory()) {
            for (OrderItem item : created.getItems()) {
                Product product = productRepository.findByIdAndDeletedFalse(item.getProductId())
                        .orElseThrow(() -> new ResourceNotFoundException(ApiCode.PRODUCT_NOT_FOUND));

                adjustInventory(product, shopId, created.getBranchId(), InventoryType.EXPORT, item.getQuantity(),
                        "Xuất kho theo đơn hàng " + created.getId(), created.getId());
            }
        }
        releaseTable(created);
        return toResponse(created);
    }

    public void cancelOrder(String userId, String shopId, String orderId) {
        Order order = getOrderByShop(orderId, shopId);

        if (order.isPaid()) {
            throw new BusinessException(ApiCode.ORDER_ALREADY_PAID);
        }

        order.setStatus(OrderStatus.CANCELLED);
        orderRepository.save(order);
        auditLogService.log(userId, shopId, order.getId(), "ORDER", "CANCELLED", "Huỷ đơn hàng");
    }

    public OrderResponse confirmPayment(String userId, String shopId, String orderId, String paymentId, String paymentMethod) {
        Order order = getOrderByShop(orderId, shopId);

        if (order.isPaid()) {
            throw new BusinessException(ApiCode.ORDER_ALREADY_PAID);
        }

        order.setPaid(true);
        order.setPaymentId(paymentId);
        order.setPaymentMethod(paymentMethod);
        order.setPaymentTime(LocalDateTime.now());
        order.setStatus(OrderStatus.COMPLETED);

        Order updated = orderRepository.save(order);
        releaseTable(updated);
        auditLogService.log(userId, shopId, order.getId(), "ORDER", "PAYMENT_CONFIRMED",
                "Xác nhận thanh toán đơn hàng với ID: %s".formatted(orderId));
        return toResponse(updated);
    }

    public OrderResponse updateStatus(String userId, String shopId, String orderId, OrderStatus newStatus) {
        Order order = getOrderByShop(orderId, shopId);

        if (order.getStatus() == OrderStatus.CANCELLED) {
            throw new BusinessException(ApiCode.ORDER_ALREADY_PAID);
        }

        OrderStatus oldStatus = order.getStatus();
        order.setStatus(newStatus);

        if (newStatus == OrderStatus.COMPLETED && !order.isPaid()) {
            order.setPaid(true);
            order.setPaymentTime(LocalDateTime.now());
            order.setPaymentMethod("Cash");
        }

        Order updated = orderRepository.save(order);
        if (!oldStatus.equals(newStatus)) {
            auditLogService.log(userId, shopId, order.getId(), "ORDER", "STATUS_UPDATED",
                    "Cập nhật trạng thái từ %s → %s".formatted(oldStatus, newStatus));
        }

        return toResponse(updated);
    }

    public List<OrderResponse> getOrdersByStatus(String userId, String shopId, OrderStatus status, String branchId) {
        return orderRepository.findByShopIdAndBranchIdAndStatusAndDeletedFalse(shopId, branchId, status)
                .stream().map(this::toResponse).toList();
    }

    private Order getOrderByShop(String orderId, String shopId) {
        return orderRepository.findByIdAndDeletedFalse(orderId)
                .filter(o -> o.getShopId().equals(shopId))
                .orElseThrow(() -> new ResourceNotFoundException(ApiCode.ORDER_NOT_FOUND));
    }

    private void releaseTable(Order order) {
        if (order.getTableId() != null) {
            tableRepository.findById(order.getTableId()).ifPresent(table -> {
                table.setStatus(TableStatus.AVAILABLE);
                table.setCurrentOrderId(null);
                tableRepository.save(table);
            });
        }
    }

    private Promotion findApplicablePromotion(String shopId, String branchId, String productId) {
        LocalDateTime now = LocalDateTime.now();
        return promotionRepository.findByShopIdAndDeletedFalse(shopId).stream()
                .filter(Promotion::isActive)
                .filter(p -> p.getBranchId() == null || p.getBranchId().equals(branchId))
                .filter(p -> !p.getStartDate().isAfter(now) && !p.getEndDate().isBefore(now))
                .filter(p -> p.getApplicableProductIds() == null
                        || p.getApplicableProductIds().isEmpty()
                        || p.getApplicableProductIds().contains(productId))
                .findFirst()
                .orElse(null);
    }

    private void adjustInventory(Product product, String shopId, String branchId, InventoryType type, int qty,
                                 String note, String referenceId) {

        int change = switch (type) {
            case EXPORT -> -qty;
            case IMPORT, ADJUSTMENT -> qty;
        };

        int newQty = product.getQuantity() + change;
        if (newQty < 0) {
            throw new BusinessException(ApiCode.PRODUCT_OUT_OF_STOCK);
        }

        product.setQuantity(newQty);
        productRepository.save(product);

        InventoryTransaction tx = InventoryTransaction.builder()
                .shopId(shopId)
                .branchId(branchId)
                .productId(product.getId())
                .type(type)
                .quantity(change)
                .note(note)
                .referenceId(referenceId)
                .build();

        inventoryTransactionRepository.save(tx);
    }

    private OrderResponse toResponse(Order order) {
        return OrderResponse.builder()
                .id(order.getId())
                .tableId(order.getTableId())
                .note(order.getNote())
                .status(order.getStatus())
                .paid(order.isPaid())
                .paymentMethod(order.getPaymentMethod())
                .paymentId(order.getPaymentId())
                .paymentTime(order.getPaymentTime())
                .totalAmount(order.getTotalAmount())
                .totalPrice(order.getTotalPrice())
                .items(order.getItems().stream().map(this::toItemResponse).toList())
                .build();
    }

    private OrderItemResponse toItemResponse(OrderItem item) {
        return OrderItemResponse.builder()
                .productId(item.getProductId())
                .productName(item.getProductName())
                .quantity(item.getQuantity())
                .price(item.getPrice())
                .priceAfterDiscount(item.getPriceAfterDiscount())
                .appliedPromotionId(item.getAppliedPromotionId())
                .build();
    }
}

// File: src/main/java/com/example/sales/service/ProductImportService.java
package com.example.sales.service;

import com.example.sales.dto.product.ProductRequest;
import lombok.RequiredArgsConstructor;
import org.apache.poi.ss.usermodel.*;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import java.io.InputStream;
import java.util.*;

@Service
@RequiredArgsConstructor
public class ProductImportService {

    private final ProductService productService;
    private final AuditLogService auditLogService;

    public Map<String, Object> importExcel(String shopId, String branchId, MultipartFile file) {
        int successCount = 0;
        int failCount = 0;
        List<String> errors = new ArrayList<>();

        try (InputStream inputStream = file.getInputStream();
             Workbook workbook = WorkbookFactory.create(inputStream)) {

            Sheet sheet = workbook.getSheetAt(0);
            int rows = sheet.getPhysicalNumberOfRows();

            for (int i = 1; i < rows; i++) {
                Row row = sheet.getRow(i);
                try {
                    ProductRequest req = parseRow(row);
                    req.setBranchId(branchId);
                    var product = productService.createProduct(shopId, req);
                    auditLogService.log(null, shopId, product.getId(), "PRODUCT", "IMPORTED",
                            String.format("Nhập sản phẩm từ Excel: %s (Mã: %s)", product.getName(), product.getProductCode()));
                    successCount++;
                } catch (Exception ex) {
                    failCount++;
                    errors.add("Dòng " + (i + 1) + ": " + ex.getMessage());
                }
            }

        } catch (Exception e) {
            throw new RuntimeException("Không thể đọc file Excel", e);
        }

        return Map.of(
                "success", successCount,
                "failed", failCount,
                "errors", errors
        );
    }

    private ProductRequest parseRow(Row row) {
        ProductRequest req = new ProductRequest();
        req.setName(getString(row, 0));
        req.setProductCode(getString(row, 1));
        req.setCategory(getString(row, 2));
        req.setQuantity(getInt(row, 3));
        req.setPrice(getDouble(row, 4));
        req.setUnit(getString(row, 5));
        req.setImageUrl(getString(row, 6));
        req.setDescription(getString(row, 7));

        String status = getString(row, 8).toLowerCase();
        req.setActive(!status.contains("ngưng"));

        return req;
    }

    private String getString(Row row, int i) {
        Cell cell = row.getCell(i, Row.MissingCellPolicy.CREATE_NULL_AS_BLANK);
        return cell.toString().trim();
    }

    private int getInt(Row row, int i) {
        try {
            return (int) Double.parseDouble(getString(row, i));
        } catch (Exception e) {
            return 0;
        }
    }

    private double getDouble(Row row, int i) {
        try {
            return Double.parseDouble(getString(row, i));
        } catch (Exception e) {
            return 0;
        }
    }
}

// File: src/main/java/com/example/sales/service/ProductService.java
package com.example.sales.service;

import com.example.sales.dto.product.ProductRequest;
import com.example.sales.dto.product.ProductResponse;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import java.util.List;

/**
 * Service interface for managing product-related operations.
 */
public interface ProductService {

    /**
     * Creates a new product for a specific shop.
     *
     * @param shopId  the ID of the shop
     * @param request the product details
     * @return the created product's response
     */
    ProductResponse createProduct(String shopId, ProductRequest request);

    /**
     * Updates an existing product.
     *
     * @param userId  the ID of the user performing the update
     * @param shopId  the ID of the shop
     * @param id      the ID of the product to update
     * @param request the updated product details
     * @return the updated product's response
     */
    ProductResponse updateProduct(String userId, String shopId, String id, ProductRequest request);

    /**
     * Soft deletes a product from the specified shop.
     *
     * @param shopId the ID of the shop
     * @param id     the ID of the product to delete
     */
    void deleteProduct(String shopId, String id);

    /**
     * Retrieves details of a specific product.
     *
     * @param shopId the ID of the shop
     * @param id     the ID of the product
     * @return the product's response
     */
    ProductResponse getProduct(String shopId, String id);

    /**
     * Retrieves a paginated list of products for a shop.
     *
     * @param shopId   the ID of the shop
     * @param pageable the pagination information
     * @return a paginated list of product responses
     */
    Page<ProductResponse> getAllByShop(String shopId, Pageable pageable);

    /**
     * Toggles the active status of a product.
     *
     * @param shopId    the ID of the shop
     * @param productId the ID of the product
     * @return the updated product's response
     */
    ProductResponse toggleActive(String shopId, String productId);

    /**
     * Retrieves a list of products with low stock levels.
     *
     * @param shopId   the ID of the shop
     * @param threshold the low stock threshold
     * @return a list of products with low stock
     */
    List<ProductResponse> getLowStockProducts(String shopId, int threshold);
}

// File: src/main/java/com/example/sales/service/PromotionService.java
package com.example.sales.service;

import com.example.sales.constant.ApiCode;
import com.example.sales.dto.promotion.PromotionRequest;
import com.example.sales.dto.promotion.PromotionResponse;
import com.example.sales.exception.BusinessException;
import com.example.sales.exception.ResourceNotFoundException;
import com.example.sales.model.Promotion;
import com.example.sales.repository.PromotionRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
@RequiredArgsConstructor
public class PromotionService {

    private final PromotionRepository promotionRepository;
    private final AuditLogService auditLogService;

    public List<PromotionResponse> getAll(String shopId, String branchId) {
        return promotionRepository.findByShopIdAndBranchIdAndDeletedFalse(shopId, branchId)
                .stream()
                .map(this::toResponse)
                .toList();
    }

    public PromotionResponse create(String shopId, PromotionRequest request) {
        Promotion promotion = Promotion.builder()
                .shopId(shopId)
                .name(request.getName())
                .discountType(request.getDiscountType())
                .discountValue(request.getDiscountValue())
                .applicableProductIds(request.getApplicableProductIds())
                .startDate(request.getStartDate())
                .endDate(request.getEndDate())
                .active(request.isActive())
                .branchId(request.getBranchId())
                .build();

        Promotion saved = promotionRepository.save(promotion);
        auditLogService.log(null, shopId, saved.getId(), "PROMOTION", "CREATED",
                String.format("Tạo khuyến mãi: %s (%.2f %s)",
                        saved.getName(),
                        saved.getDiscountValue(),
                        saved.getDiscountType()));
        return toResponse(saved);
    }

    public PromotionResponse update(String shopId, String id, PromotionRequest request) {
        Promotion promotion = promotionRepository.findByIdAndDeletedFalse(id)
                .filter(p -> p.getShopId().equals(shopId))
                .orElseThrow(() -> new ResourceNotFoundException(ApiCode.PROMOTION_NOT_FOUND));

        if (!promotion.getBranchId().equals(request.getBranchId())) {
            throw new BusinessException(ApiCode.UNAUTHORIZED);
        }

        promotion.setName(request.getName());
        promotion.setDiscountType(request.getDiscountType());
        promotion.setDiscountValue(request.getDiscountValue());
        promotion.setApplicableProductIds(request.getApplicableProductIds());
        promotion.setStartDate(request.getStartDate());
        promotion.setEndDate(request.getEndDate());
        promotion.setActive(request.isActive());

        Promotion saved = promotionRepository.save(promotion);
        auditLogService.log(null, shopId, saved.getId(), "PROMOTION", "UPDATED",
                String.format("Cập nhật khuyến mãi: %s", saved.getName()));
        return toResponse(saved);
    }

    public void delete(String shopId, String id) {
        Promotion promotion = promotionRepository.findByIdAndDeletedFalse(id)
                .filter(p -> p.getShopId().equals(shopId))
                .orElseThrow(() -> new ResourceNotFoundException(ApiCode.PROMOTION_NOT_FOUND));

        promotion.setDeleted(true);
        promotionRepository.save(promotion);
        auditLogService.log(null, shopId, promotion.getId(), "PROMOTION", "DELETED",
                String.format("Xoá mềm khuyến mãi: %s", promotion.getName()));

    }

    private PromotionResponse toResponse(Promotion p) {
        return PromotionResponse.builder()
                .id(p.getId())
                .name(p.getName())
                .discountType(p.getDiscountType())
                .discountValue(p.getDiscountValue())
                .applicableProductIds(p.getApplicableProductIds())
                .startDate(p.getStartDate())
                .endDate(p.getEndDate())
                .active(p.isActive())
                .build();
    }
}

// File: src/main/java/com/example/sales/service/ReportService.java
package com.example.sales.service;

import com.example.sales.dto.report.DailyReportResponse;
import com.example.sales.dto.report.ReportRequest;
import com.example.sales.dto.report.ReportResponse;
import com.example.sales.model.Order;
import lombok.RequiredArgsConstructor;
import org.springframework.data.domain.Sort;
import org.springframework.data.mongodb.core.MongoTemplate;
import org.springframework.data.mongodb.core.aggregation.Aggregation;
import org.springframework.data.mongodb.core.aggregation.AggregationResults;
import org.springframework.data.mongodb.core.aggregation.MatchOperation;
import org.springframework.data.mongodb.core.aggregation.ProjectionOperation;
import org.springframework.data.mongodb.core.query.Criteria;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.List;

import static org.springframework.data.mongodb.core.aggregation.Aggregation.*;

@Service
@RequiredArgsConstructor
public class ReportService {

    private final MongoTemplate mongoTemplate;
    private final ExcelExportService excelExportService;

    public ReportResponse getReport(String shopId, ReportRequest request) {
        MatchOperation match = buildMatchOperation(shopId, request);

        Aggregation aggregation = newAggregation(
                match,
                unwind("items"),
                group()
                        .count().as("totalOrders")
                        .sum("items.quantity").as("totalProductsSold")
                        .sum("totalPrice").as("totalRevenue")
        );

        AggregationResults<ReportResponse> results =
                mongoTemplate.aggregate(aggregation, Order.class, ReportResponse.class);

        ReportResponse response = results.getUniqueMappedResult();

        return response != null ? response : ReportResponse.builder()
                .totalOrders(0)
                .totalProductsSold(0)
                .totalRevenue(0)
                .build();
    }

    public List<DailyReportResponse> getDailyReport(String shopId, ReportRequest request) {
        MatchOperation match = buildMatchOperation(shopId, request);

        ProjectionOperation projectDate = project()
                .andExpression("year(createdAt)").as("year")
                .andExpression("month(createdAt)").as("month")
                .andExpression("dayOfMonth(createdAt)").as("day")
                .and("totalPrice").as("totalPrice")
                .and("items").as("items");

        Aggregation aggregation = newAggregation(
                match,
                projectDate,
                unwind("items"),
                group("year", "month", "day")
                        .count().as("totalOrders")
                        .sum("items.quantity").as("totalProductsSold")
                        .sum("totalPrice").as("totalRevenue"),
                project()
                        .andExpression("dateFromParts(year: _id.year, month: _id.month, day: _id.day)").as("date")
                        .andInclude("totalOrders", "totalProductsSold", "totalRevenue"),
                sort(Sort.Direction.ASC, "date")
        );

        AggregationResults<DailyReportResponse> results =
                mongoTemplate.aggregate(aggregation, Order.class, DailyReportResponse.class);

        return results.getMappedResults();
    }

    public ResponseEntity<byte[]> exportDailyReportExcel(String shopId,
                                                         @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate startDate,
                                                         @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate endDate) {

        ReportRequest request = new ReportRequest();
        request.setStartDate(startDate);
        request.setEndDate(endDate);

        List<DailyReportResponse> data = getDailyReport(shopId, request);

        DateTimeFormatter df = DateTimeFormatter.ofPattern("dd/MM/yyyy");

        return excelExportService.exportExcel(
                "daily-report.xlsx",
                "Báo cáo theo ngày",
                List.of("Ngày", "Tổng đơn", "Tổng sản phẩm", "Tổng doanh thu"),
                data,
                r -> List.of(
                        r.getDate().format(df),
                        String.valueOf(r.getTotalOrders()),
                        String.valueOf(r.getTotalProductsSold()),
                        String.valueOf(r.getTotalRevenue())
                )
        );
    }

    private MatchOperation buildMatchOperation(String shopId, ReportRequest request) {
        Criteria criteria = Criteria.where("shopId").is(shopId);

        if (request.getStatus() != null) {
            criteria = criteria.and("status").is(request.getStatus());
        }

        if (request.getStartDate() != null && request.getEndDate() != null) {
            LocalDateTime start = request.getStartDate().atStartOfDay();
            LocalDateTime end = request.getEndDate().atTime(LocalTime.MAX);
            criteria = criteria.and("createdAt").gte(start).lte(end);
        }

        return match(criteria);
    }
}

// File: src/main/java/com/example/sales/service/ShopService.java
package com.example.sales.service;

import com.example.sales.constant.ApiCode;
import com.example.sales.constant.ShopRole;
import com.example.sales.constant.UserRole;
import com.example.sales.dto.shop.ShopAdminResponse;
import com.example.sales.dto.shop.ShopRequest;
import com.example.sales.dto.shop.ShopResponse;
import com.example.sales.exception.BusinessException;
import com.example.sales.model.Shop;
import com.example.sales.model.ShopUser;
import com.example.sales.repository.ShopRepository;
import com.example.sales.repository.ShopUserRepository;
import com.example.sales.security.CustomUserDetails;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

@Service
@RequiredArgsConstructor
public class ShopService {

    private final ShopRepository shopRepository;
    private final AuditLogService auditLogService;
    private final ShopUserRepository shopUserRepository;

    public Shop createShop(String userId, ShopRequest request, String logoUrl) {
        if (shopRepository.findByOwnerIdAndDeletedFalse(userId).isPresent()) {
            throw new BusinessException(ApiCode.SHOP_ALREADY_EXISTS);
        }

        Shop shop = new Shop();
        shop.setName(request.getName());
        shop.setType(request.getType());
        shop.setAddress(request.getAddress());
        shop.setPhone(request.getPhone());
        shop.setLogoUrl(logoUrl);
        shop.setOwnerId(userId);

        Shop saved = shopRepository.save(shop);
        ShopUser shopUser = ShopUser.builder()
                .shopId(shop.getId())
                .userId(userId)
                .role(ShopRole.OWNER)
                .build();
        shopUserRepository.save(shopUser);

        auditLogService.log(userId, saved.getId(), saved.getId(), "SHOP", "CREATED",
                String.format("Tạo cửa hàng: %s (%s)", saved.getName(), saved.getType()));

        return saved;
    }

    public Shop getShopByOwner(String ownerId) {
        return shopRepository.findByOwnerIdAndDeletedFalse(ownerId)
                .orElseThrow(() -> new BusinessException(ApiCode.SHOP_NOT_FOUND));
    }

    public Shop updateShop(String ownerId, ShopRequest request) {
        Shop shop = getShopByOwner(ownerId);

        shop.setName(request.getName());
        shop.setType(request.getType());
        shop.setAddress(request.getAddress());
        shop.setPhone(request.getPhone());

        Shop saved = shopRepository.save(shop);
        auditLogService.log(null, saved.getId(), saved.getId(), "SHOP", "UPDATED",
                String.format("Cập nhật cửa hàng: %s (%s)", saved.getName(), saved.getType()));
        return saved;
    }

    public String getShopIdByOwner(String ownerId) {
        return shopRepository.findByOwnerIdAndDeletedFalse(ownerId)
                .orElseThrow(() -> new BusinessException(ApiCode.SHOP_NOT_FOUND))
                .getId();
    }

    public void deleteShop(String ownerId) {
        Shop shop = getShopByOwner(ownerId);
        shop.setDeleted(true);
        shopRepository.save(shop);
        auditLogService.log(null, shop.getId(), shop.getId(), "SHOP", "DELETED",
                String.format("Xoá mềm cửa hàng: %s", shop.getName()));
    }

    public Shop getShopById(String shopId) {
        return shopRepository.findByIdAndDeletedFalse(shopId)
                .orElseThrow(() -> new BusinessException(ApiCode.SHOP_NOT_FOUND));
    }

    public Shop save(Shop shop) {
        return shopRepository.save(shop);
    }

    public Object getShopResponse(CustomUserDetails user, Shop shop) {
        if (user.getRole() == UserRole.ROLE_ADMIN) {
            return ShopAdminResponse.builder()
                    .id(shop.getId())
                    .name(shop.getName())
                    .type(shop.getType())
                    .address(shop.getAddress())
                    .phone(shop.getPhone())
                    .logoUrl(shop.getLogoUrl())
                    .active(shop.isActive())
                    .plan(shop.getPlan())
                    .currency(shop.getCurrency())
                    .timezone(shop.getTimezone())
                    .orderPrefix(shop.getOrderPrefix())
                    .planExpiry(shop.getPlanExpiry())
                    .build();
        } else {
            return ShopResponse.builder()
                    .id(shop.getId())
                    .name(shop.getName())
                    .type(shop.getType())
                    .address(shop.getAddress())
                    .phone(shop.getPhone())
                    .logoUrl(shop.getLogoUrl())
                    .active(shop.isActive())
                    .plan(shop.getPlan())
                    .currency(shop.getCurrency())
                    .build();
        }
    }
}

// File: src/main/java/com/example/sales/service/ShopUserService.java
package com.example.sales.service;

import com.example.sales.constant.ApiCode;
import com.example.sales.constant.ShopRole;
import com.example.sales.dto.shop.ShopSimpleResponse;
import com.example.sales.exception.BusinessException;
import com.example.sales.model.Shop;
import com.example.sales.model.ShopUser;
import com.example.sales.repository.ShopRepository;
import com.example.sales.repository.ShopUserRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.util.Arrays;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

@Service
@RequiredArgsConstructor
public class ShopUserService {

    private final ShopUserRepository shopUserRepository;
    private final ShopRepository shopRepository;

    public ShopRole getUserRoleInShop(String shopId, String userId) {
        return shopUserRepository.findByShopIdAndUserIdAndDeletedFalse(shopId, userId)
                .map(ShopUser::getRole)
                .orElseThrow(() -> new BusinessException(ApiCode.UNAUTHORIZED));
    }

    public boolean isOwner(String shopId, String userId) {
        return shopUserRepository.findByShopIdAndUserIdAndDeletedFalse(shopId, userId)
                .map(shopUser -> shopUser.getRole() == ShopRole.OWNER)
                .orElse(false);
    }

    public boolean isStaff(String shopId, String userId) {
        return shopUserRepository.findByShopIdAndUserIdAndDeletedFalse(shopId, userId)
                .map(shopUser -> shopUser.getRole() == ShopRole.STAFF)
                .orElse(false);
    }

    public boolean isOwnerOrStaff(String shopId, String userId) {
        return shopUserRepository.findByShopIdAndUserIdAndDeletedFalse(shopId, userId)
                .map(shopUser -> {
                    ShopRole role = shopUser.getRole();
                    return role == ShopRole.OWNER || role == ShopRole.STAFF;
                })
                .orElse(false);
    }

    public void requireAnyRole(String shopId, String userId, ShopRole... roles) {
        ShopRole actual = getUserRoleInShop(shopId, userId);
        if (Arrays.stream(roles).noneMatch(role -> role == actual)) {
            throw new BusinessException(ApiCode.UNAUTHORIZED);
        }
    }

    public void requireOwner(String shopId, String userId) {
        if (!isOwner(shopId, userId)) {
            throw new BusinessException(ApiCode.UNAUTHORIZED);
        }
    }

    public void addUser(String shopId, String userId, ShopRole role) {
        Optional<ShopUser> existing = shopUserRepository.findByShopIdAndUserIdAndDeletedFalse(shopId, userId);
        if (existing.isPresent()) {
            throw new BusinessException(ApiCode.DUPLICATE_DATA);
        }

        ShopUser shopUser = ShopUser.builder()
                .shopId(shopId)
                .userId(userId)
                .role(role)
                .build();

        shopUserRepository.save(shopUser);
    }

    public void removeUser(String shopId, String userId) {
        ShopUser user = shopUserRepository.findByShopIdAndUserIdAndDeletedFalse(shopId, userId)
                .orElseThrow(() -> new BusinessException(ApiCode.NOT_FOUND));
        shopUserRepository.delete(user);
    }

    public List<ShopSimpleResponse> getShopsForUser(String userId) {
        List<ShopUser> shopUsers = shopUserRepository.findByUserIdAndDeletedFalse(userId);

        return shopUsers.stream()
                .map(su -> {
                    Shop shop = shopRepository.findByIdAndDeletedFalse(su.getShopId())
                            .orElse(null);
                    if (shop == null) return null;

                    return ShopSimpleResponse.builder()
                            .id(shop.getId())
                            .name(shop.getName())
                            .type(shop.getType())
                            .logoUrl(shop.getLogoUrl())
                            .active(shop.isActive())
                            .role(su.getRole()) // 👈 gán vai trò
                            .build();
                })
                .filter(Objects::nonNull)
                .toList();
    }
}

// File: src/main/java/com/example/sales/service/TableService.java
package com.example.sales.service;

import com.example.sales.constant.ApiCode;
import com.example.sales.constant.TableStatus;
import com.example.sales.dto.TableRequest;
import com.example.sales.dto.TableResponse;
import com.example.sales.exception.BusinessException;
import com.example.sales.model.Shop;
import com.example.sales.model.Table;
import com.example.sales.repository.ShopRepository;
import com.example.sales.repository.TableRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Optional;

@Service
@RequiredArgsConstructor
public class TableService {

    private final TableRepository tableRepository;
    private final ShopRepository shopRepository;
    private final AuditLogService auditLogService;

    public TableResponse create(TableRequest request) {
        String shopId = request.getShopId();
        String branchId = request.getBranchId();

        Shop shop = shopRepository.findByIdAndDeletedFalse(shopId)
                .orElseThrow(() -> new BusinessException(ApiCode.SHOP_NOT_FOUND));

        Table table = Table.builder()
                .name(request.getName())
                .shopId(shopId)
                .branchId(branchId)
                .status(Optional.ofNullable(request.getStatus()).orElse(TableStatus.AVAILABLE))
                .capacity(request.getCapacity())
                .note(request.getNote())
                .build();

        Table saved = tableRepository.save(table);
        auditLogService.log(null, shopId, saved.getId(), "TABLE", "CREATED",
                String.format("Tạo bàn: %s (Chi nhánh: %s)", saved.getName(), saved.getBranchId()));
        return toResponse(saved, shop);
    }

    public List<TableResponse> getByShop(String shopId, String branchId) {
        Shop shop = shopRepository.findByIdAndDeletedFalse(shopId)
                .orElseThrow(() -> new BusinessException(ApiCode.SHOP_NOT_FOUND));

        return tableRepository.findByShopIdAndBranchIdAndDeletedFalse(shopId, branchId)
                .stream()
                .map(table -> toResponse(table, shop))
                .toList();
    }

    public TableResponse updateStatus(String tableId, TableStatus status) {
        Table table = tableRepository.findByIdAndDeletedFalse(tableId)
                .orElseThrow(() -> new BusinessException(ApiCode.TABLE_NOT_FOUND));

        table.setStatus(status);
        Table saved = tableRepository.save(table);
        auditLogService.log(null, table.getShopId(), saved.getId(), "TABLE", "STATUS_UPDATED",
                String.format("Cập nhật trạng thái bàn: %s → %s", table.getName(), status));
        return toResponse(saved);
    }

    private TableResponse toResponse(Table table) {
        Shop shop = shopRepository.findByIdAndDeletedFalse(table.getShopId()).orElse(null);

        return TableResponse.builder()
                .id(table.getId())
                .name(table.getName())
                .status(table.getStatus())
                .shopId(table.getShopId())
                .branchId(table.getBranchId())
                .shopName(shop != null ? shop.getName() : null)
                .capacity(table.getCapacity())
                .note(table.getNote())
                .currentOrderId(table.getCurrentOrderId())
                .build();
    }

    private TableResponse toResponse(Table table, Shop shop) {
        return TableResponse.builder()
                .id(table.getId())
                .name(table.getName())
                .status(table.getStatus())
                .shopId(shop.getId())
                .branchId(table.getBranchId())
                .shopName(shop.getName())
                .capacity(table.getCapacity())
                .note(table.getNote())
                .currentOrderId(table.getCurrentOrderId())
                .build();
    }
}

// File: src/main/java/com/example/sales/service/TokenService.java
package com.example.sales.service;

import com.example.sales.constant.ApiCode;
import com.example.sales.exception.BusinessException;
import com.example.sales.model.RefreshToken;
import com.example.sales.model.User;
import com.example.sales.repository.RefreshTokenRepository;
import com.example.sales.repository.UserRepository;
import com.example.sales.security.JwtUtil;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.util.Date;
import java.util.UUID;

@Service
@RequiredArgsConstructor
public class TokenService {

    private final RefreshTokenRepository refreshTokenRepository;
    private final UserRepository userRepository;
    private final JwtUtil jwtUtil;

    public RefreshToken createRefreshToken(User user) {
        RefreshToken token = new RefreshToken();
        token.setToken(UUID.randomUUID().toString());
        token.setUserId(user.getId());
        token.setExpiryDate(new Date(System.currentTimeMillis() + 7 * 24 * 60 * 60 * 1000)); // 7 ngày

        return refreshTokenRepository.save(token);
    }

    public String refreshAccessToken(String refreshTokenValue) {
        RefreshToken token = refreshTokenRepository.findByToken(refreshTokenValue)
                .orElseThrow(() -> new BusinessException(ApiCode.REFRESH_TOKEN_INVALID));

        if (token.getExpiryDate().before(new Date())) {
            refreshTokenRepository.delete(token);
            throw new BusinessException(ApiCode.REFRESH_TOKEN_EXPIRED);
        }

        User user = userRepository.findByIdAndDeletedFalse(token.getUserId())
                .orElseThrow(() -> new BusinessException(ApiCode.USER_NOT_FOUND));

        return jwtUtil.generateToken(user);
    }

    public void revokeToken(String refreshToken) {
        refreshTokenRepository.findByToken(refreshToken)
                .ifPresent(refreshTokenRepository::delete);
    }
}

// File: src/main/java/com/example/sales/service/UserService.java
package com.example.sales.service;

import com.example.sales.constant.ApiCode;
import com.example.sales.exception.BusinessException;
import com.example.sales.model.User;
import com.example.sales.repository.UserRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

@Service
@RequiredArgsConstructor
public class UserService {

    private final UserRepository userRepository;
    private final PasswordEncoder passwordEncoder;

    public User getCurrentUser(String userId) {
        return userRepository.findById(userId)
                .orElseThrow(() -> new BusinessException(ApiCode.USER_NOT_FOUND));
    }

    public User updateProfile(String userId, String fullName, String phone, String businessType) {
        User user = userRepository.findById(userId)
                .orElseThrow(() -> new BusinessException(ApiCode.USER_NOT_FOUND));
        user.setFullName(fullName);
        user.setPhone(phone);
        user.setBusinessType(businessType);
        return userRepository.save(user);
    }

    public void changePassword(String userId, String currentPassword, String newPassword) {
        User user = userRepository.findById(userId)
                .orElseThrow(() -> new BusinessException(ApiCode.USER_NOT_FOUND));
        if (!passwordEncoder.matches(currentPassword, user.getPassword())) {
            throw new BusinessException(ApiCode.INCORRECT_PASSWORD);
        }
        user.setPassword(passwordEncoder.encode(newPassword));
        userRepository.save(user);
    }
}

// File: src/main/java/com/example/sales/SalesApplication.java
package com.example.sales;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.data.mongodb.config.EnableMongoAuditing;
import org.springframework.scheduling.annotation.EnableScheduling;

@EnableMongoAuditing(auditorAwareRef = "auditorAware")
@EnableScheduling
@SpringBootApplication
public class SalesApplication {

	public static void main(String[] args) {
		SpringApplication.run(SalesApplication.class, args);
	}

}

// File: src/main/java/com/example/sales/security/CustomUserDetails.java
package com.example.sales.security;

import com.example.sales.constant.UserRole;
import lombok.AllArgsConstructor;
import lombok.Getter;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;

import java.util.Collection;

@Getter
@AllArgsConstructor
public class CustomUserDetails implements UserDetails {

    private final String id;
    private final String email;
    private final String password;
    private final UserRole role;
    private final Collection<? extends GrantedAuthority> authorities;

    @Override public String getUsername() { return email; }
    @Override public boolean isAccountNonExpired() { return true; }
    @Override public boolean isAccountNonLocked() { return true; }
    @Override public boolean isCredentialsNonExpired() { return true; }
    @Override public boolean isEnabled() { return true; }

}

// File: src/main/java/com/example/sales/validation/DateRangeValidator.java
package com.example.sales.validation;

import com.example.sales.dto.report.ReportRequest;
import jakarta.validation.ConstraintValidator;
import jakarta.validation.ConstraintValidatorContext;

public class DateRangeValidator implements ConstraintValidator<ValidDateRange, ReportRequest> {

    @Override
    public boolean isValid(ReportRequest req, ConstraintValidatorContext context) {
        if (req.getStartDate() == null || req.getEndDate() == null) {
            return false; // bắt buộc cả 2 phải có
        }
        return !req.getStartDate().isAfter(req.getEndDate());
    }
}

// File: src/main/java/com/example/sales/constant/ApiCode.java
package com.example.sales.constant;

public enum ApiCode {
    // Success
    SUCCESS("2000", "Operation successful"),
    PRODUCT_CREATED("2001", "Product created successfully"),
    USER_UPDATED("2002", "User updated successfully"),
    PASSWORD_CHANGED("2003", "Password changed successfully"),
    EMAIL_SENT("2004", "Email sent successfully"),

    // Validation & Client Errors
    VALIDATION_ERROR("4000", "Validation error"),
    UNAUTHORIZED("4001", "Unauthorized access"),
    ACCESS_DENIED("4002", "Access denied"),
    NOT_FOUND("4003", "Resource not found"),
    INVALID_TOKEN("4004", "Invalid token"),
    ACCOUNT_LOCKED("4005", "Account is locked"),
    REFRESH_TOKEN_EXPIRED("4006", "Refresh token expired"),
    REFRESH_TOKEN_INVALID("4007", "Invalid refresh token"),
    INCORRECT_PASSWORD("4008", "Incorrect password"),
    EMAIL_EXISTS("4009", "Email already exists"),
    EMAIL_NOT_VERIFIED("4010", "Email not verified"),
    ALREADY_VERIFIED("4011", "Email already verified"),
    TOKEN_EXPIRED("4012", "Token expired"),
    VALIDATION_FILE_ERROR("4013", "Invalid file format"),
    ORDER_ALREADY_PAID("4014", "Order already paid"),
    INVALID_STATUS_TRANSITION("4015", "Invalid status transition"),
    PRODUCT_OUT_OF_STOCK("4016", "Product out of stock"),
    DUPLICATE_DATA("4017", "Duplicate data"),
    CANNOT_DELETE_SELF("4018", "Cannot delete self"),
    SHOP_ALREADY_EXISTS("4019", "Shop already exists"),
    PLAN_UPGRADE_REQUIRED("4020", "Plan upgrade required"),

    // System Errors
    INTERNAL_ERROR("5000", "Internal server error"),
    FILE_UPLOAD_FAILED("5001", "File upload failed"),
    FILE_TYPE_NOT_ALLOWED("5002", "File type not allowed"),

    // Business Logic
    SHOP_REQUIRED("4100", "Shop is required"),
    ORDER_ALREADY_COMPLETED("4101", "Order already completed"),
    PRODUCT_UPDATED("4102", "Product updated successfully"),
    SHOP_NOT_FOUND("4103", "Shop not found"),
    TABLE_CREATED("4104", "Table created successfully"),
    TABLE_LIST("4105", "Table list retrieved"),
    TABLE_STATUS_UPDATED("4106", "Table status updated"),
    USER_INFO("4107", "User info retrieved"),
    USER_NOT_FOUND("4108", "User not found"),
    BRANCH_NOT_FOUND("4109", "Branch not found"),
    CUSTOMER_NOT_FOUND("4110", "Customer not found"),
    ORDER_NOT_FOUND("4111", "Order not found"),
    PRODUCT_NOT_FOUND("4112", "Product not found"),
    PROMOTION_NOT_FOUND("4113", "Promotion not found"),
    TABLE_NOT_FOUND("4114", "Table not found"),
    USER_DELETED("4115", "User deleted successfully"),
    ORDER_PAYMENT_CONFIRMED("4116", "Order payment confirmed"),
    ORDER_STATUS_UPDATED("4117", "Order status updated"),
    ORDER_LIST("4118", "Order list retrieved"),
    ORDER_CANCELLED("4119", "Order cancelled"),
    ORDER_CREATED("4120", "Order created successfully"),
    CUSTOMER_CREATED("4121", "Customer created successfully"),
    CUSTOMER_UPDATED("4122", "Customer updated successfully"),
    CUSTOMER_DELETED("4123", "Customer deleted successfully"),
    CUSTOMER_LIST("4124", "Customer list retrieved"),
    PRODUCT_DELETED("4125", "Product deleted successfully"),
    PRODUCT_LIST("4126", "Product list retrieved"),
    PRODUCT_FOUND("4127", "Product found"),
    PRODUCT_IMPORTED("4128", "Product imported successfully"),
    PRODUCT_STATUS_UPDATED("4129", "Product status updated successfully"),
    PRODUCT_LOW_STOCK("4130", "Low stock products retrieved");

    private final String code;
    private final String message;

    ApiCode(String code, String message) {
        this.code = code;
        this.message = message;
    }

    public String getCode() {
        return code;
    }

    public String getMessage() {
        return message;
    }
}

// File: src/main/java/com/example/sales/security/PermissionChecker.java
package com.example.sales.security;

import com.example.sales.constant.ShopRole;
import com.example.sales.repository.BranchRepository;
import com.example.sales.repository.ShopUserRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Component;

import java.util.Set;

@Component
@RequiredArgsConstructor
public class PermissionChecker {

    private final ShopUserRepository shopUserRepository;
    private final BranchRepository branchRepository;

    public boolean isOwner(String shopId, String userId) {
        return hasRole(shopId, userId, ShopRole.OWNER);
    }

    public boolean isStaff(String shopId, String userId) {
        return hasRole(shopId, userId, ShopRole.STAFF);
    }

    public boolean isOwnerOrStaff(String shopId, String userId) {
        return hasRole(shopId, userId, ShopRole.OWNER, ShopRole.STAFF);
    }

    public boolean isAdmin(String shopId, String userId) {
        return hasRole(shopId, userId, ShopRole.ADMIN);
    }

    public boolean hasRole(String shopId, String userId, ShopRole... roles) {
        Set<ShopRole> allowed = Set.of(roles);
        return shopUserRepository.findByShopIdAndUserIdAndDeletedFalse(shopId, userId)
                .map(user -> allowed.contains(user.getRole()))
                .orElse(false);
    }
    public boolean hasBranchRole(String branchId, String userId, ShopRole... roles) {
        return branchRepository.findByIdAndDeletedFalse(branchId)
                .map(branch -> hasRole(branch.getShopId(), userId, roles))
                .orElse(false);
    }
}

// File: src/main/java/com/example/sales/validation/ValidDateRange.java
package com.example.sales.validation;

import jakarta.validation.Constraint;
import jakarta.validation.Payload;

import java.lang.annotation.*;

@Documented
@Constraint(validatedBy = DateRangeValidator.class)
@Target({ ElementType.TYPE })
@Retention(RetentionPolicy.RUNTIME)
public @interface ValidDateRange {
    String message() default "Ngày bắt đầu phải trước hoặc bằng ngày kết thúc";

    Class<?>[] groups() default {};

    Class<? extends Payload>[] payload() default {};
}

// File: src/main/java/com/example/sales/security/RequireBranchRole.java
package com.example.sales.security;

import com.example.sales.constant.ShopRole;

import java.lang.annotation.*;

@Target(ElementType.METHOD)
@Retention(RetentionPolicy.RUNTIME)
@Documented
public @interface RequireBranchRole {
    ShopRole[] value();
}

// File: src/main/java/com/example/sales/security/RequireBranchRoleAspect.java
package com.example.sales.security;

import com.example.sales.constant.ApiCode;
import com.example.sales.constant.ShopRole;
import com.example.sales.exception.BusinessException;
import com.example.sales.model.User;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.aspectj.lang.JoinPoint;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Before;
import org.aspectj.lang.reflect.MethodSignature;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.stereotype.Component;

import java.lang.annotation.Annotation;
import java.lang.reflect.Method;
import java.util.Arrays;

@Aspect
@Component
@RequiredArgsConstructor
@Slf4j
public class RequireBranchRoleAspect {

    private final PermissionChecker permissionChecker;

    @Before("@annotation(com.example.sales.security.RequireBranchRole)")
    public void checkBranchPermission(JoinPoint joinPoint) {
        Method method = ((MethodSignature) joinPoint.getSignature()).getMethod();
        RequireBranchRole annotation = method.getAnnotation(RequireBranchRole.class);
        ShopRole[] roles = annotation.value();

        User user = null;
        String branchId = null;

        Object[] args = joinPoint.getArgs();
        Annotation[][] paramAnnotations = method.getParameterAnnotations();

        for (int i = 0; i < args.length; i++) {
            if (user == null && Arrays.stream(paramAnnotations[i])
                    .anyMatch(a -> a.annotationType() == AuthenticationPrincipal.class)) {
                user = (User) args[i];
            }
            if (branchId == null && args[i] instanceof String str && str.startsWith("branch_")) {
                branchId = str;
            }
        }

        if (user == null || branchId == null) {
            log.warn("Thiếu user hoặc branchId khi kiểm tra quyền cho method: {}", method.getName());
            throw new BusinessException(ApiCode.UNAUTHORIZED);
        }

        boolean allowed = permissionChecker.hasBranchRole(branchId, user.getId(), roles);
        if (!allowed) {
            log.warn("Người dùng {} bị từ chối truy cập branch {} với vai trò yêu cầu: {}",
                    user.getId(), branchId, Arrays.toString(roles));
            throw new BusinessException(ApiCode.ACCESS_DENIED);
        }
    }
}

// File: src/main/java/com/example/sales/security/RequirePermission.java
package com.example.sales.security;

import java.lang.annotation.*;

@Target(ElementType.METHOD)
@Retention(RetentionPolicy.RUNTIME)
@Documented
public @interface RequirePermission {
    String value();
}

// File: src/main/java/com/example/sales/security/RequireRole.java
package com.example.sales.security;

import com.example.sales.constant.ShopRole;

import java.lang.annotation.*;

@Target(ElementType.METHOD)
@Retention(RetentionPolicy.RUNTIME)
@Documented
public @interface RequireRole {
    ShopRole[] value();
}

// File: src/main/java/com/example/sales/security/RequireRoleAspect.java
package com.example.sales.security;

import com.example.sales.constant.ApiCode;
import com.example.sales.constant.ShopRole;
import com.example.sales.exception.BusinessException;
import com.example.sales.model.User;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.aspectj.lang.JoinPoint;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Before;
import org.aspectj.lang.reflect.MethodSignature;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.stereotype.Component;

import java.lang.annotation.Annotation;
import java.lang.reflect.Method;
import java.util.Arrays;

@Aspect
@Component
@RequiredArgsConstructor
@Slf4j
public class RequireRoleAspect {

    private final PermissionChecker permissionChecker;

    @Before("@annotation(com.example.sales.security.RequireRole)")
    public void checkPermission(JoinPoint joinPoint) {
        Method method = ((MethodSignature) joinPoint.getSignature()).getMethod();
        RequireRole requireRole = method.getAnnotation(RequireRole.class);
        ShopRole[] roles = requireRole.value();

        User user = null;
        String shopId = null;

        Object[] args = joinPoint.getArgs();
        Annotation[][] paramAnnotations = method.getParameterAnnotations();

        for (int i = 0; i < args.length; i++) {
            if (user == null && Arrays.stream(paramAnnotations[i])
                    .anyMatch(a -> a.annotationType() == AuthenticationPrincipal.class)) {
                user = (User) args[i];
            }
            if (shopId == null && args[i] instanceof String str && str.startsWith("shop_")) {
                shopId = str;
            }
        }

        if (user == null || shopId == null) {
            log.warn("Thiếu user hoặc shopId khi kiểm tra quyền cho method: {}", method.getName());
            throw new BusinessException(ApiCode.UNAUTHORIZED);
        }

        boolean allowed = permissionChecker.hasRole(shopId, user.getId(), roles);
        if (!allowed) {
            log.warn("Người dùng {} bị từ chối truy cập shop {} với vai trò yêu cầu: {}",
                    user.getId(), shopId, Arrays.toString(roles));
            throw new BusinessException(ApiCode.ACCESS_DENIED);
        }
    }
}

// File: src/main/java/com/example/sales/dto/inventory/InventoryRequest.java

package com.example.sales.dto.inventory;

import com.example.sales.constant.InventoryType;
import jakarta.validation.constraints.Min;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import lombok.Data;

@Data
public class InventoryRequest {

    @NotBlank
    private String productId;

    private String branchId; // optional

    @NotNull
    private InventoryType type;

    @Min(1)
    private int quantity;

    private String note;
}

// File: src/main/java/com/example/sales/model/InventoryTransaction.java

package com.example.sales.model;

import com.example.sales.constant.InventoryType;
import com.example.sales.model.base.BaseEntity;
import lombok.*;
import org.springframework.data.annotation.Id;
import org.springframework.data.mongodb.core.mapping.Document;

@Getter
@Setter
@ToString
@EqualsAndHashCode(callSuper = true)
@Builder
@NoArgsConstructor
@AllArgsConstructor
@Document("inventory_transactions")
public class InventoryTransaction extends BaseEntity {

    @Id
    private String id;

    private String shopId;
    private String branchId;
    private String productId;

    private InventoryType type;  // IMPORT, EXPORT, ADJUSTMENT

    private int quantity;

    private String note;

    private String referenceId;  // Liên kết đơn hàng, phiếu nhập, v.v.
}

// File: src/main/java/com/example/sales/repository/InventoryTransactionRepository.java
package com.example.sales.repository;

import com.example.sales.model.InventoryTransaction;
import org.springframework.data.mongodb.repository.MongoRepository;

import java.util.List;

public interface InventoryTransactionRepository extends MongoRepository<InventoryTransaction, String> {
    List<InventoryTransaction> findByProductIdOrderByCreatedAtDesc(String productId);
}

// File: src/main/java/com/example/sales/constant/InventoryType.java

package com.example.sales.constant;

public enum InventoryType {
    IMPORT,
    EXPORT,
    ADJUSTMENT
}

// File: com/example/sales/controller/InventoryController.java
package com.example.sales.controller;

import com.example.sales.constant.ApiCode;
import com.example.sales.constant.ShopRole;
import com.example.sales.dto.ApiResponse;
import com.example.sales.dto.inventory.InventoryRequest;
import com.example.sales.model.InventoryTransaction;
import com.example.sales.security.RequireRole;
import com.example.sales.service.InventoryService;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/inventory")
@RequiredArgsConstructor
public class InventoryController {

    private final InventoryService inventoryService;

    @PostMapping
    @RequireRole(ShopRole.OWNER)
    public ApiResponse<InventoryTransaction> create(@RequestParam String shopId,
                                                    @RequestBody @Valid InventoryRequest request) {
        return ApiResponse.success(ApiCode.SUCCESS, inventoryService.createTransaction(shopId, request));
    }

    @GetMapping("/history")
    @RequireRole({ShopRole.OWNER, ShopRole.STAFF})
    public ApiResponse<List<InventoryTransaction>> getHistory(@RequestParam String productId) {
        return ApiResponse.success(ApiCode.SUCCESS, inventoryService.getHistory(productId));
    }
}

// File: com/example/sales/service/InventoryService.java
package com.example.sales.service;

import com.example.sales.constant.ApiCode;
import com.example.sales.dto.inventory.InventoryRequest;
import com.example.sales.exception.BusinessException;
import com.example.sales.model.InventoryTransaction;
import com.example.sales.model.Product;
import com.example.sales.repository.InventoryTransactionRepository;
import com.example.sales.repository.ProductRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
@RequiredArgsConstructor
public class InventoryService {

    private final ProductRepository productRepository;
    private final InventoryTransactionRepository inventoryTransactionRepository;

    public InventoryTransaction createTransaction(String shopId, InventoryRequest request) {
        Product product = productRepository.findByIdAndDeletedFalse(request.getProductId())
                .orElseThrow(() -> new BusinessException(ApiCode.PRODUCT_NOT_FOUND));

        int change = switch (request.getType()) {
            case IMPORT, ADJUSTMENT -> request.getQuantity();
            case EXPORT -> -request.getQuantity();
        };

        int newQty = product.getQuantity() + change;
        if (newQty < 0) {
            throw new BusinessException(ApiCode.PRODUCT_OUT_OF_STOCK);
        }

        product.setQuantity(newQty);
        productRepository.save(product);

        InventoryTransaction tx = InventoryTransaction.builder()
                .shopId(shopId)
                .branchId(request.getBranchId())
                .productId(product.getId())
                .type(request.getType())
                .quantity(change)
                .note(request.getNote())
                .build();

        return inventoryTransactionRepository.save(tx);
    }

    public List<InventoryTransaction> getHistory(String productId) {
        return inventoryTransactionRepository.findByProductIdOrderByCreatedAtDesc(productId);
    }
}

// File: com/example/sales/config/SwaggerConfig.java
package com.example.sales.config;

import io.swagger.v3.oas.models.OpenAPI;
import io.swagger.v3.oas.models.info.Info;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class SwaggerConfig {

    @Bean
    public OpenAPI customOpenAPI() {
        return new OpenAPI()
                .info(new Info()
                        .title("Sales Management API")
                        .version("1.0")
                        .description("API cho hệ thống quản lý bán hàng"));
    }
}

// File: test/java/com/example/sales/SalesManagementBackendApplicationTests.java
package com.example.sales;

import org.junit.jupiter.api.Test;

class SalesManagementBackendApplicationTests extends BaseSpringTest {

	@Test
	void contextLoads() {
	}

}

// File: src/test/java/com/example/sales/BaseSpringTest.java
package com.example.sales;

import com.example.sales.config.TestMailConfig;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.context.annotation.Import;

@SpringBootTest
@ActiveProfiles("test")
@Import(TestMailConfig.class)
public abstract class BaseSpringTest {
}

// File: test/java/com/example/sales/service/UserServiceTest.java
package com.example.sales.service;

import com.example.sales.constant.ApiCode;
import com.example.sales.exception.BusinessException;
import com.example.sales.model.User;
import com.example.sales.repository.UserRepository;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.*;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.security.crypto.password.PasswordEncoder;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class UserServiceTest {

    @InjectMocks
    private UserService userService;

    @Mock private UserRepository userRepository;
    @Mock private PasswordEncoder passwordEncoder;

    @Test
    void testGetCurrentUser_shouldReturnSameUser() {
        User mockUser = new User();
        mockUser.setId("user1");

        User result = userService.getCurrentUser("user1");

        assertEquals("user1", result.getId());
    }

    @Test
    void testUpdateProfile_shouldUpdateAndSave() {
        User user = new User();
        user.setId("u1");

        when(userRepository.save(any())).thenAnswer(invocation -> invocation.getArgument(0));

        User updated = userService.updateProfile("u1", "Nguyễn Văn A", "0123456789", "Cửa hàng tiện lợi");

        assertEquals("Nguyễn Văn A", updated.getFullName());
        assertEquals("0123456789", updated.getPhone());
        assertEquals("Cửa hàng tiện lợi", updated.getBusinessType());

        verify(userRepository).save(user);
    }

    @Test
    void testChangePassword_shouldThrowExceptionIfCurrentPasswordWrong() {
        User user = new User();
        user.setPassword("encoded-old");

        when(passwordEncoder.matches("wrong-pass", "encoded-old")).thenReturn(false);

        BusinessException ex = assertThrows(BusinessException.class, () ->
                userService.changePassword("user1", "wrong-pass", "new-pass")
        );

        assertEquals(ApiCode.INCORRECT_PASSWORD, ex.getError());
        verify(userRepository, never()).save(any());
    }

    @Test
    void testChangePassword_shouldEncodeAndSaveNewPassword() {
        User user = new User();
        user.setPassword("encoded-old");

        when(passwordEncoder.matches("old-pass", "encoded-old")).thenReturn(true);
        when(passwordEncoder.encode("new-pass")).thenReturn("encoded-new");
        when(userRepository.save(any())).thenAnswer(i -> i.getArgument(0));

        userService.changePassword("user1", "old-pass", "new-pass");

        assertEquals("encoded-new", user.getPassword());
        verify(userRepository).save(user);
    }
}

// File: test/java/com/example/sales/service/ShopServiceTest.java
package com.example.sales.service;

import com.example.sales.dto.shop.ShopRequest;
import com.example.sales.model.Shop;
import com.example.sales.model.User;
import com.example.sales.repository.ShopRepository;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.*;
import org.mockito.junit.jupiter.MockitoExtension;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class ShopServiceTest {

    @InjectMocks
    private ShopService shopService;

    @Mock
    private ShopRepository shopRepository;

    @Mock
    private AuditLogService auditLogService; // ✅ Thêm dòng này

    @Test
    void testCreateShop() {
        ShopRequest request = new ShopRequest();
        request.setName("Shop ABC");

        User owner = new User();
        owner.setId("u1");

        when(shopRepository.save(any())).thenAnswer(invocation -> {
            Shop shop = invocation.getArgument(0);
            shop.setId("s1");
            return shop;
        });

        Shop result = shopService.createShop("u1", request, null);

        assertEquals("Shop ABC", result.getName());
        verify(shopRepository).save(any(Shop.class));

        // ✅ Optional: kiểm tra ghi log
        verify(auditLogService).log(eq("u1"), eq("s1"), any(), eq("SHOP"), eq("CREATED"), contains("Shop ABC"));
    }
}

// File: test/java/com/example/sales/service/ProductServiceTest.java
package com.example.sales.service;

import com.example.sales.constant.ShopType;
import com.example.sales.dto.product.ProductRequest;
import com.example.sales.dto.product.ProductResponse;
import com.example.sales.model.Product;
import com.example.sales.model.Shop;
import com.example.sales.repository.ProductRepository;
import com.example.sales.repository.ShopRepository;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.*;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.Optional;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class ProductServiceTest {

    @InjectMocks
    private ProductService productService;

    @Mock private ProductRepository productRepository;
    @Mock private ShopRepository shopRepository;
    @Mock private AuditLogService auditLogService;
    @Mock private FileUploadService fileUploadService;

    @Test
    void testCreateProduct() {
        // Arrange
        ProductRequest req = new ProductRequest();
        req.setName("Cà phê");
        req.setPrice(10000.0);
        req.setQuantity(10);
        req.setCategory("Đồ uống");
        req.setUnit("Cốc");
        req.setImageUrl("http://example.com/image.jpg");

        Shop mockShop = Shop.builder()
                .id("shop1")
                .name("Quán A")
                .type(ShopType.CAFE)
                .build();

        when(shopRepository.findByIdAndDeletedFalse("shop1"))
                .thenReturn(Optional.of(mockShop));

        when(productRepository.save(any(Product.class)))
                .thenAnswer(invocation -> {
                    Product product = invocation.getArgument(0);
                    product.setId("p1");
                    return product;
                });

        // Act
        ProductResponse response = productService.createProduct("shop1", req);

        // Assert
        assertEquals("Cà phê", response.getName());
        assertEquals("shop1", response.getShopId());

        verify(productRepository).save(any(Product.class));
        verify(fileUploadService).moveToProduct(eq("http://example.com/image.jpg"));
        verify(auditLogService).log(
                eq(null),
                eq("shop1"),
                eq("p1"),
                eq("PRODUCT"),
                eq("CREATED"),
                contains("Cà phê")
        );
    }
}

// File: test/java/com/example/sales/service/OrderServiceTest.java
package com.example.sales.service;

import com.example.sales.constant.OrderStatus;
import com.example.sales.model.Order;
import com.example.sales.repository.OrderRepository;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.Optional;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class OrderServiceTest {

    @InjectMocks
    private OrderService orderService;

    @Mock
    private OrderRepository orderRepository;

    @Mock
    private AuditLogService auditLogService; // 🟢 THÊM MOCK NÀY

    @Test
    void testCancelOrder() {
        Order mockOrder = Order.builder()
                .id("ord1")
                .shopId("shop1")
                .userId("user1")
                .status(OrderStatus.PENDING)
                .build();

        when(orderRepository.findByIdAndDeletedFalse("ord1"))
                .thenReturn(Optional.of(mockOrder));

        orderService.cancelOrder("user1", "shop1", "ord1");

        assertEquals(OrderStatus.CANCELLED, mockOrder.getStatus());
        verify(orderRepository).save(mockOrder);

        // 🟢 Optional: kiểm tra audit log được gọi
        verify(auditLogService).log(eq("user1"), eq("shop1"), eq("ord1"), eq("ORDER"), eq("CANCELLED"), anyString());
    }
}

// File: test/java/com/example/sales/service/CustomerServiceTest.java
package com.example.sales.service;

import com.example.sales.dto.customer.CustomerRequest;
import com.example.sales.dto.customer.CustomerResponse;
import com.example.sales.model.Customer;
import com.example.sales.repository.CustomerRepository;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class CustomerServiceTest {

    @InjectMocks
    private CustomerService customerService;

    @Mock
    private CustomerRepository customerRepository;

    @Mock
    private AuditLogService auditLogService;

    @Test
    void testCreateCustomer() {
        CustomerRequest request = new CustomerRequest();
        request.setName("Nguyễn Văn A");

        when(customerRepository.save(any())).thenAnswer(invocation -> {
            Customer customer = invocation.getArgument(0);
            customer.setId("c1");
            return customer;
        });

        CustomerResponse response = customerService.createCustomer("shop1", "user1", request);

        assertEquals("Nguyễn Văn A", response.getName());
        verify(customerRepository).save(any(Customer.class));
        verify(auditLogService).log(any(), any(), any(), any(), any(), any());
    }
}

// File: com/example/sales/service/PaymentService.java
package com.example.sales.service;

import com.example.sales.constant.SubscriptionActionType;
import com.example.sales.constant.SubscriptionPlan;
import com.example.sales.model.Shop;
import com.example.sales.model.SubscriptionHistory;
import com.example.sales.model.User;
import com.example.sales.repository.SubscriptionHistoryRepository;
import com.example.sales.repository.UserRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.time.LocalDateTime;
import java.util.Map;

@Service
@RequiredArgsConstructor
public class PaymentService {

    private final SubscriptionHistoryRepository historyRepository;
    private final UserRepository userRepository; // Giả sử bạn có repository để lấy thông tin người dùng
    private final MailService mailService; // Giả sử bạn có service gửi email

    public void upgradeShopPlan(Shop shop, SubscriptionPlan newPlan, int months) {
        SubscriptionPlan oldPlan = shop.getPlan();

        shop.setPlan(newPlan);
        shop.setPlanExpiry(LocalDateTime.now().plusMonths(months));

        // Lưu lịch sử nâng cấp
        SubscriptionHistory history = SubscriptionHistory.builder()
                .shopId(shop.getId())
                .userId(shop.getOwnerId())
                .oldPlan(oldPlan)
                .newPlan(newPlan)
                .durationMonths(months)
                .paymentMethod("MANUAL") // hoặc "WEBHOOK", "STRIPE", "VNPAY", ...
                .transactionId(null) // có thể set từ webhook
                .actionType(SubscriptionActionType.UPGRADE)
                .build();

        historyRepository.save(history);

        // Gửi mail thông báo nâng cấp
        User owner = userRepository.findById(shop.getOwnerId()).orElse(null);
        if (owner != null && owner.getEmail() != null) {
            Map<String, Object> model = Map.of(
                    "fullName", owner.getFullName(),
                    "newPlan", newPlan.name(),
                    "shopName", shop.getName(),
                    "duration", months + " tháng"
            );

            mailService.sendHtmlTemplate(
                    owner.getEmail(),
                    "🎉 Gói " + newPlan.name() + " đã được kích hoạt",
                    "emails/plan-upgraded",
                    model
            );
        }
    }
}

// File: com/example/sales/scheduler/PlanExpiryScheduler.java
package com.example.sales.scheduler;

import com.example.sales.constant.SubscriptionActionType;
import com.example.sales.constant.SubscriptionPlan;
import com.example.sales.model.Shop;
import com.example.sales.model.SubscriptionHistory;
import com.example.sales.model.User;
import com.example.sales.repository.ShopRepository;
import com.example.sales.repository.SubscriptionHistoryRepository;
import com.example.sales.repository.UserRepository;
import com.example.sales.service.MailService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Map;

@Component
@RequiredArgsConstructor
@Slf4j
public class PlanExpiryScheduler {

    private final ShopRepository shopRepository;
    private final SubscriptionHistoryRepository historyRepository;
    private final MailService emailService; // Giả sử bạn có một service gửi email
    private final UserRepository userRepository; // Giả sử bạn có repository để lấy thông tin người dùng

    // Chạy mỗi ngày lúc 01:00 sáng
    @Scheduled(cron = "0 0 1 * * *")
    public void downgradeExpiredPlans() {
        log.info("🔄 Kiểm tra gói đã hết hạn...");

        List<Shop> expiredShops = shopRepository.findByPlanExpiryBeforeAndPlanNot(LocalDateTime.now(), SubscriptionPlan.FREE);

        for (Shop shop : expiredShops) {
            SubscriptionPlan oldPlan = shop.getPlan();
            log.info("⚠️ Shop {} đã hết hạn gói {} → hạ về FREE", shop.getId(), shop.getPlan());
            shop.setPlan(SubscriptionPlan.FREE);
            shop.setPlanExpiry(null); // hoặc giữ nguyên nếu muốn log

            // Ghi lịch sử
            SubscriptionHistory history = SubscriptionHistory.builder()
                    .shopId(shop.getId())
                    .userId(shop.getOwnerId())
                    .oldPlan(oldPlan)
                    .newPlan(SubscriptionPlan.FREE)
                    .durationMonths(0)
                    .paymentMethod("AUTO")
                    .actionType(SubscriptionActionType.AUTO_DOWNGRADE)
                    .build();

            historyRepository.save(history);

            User owner = userRepository.findById(shop.getOwnerId()).orElse(null);
            if (owner != null && owner.getEmail() != null) {
                Map<String, Object> model = Map.of(
                        "fullName", owner.getFullName(),
                        "oldPlan", oldPlan.name(),
                        "shopName", shop.getName()
                );

                emailService.sendHtmlTemplate(
                        owner.getEmail(),
                        "Gói dịch vụ của bạn đã hết hạn",
                        "emails/plan-downgraded",
                        model
                );
            }
        }

        shopRepository.saveAll(expiredShops);
    }
}

// File: com/example/sales/security/PlanInterceptor.java
package com.example.sales.security;

import com.example.sales.constant.ApiCode;
import com.example.sales.constant.SubscriptionPlan;
import com.example.sales.exception.BusinessException;
import com.example.sales.model.Shop;
import com.example.sales.service.ShopService;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Component;
import org.springframework.web.method.HandlerMethod;
import org.springframework.web.servlet.HandlerInterceptor;

import java.util.Arrays;

@Component
@RequiredArgsConstructor
public class PlanInterceptor implements HandlerInterceptor {

    private final ShopService shopService;

    @Override
    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) {
        if (!(handler instanceof HandlerMethod method)) return true;

        RequirePlan annotation = method.getMethodAnnotation(RequirePlan.class);
        if (annotation == null) return true;

        String shopId = request.getParameter("shopId");
        if (shopId == null || shopId.isBlank()) {
            throw new BusinessException(ApiCode.VALIDATION_ERROR); // hoặc custom lỗi
        }

        Shop shop = shopService.getShopById(shopId); // bạn cần viết hàm này
        SubscriptionPlan currentPlan = shop.getPlan();

        boolean allowed = Arrays.stream(annotation.value())
                .anyMatch(p -> currentPlan.ordinal() >= p.ordinal());

        if (!allowed) {
            throw new BusinessException(ApiCode.PLAN_UPGRADE_REQUIRED); // hoặc tạo code riêng như `PLAN_UPGRADE_REQUIRED`
        }

        return true;
    }
}

// File: com/example/sales/scheduler/PlanReminderScheduler.java
package com.example.sales.scheduler;

import com.example.sales.model.Shop;
import com.example.sales.model.User;
import com.example.sales.repository.ShopRepository;
import com.example.sales.repository.UserRepository;
import com.example.sales.service.MailService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;

import java.time.LocalDateTime;
import java.time.temporal.ChronoUnit;
import java.util.List;
import java.util.Map;

@Component
@RequiredArgsConstructor
@Slf4j
public class PlanReminderScheduler {

    private final ShopRepository shopRepository;
    private final UserRepository userRepository;
    private final MailService mailService;

    // Chạy mỗi ngày lúc 7h sáng
    @Scheduled(cron = "0 0 7 * * *")
    public void remindExpiringPlans() {
        LocalDateTime targetDate = LocalDateTime.now().plusDays(3).truncatedTo(ChronoUnit.DAYS);

        List<Shop> shops = shopRepository.findByPlanExpiryBetween(
                targetDate,
                targetDate.plusDays(1)
        );

        for (Shop shop : shops) {
            User owner = userRepository.findById(shop.getOwnerId()).orElse(null);
            if (owner == null || owner.getEmail() == null) continue;

            Map<String, Object> model = Map.of(
                    "fullName", owner.getFullName(),
                    "shopName", shop.getName(),
                    "expiryDate", shop.getPlanExpiry().toLocalDate(),
                    "currentPlan", shop.getPlan().name()
            );

            mailService.sendHtmlTemplate(
                    owner.getEmail(),
                    "⏳ Gói " + shop.getPlan() + " sắp hết hạn",
                    "emails/plan-expiry-reminder",
                    model
            );

            log.info("📧 Đã gửi email nhắc hạn cho shop {}", shop.getName());
        }
    }
}

// File: com/example/sales/security/RequirePlan.java
package com.example.sales.security;

import com.example.sales.constant.SubscriptionPlan;

import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;

@Target({ElementType.METHOD, ElementType.TYPE})
@Retention(RetentionPolicy.RUNTIME)
public @interface RequirePlan {
    SubscriptionPlan[] value() default {};
}

// File: com/example/sales/util/SignatureUtil.java
package com.example.sales.util;

import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;
import java.util.Base64;

public class SignatureUtil {

    public static boolean isValidHmac(String payload, String signature, String secret) {
        try {
            Mac sha256 = Mac.getInstance("HmacSHA256");
            SecretKeySpec keySpec = new SecretKeySpec(secret.getBytes(), "HmacSHA256");
            sha256.init(keySpec);
            byte[] hash = sha256.doFinal(payload.getBytes());
            String expected = Base64.getEncoder().encodeToString(hash);
            return expected.equals(signature);
        } catch (Exception e) {
            return false;
        }
    }
}

// File: com/example/sales/constant/SubscriptionActionType.java
package com.example.sales.constant;

public enum SubscriptionActionType {
    UPGRADE,          // Người dùng nâng cấp gói
    DOWNGRADE,        // Người dùng chủ động hạ gói
    AUTO_DOWNGRADE,   // Hệ thống tự động hạ gói khi hết hạn
    TRIAL_EXPIRED     // Gói thử nghiệm kết thúc
}

// File: com/example/sales/controller/SubscriptionController.java
package com.example.sales.controller;

import com.example.sales.constant.ApiCode;
import com.example.sales.dto.ApiResponse;
import com.example.sales.dto.subscription.UpgradePlanRequest;
import com.example.sales.model.Shop;
import com.example.sales.model.SubscriptionHistory;
import com.example.sales.repository.SubscriptionHistoryRepository;
import com.example.sales.security.CustomUserDetails;
import com.example.sales.service.PaymentService;
import com.example.sales.service.ShopService;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/subscription")
@RequiredArgsConstructor
public class SubscriptionController {

    private final ShopService shopService;
    private final PaymentService paymentService;
    private final SubscriptionHistoryRepository subscriptionHistoryRepository;

    @GetMapping("/me")
    public ApiResponse<Shop> getCurrentPlan(@AuthenticationPrincipal CustomUserDetails user) {
        Shop shop = shopService.getShopByOwner(user.getId());
        return ApiResponse.success(ApiCode.SUCCESS, shop);
    }

    @PostMapping("/upgrade")
    public ApiResponse<?> upgrade(@AuthenticationPrincipal CustomUserDetails user,
                                  @RequestBody @Valid UpgradePlanRequest req) {
        Shop shop = shopService.getShopByOwner(user.getId());

        paymentService.upgradeShopPlan(shop, req.getTargetPlan(), req.getMonths());

        shopService.save(shop); // hoặc updateShop()

        return ApiResponse.success(ApiCode.SUCCESS);
    }

    @GetMapping("/history")
    public ApiResponse<List<SubscriptionHistory>> getHistory(@AuthenticationPrincipal CustomUserDetails user) {
        Shop shop = shopService.getShopByOwner(user.getId());
        List<SubscriptionHistory> history = subscriptionHistoryRepository.findByShopIdOrderByCreatedAtDesc(shop.getId());
        return ApiResponse.success(ApiCode.SUCCESS, history);
    }
}

// File: com/example/sales/model/SubscriptionHistory.java
package com.example.sales.model;

import com.example.sales.constant.SubscriptionActionType;
import com.example.sales.constant.SubscriptionPlan;
import com.example.sales.model.base.BaseEntity;
import lombok.*;
import org.springframework.data.annotation.Id;
import org.springframework.data.mongodb.core.mapping.Document;

@Getter
@Setter
@ToString
@EqualsAndHashCode(callSuper = true)
@Builder
@AllArgsConstructor
@NoArgsConstructor
@Document("subscription_histories")
public class SubscriptionHistory extends BaseEntity {

    @Id
    private String id;

    private String shopId;
    private String userId;

    private SubscriptionPlan oldPlan;
    private SubscriptionPlan newPlan;
    private int durationMonths;

    private String transactionId;
    private String paymentMethod;
    private SubscriptionActionType actionType;
}

// File: com/example/sales/repository/SubscriptionHistoryRepository.java
package com.example.sales.repository;

import com.example.sales.model.SubscriptionHistory;
import org.springframework.data.mongodb.repository.MongoRepository;

import java.util.List;

public interface SubscriptionHistoryRepository extends MongoRepository<SubscriptionHistory, String> {
    List<SubscriptionHistory> findByShopIdOrderByCreatedAtDesc(String shopId);
}

// File: com/example/sales/constant/SubscriptionPlan.java
package com.example.sales.constant;

public enum SubscriptionPlan {
    FREE, PRO, ENTERPRISE
}

// File: com/example/sales/dto/subscription/UpgradePlanRequest.java
package com.example.sales.dto.subscription;

import com.example.sales.constant.SubscriptionPlan;
import jakarta.validation.constraints.NotNull;
import lombok.Data;

@Data
public class UpgradePlanRequest {
    @NotNull
    private SubscriptionPlan targetPlan;
    private int months = 1; // số tháng đăng ký (default = 1)
}

// File: com/example/sales/controller/WebhookController.java
package com.example.sales.controller;

import com.example.sales.constant.SubscriptionPlan;
import com.example.sales.model.Shop;
import com.example.sales.service.PaymentService;
import com.example.sales.service.ShopService;
import com.example.sales.util.SignatureUtil;
import com.fasterxml.jackson.databind.ObjectMapper;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.web.bind.annotation.*;

import java.util.Map;

@RestController
@RequestMapping("/api/webhook")
@RequiredArgsConstructor
@Slf4j
public class WebhookController {

    private final ShopService shopService;
    private final PaymentService paymentService;
    private final ObjectMapper objectMapper;

    @Value("${webhook.secret}")
    private String webhookSecret;

    @PostMapping("/payment")
    public void handlePaymentWebhook(@RequestBody String rawBody,
                                     @RequestHeader("X-Payment-Signature") String signature) {
        log.info("Received payment webhook");

        try {
            // ✅ 1. Verify signature
            if (!SignatureUtil.isValidHmac(rawBody, signature, webhookSecret)) {
                log.warn("Invalid webhook signature");
                return;
            }

            // ✅ 2. Parse JSON payload
            Map<String, Object> payload = objectMapper.readValue(rawBody, Map.class);
            String shopId = (String) payload.get("shopId");
            String planStr = (String) payload.get("plan");
            Integer months = (Integer) payload.get("months");

            if (shopId == null || planStr == null || months == null) {
                log.warn("Missing required fields in webhook payload");
                return;
            }

            SubscriptionPlan targetPlan = SubscriptionPlan.valueOf(planStr);
            Shop shop = shopService.getShopById(shopId);

            // ✅ 3. Upgrade plan
            paymentService.upgradeShopPlan(shop, targetPlan, months);
            shopService.save(shop);

            log.info("✅ Shop {} upgraded to {} for {} months", shopId, targetPlan, months);
        } catch (Exception e) {
            log.error("Error processing webhook", e);
        }
    }
}

// File: com/example/sales/security/CustomUserDetailsService.java
package com.example.sales.security;

import com.example.sales.model.User;
import com.example.sales.repository.UserRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
@RequiredArgsConstructor
public class CustomUserDetailsService implements UserDetailsService {

    private final UserRepository userRepository;

    @Override
    public UserDetails loadUserByUsername(String email) throws UsernameNotFoundException {
        User user = userRepository.findByEmailAndDeletedFalse(email)
                .orElseThrow(() -> new UsernameNotFoundException("User not found"));
        return new CustomUserDetails(
                user.getId(),
                user.getEmail(),
                user.getPassword(), // ✅ THÊM FIELD PASSWORD
                user.getRole(),
                List.of(new SimpleGrantedAuthority("ROLE_" + user.getRole()))
        );
    }
}

// File: src/main/java/com/example/sales/dto/shopUser/ShopUserResponse.java
package com.example.sales.dto.shopUser;

import com.example.sales.constant.ShopRole;
import lombok.Builder;
import lombok.Data;

@Data
@Builder
public class ShopUserResponse {
    private String shopId;
    private String shopName;
    private ShopRole role;
}

// File: src/main/java/com/example/sales/dto/shop/ShopAdminResponse.java
package com.example.sales.dto.shop;

import com.example.sales.constant.ShopType;
import com.example.sales.constant.SubscriptionPlan;
import lombok.Builder;
import lombok.Data;

import java.time.LocalDateTime;

@Data
@Builder
public class ShopAdminResponse {
    private String id;
    private String name;
    private ShopType type;
    private String address;
    private String phone;
    private String logoUrl;
    private boolean active;
    private SubscriptionPlan plan;
    private String currency;
    private String timezone;
    private String orderPrefix;
    private LocalDateTime planExpiry;
}

// File: src/main/java/com/example/sales/dto/shop/ShopResponse.java
package com.example.sales.dto.shop;

import com.example.sales.constant.ShopType;
import com.example.sales.constant.SubscriptionPlan;
import lombok.Builder;
import lombok.Data;

@Data
@Builder
public class ShopResponse {
    private String id;
    private String name;
    private ShopType type;
    private String address;
    private String phone;
    private String logoUrl;
    private boolean active;
    private SubscriptionPlan plan;
    private String currency;
}

// File: src/main/java/com/example/sales/dto/shop/ShopSimpleResponse.java
package com.example.sales.dto.shop;

import com.example.sales.constant.ShopRole;
import com.example.sales.constant.ShopType;
import lombok.Builder;
import lombok.Data;

@Data
@Builder
public class ShopSimpleResponse {
    private String id;
    private String name;
    private ShopType type;
    private String logoUrl;
    private boolean active;
    private ShopRole role; // 👈 vai trò của user trong shop
}

// File: test/java/com/example/sales/exception/GlobalExceptionHandlerTest.java
package com.example.sales.exception;

import com.example.sales.constant.ApiCode;
import com.example.sales.dto.ApiResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.AccessDeniedException;
import org.springframework.validation.BindingResult;
import org.springframework.validation.FieldError;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.context.request.WebRequest;

import java.util.List;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
class GlobalExceptionHandlerTest {

    private final GlobalExceptionHandler handler = new GlobalExceptionHandler();

    @Test
    void testHandleValidationExceptions() {
        BindingResult bindingResult = mock(BindingResult.class);
        FieldError fieldError = new FieldError("objectName", "name", "Field is required");
        when(bindingResult.getFieldErrors()).thenReturn(List.of(fieldError));

        MethodArgumentNotValidException ex = new MethodArgumentNotValidException(null, bindingResult);
        WebRequest webRequest = mock(WebRequest.class);
        when(webRequest.getDescription(false)).thenReturn("POST /api/users");

        ResponseEntity<ApiResponse<Map<String, String>>> response = handler.handleValidationExceptions(ex, webRequest);

        assertEquals(HttpStatus.BAD_REQUEST, response.getStatusCode());
        assertEquals(false, response.getBody().isSuccess());
        assertEquals("4000", response.getBody().getCode());
        assertEquals("Validation error", response.getBody().getMessage());
        assertEquals("Field is required", response.getBody().getData().get("name"));
    }

    @Test
    void testHandleAccessDeniedException() {
        AccessDeniedException ex = new AccessDeniedException("Access denied");
        WebRequest webRequest = mock(WebRequest.class);
        when(webRequest.getDescription(false)).thenReturn("GET /api/admin");

        ResponseEntity<ApiResponse<String>> response = handler.handleAccessDeniedException(ex, webRequest);

        assertEquals(HttpStatus.FORBIDDEN, response.getStatusCode());
        assertEquals(false, response.getBody().isSuccess());
        assertEquals("4002", response.getBody().getCode());
        assertEquals("Access denied", response.getBody().getMessage());
        assertEquals("Access denied", response.getBody().getData());
    }

    @Test
    void testHandleBusinessException() {
        BusinessException ex = new BusinessException(ApiCode.USER_NOT_FOUND);
        WebRequest webRequest = mock(WebRequest.class);
        when(webRequest.getDescription(false)).thenReturn("GET /api/users/123");

        ResponseEntity<ApiResponse<String>> response = handler.handleBusinessException(ex, webRequest);

        assertEquals(HttpStatus.NOT_FOUND, response.getStatusCode());
        assertEquals(false, response.getBody().isSuccess());
        assertEquals("4108", response.getBody().getCode());
        assertEquals("User not found", response.getBody().getMessage());
        assertEquals(null, response.getBody().getData());
    }

    @Test
    void testHandleAllExceptions() {
        Exception ex = new RuntimeException("Unexpected error");
        WebRequest webRequest = mock(WebRequest.class);
        when(webRequest.getDescription(false)).thenReturn("GET /api/test");
        when(webRequest.getRemoteUser()).thenReturn("testUser");

        ResponseEntity<ApiResponse<String>> response = handler.handleAllExceptions(ex, webRequest);

        assertEquals(HttpStatus.INTERNAL_SERVER_ERROR, response.getStatusCode());
        assertEquals(false, response.getBody().isSuccess());
        assertEquals("5000", response.getBody().getCode());
        assertEquals("Internal server error", response.getBody().getMessage());
        assertEquals("Unexpected error", response.getBody().getData());
    }

    @Test
    void testApiResponseSuccessWithData() {
        ApiResponse<String> response = ApiResponse.success(ApiCode.SUCCESS, "Test data");
        assertEquals(true, response.isSuccess());
        assertEquals("2000", response.getCode());
        assertEquals("Operation successful", response.getMessage());
        assertEquals("Test data", response.getData());
    }

    @Test
    void testApiResponseSuccessWithoutData() {
        ApiResponse<?> response = ApiResponse.success(ApiCode.SUCCESS);
        assertEquals(true, response.isSuccess());
        assertEquals("2000", response.getCode());
        assertEquals("Operation successful", response.getMessage());
        assertEquals(null, response.getData());
    }

    @Test
    void testApiResponseErrorWithoutData() {
        ApiResponse<?> response = ApiResponse.error(ApiCode.INTERNAL_ERROR);
        assertEquals(false, response.isSuccess());
        assertEquals("5000", response.getCode());
        assertEquals("Internal server error", response.getMessage());
        assertEquals(null, response.getData());
    }

    @Test
    void testApiResponseErrorWithCustomMessageAndData() {
        ApiResponse<String> response = ApiResponse.error(ApiCode.VALIDATION_ERROR, "Custom validation error", "Details");
        assertEquals(false, response.isSuccess());
        assertEquals("4000", response.getCode());
        assertEquals("Custom validation error", response.getMessage());
        assertEquals("Details", response.getData());
    }
}

// File: main/java/com/example/sales/controller/product/ProductCrudController.java
package com.example.sales.controller.product;

import com.example.sales.constant.ApiCode;
import com.example.sales.constant.ShopRole;
import com.example.sales.dto.ApiResponse;
import com.example.sales.dto.product.ProductRequest;
import com.example.sales.dto.product.ProductResponse;
import com.example.sales.security.RequireRole;
import com.example.sales.service.ProductService;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.data.web.PageableDefault;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

/**
 * Controller xử lý các thao tác CRUD cho sản phẩm.
 */
@RestController
@RequestMapping("/api/products")
@RequiredArgsConstructor
public class ProductCrudController {
    private final ProductService productService;

    /**
     * Tạo sản phẩm mới.
     *
     * @param shopId  ID của cửa hàng
     * @param request Chi tiết sản phẩm
     * @return Phản hồi với sản phẩm đã tạo
     */
    @PostMapping
    @RequireRole(ShopRole.OWNER)
    public ResponseEntity<ApiResponse<ProductResponse>> create(
            @RequestParam String shopId,
            @Valid @RequestBody ProductRequest request) {
        ProductResponse response = productService.createProduct(shopId, request);
        return ResponseEntity.ok(ApiResponse.success(ApiCode.PRODUCT_CREATED, response));
    }

    /**
     * Cập nhật sản phẩm.
     *
     * @param userId  ID người dùng
     * @param shopId  ID cửa hàng
     * @param id      ID sản phẩm
     * @param request Chi tiết sản phẩm cần cập nhật
     * @return Phản hồi với sản phẩm đã cập nhật
     */
    @PutMapping("/{id}")
    @RequireRole({ShopRole.OWNER, ShopRole.STAFF})
    public ResponseEntity<ApiResponse<ProductResponse>> update(
            @RequestParam String userId,
            @RequestParam String shopId,
            @PathVariable String id,
            @Valid @RequestBody ProductRequest request) {
        ProductResponse response = productService.updateProduct(userId, shopId, id, request);
        return ResponseEntity.ok(ApiResponse.success(ApiCode.PRODUCT_UPDATED, response));
    }

    /**
     * Xóa sản phẩm (xóa mềm).
     *
     * @param shopId ID cửa hàng
     * @param id     ID sản phẩm
     * @return Phản hồi xác nhận xóa
     */
    @DeleteMapping("/{id}")
    @RequireRole(ShopRole.OWNER)
    public ResponseEntity<ApiResponse<Void>> delete(
            @RequestParam String shopId,
            @PathVariable String id) {
        productService.deleteProduct(shopId, id);
        return ResponseEntity.ok(ApiResponse.success(ApiCode.PRODUCT_DELETED, null));
    }

    /**
     * Lấy danh sách sản phẩm với phân trang.
     *
     * @param shopId   ID cửa hàng
     * @param pageable Thông tin phân trang
     * @return Danh sách sản phẩm
     */
    @GetMapping
    @RequireRole({ShopRole.OWNER, ShopRole.STAFF})
    public ResponseEntity<ApiResponse<Page<ProductResponse>>> getAll(
            @RequestParam String shopId,
            @PageableDefault(size = 20, sort = "createdAt", direction = Sort.Direction.DESC) Pageable pageable) {
        Page<ProductResponse> response = productService.getAllByShop(shopId, pageable);
        return ResponseEntity.ok(ApiResponse.success(ApiCode.PRODUCT_LIST, response));
    }

    /**
     * Lấy chi tiết sản phẩm.
     *
     * @param shopId ID cửa hàng
     * @param id     ID sản phẩm
     * @return Chi tiết sản phẩm
     */
    @GetMapping("/{id}")
    @RequireRole({ShopRole.OWNER, ShopRole.STAFF})
    public ResponseEntity<ApiResponse<ProductResponse>> getById(
            @RequestParam String shopId,
            @PathVariable String id) {
        ProductResponse response = productService.getProduct(shopId, id);
        return ResponseEntity.ok(ApiResponse.success(ApiCode.PRODUCT_FOUND, response));
    }
}

// File: main/java/com/example/sales/controller/product/ProductImportExportController.java
package com.example.sales.controller.product;

import com.example.sales.constant.ApiCode;
import com.example.sales.constant.ShopRole;
import com.example.sales.dto.ApiResponse;
import com.example.sales.security.RequireRole;
import com.example.sales.service.ExcelExportService;
import com.example.sales.service.ProductImportService;
import lombok.RequiredArgsConstructor;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import java.util.Map;

/**
 * Controller xử lý nhập/xuất sản phẩm (Excel, CSV).
 */
@RestController
@RequestMapping("/api/products/import-export")
@RequiredArgsConstructor
public class ProductImportExportController {
    private final ProductImportService productImportService;
    private final ExcelExportService excelExportService;

    /**
     * Nhập sản phẩm từ file Excel.
     *
     * @param shopId ID cửa hàng
     * @param file   File Excel chứa dữ liệu sản phẩm
     * @return Kết quả nhập
     */
    @PostMapping("/import")
    @RequireRole(ShopRole.OWNER)
    public ResponseEntity<ApiResponse<Map<String, Object>>> importExcel(
            @RequestParam String shopId,
            @RequestParam(required = false) String branchId,
            @RequestParam("file") MultipartFile file) {
        Map<String, Object> result = productImportService.importExcel(shopId, branchId, file);
        return ResponseEntity.ok(ApiResponse.success(ApiCode.PRODUCT_IMPORTED, result));
    }
}

// File: main/java/com/example/sales/controller/product/ProductStatusController.java
package com.example.sales.controller.product;
import com.example.sales.constant.ApiCode;
import com.example.sales.constant.ShopRole;
import com.example.sales.dto.ApiResponse;
import com.example.sales.dto.product.ProductResponse;
import com.example.sales.security.RequireRole;
import com.example.sales.service.ProductService;
import lombok.RequiredArgsConstructor;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

/**
 * Controller xử lý trạng thái sản phẩm (bật/tắt, tồn kho thấp).
 */
@RestController
@RequestMapping("/api/products/status")
@RequiredArgsConstructor
public class ProductStatusController {
    private final ProductService productService;

    /**
     * Bật/tắt trạng thái sản phẩm.
     *
     * @param shopId    ID cửa hàng
     * @param productId ID sản phẩm
     * @return Phản hồi với sản phẩm đã cập nhật
     */
    @PatchMapping("/{productId}/toggle")
    @RequireRole({ShopRole.OWNER, ShopRole.STAFF})
    public ResponseEntity<ApiResponse<ProductResponse>> toggleActive(
            @RequestParam String shopId,
            @PathVariable String productId) {
        ProductResponse response = productService.toggleActive(shopId, productId);
        return ResponseEntity.ok(ApiResponse.success(ApiCode.PRODUCT_STATUS_UPDATED, response));
    }

    /**
     * Lấy danh sách sản phẩm tồn kho thấp.
     *
     * @param shopId   ID cửa hàng
     * @param threshold Ngưỡng tồn kho thấp
     * @return Danh sách sản phẩm tồn kho thấp
     */
    @GetMapping("/low-stock")
    @RequireRole({ShopRole.OWNER, ShopRole.STAFF})
    public ResponseEntity<ApiResponse<List<ProductResponse>>> getLowStock(
            @RequestParam String shopId,
            @RequestParam(defaultValue = "10") int threshold) {
        List<ProductResponse> response = productService.getLowStockProducts(shopId, threshold);
        return ResponseEntity.ok(ApiResponse.success(ApiCode.PRODUCT_LOW_STOCK, response));
    }
}

// File: main/java/com/example/sales/service/ProductServiceImpl.java
package com.example.sales.service;

import com.example.sales.constant.ApiCode;
import com.example.sales.constant.ShopType;
import com.example.sales.dto.product.ProductRequest;
import com.example.sales.dto.product.ProductResponse;
import com.example.sales.exception.BusinessException;
import com.example.sales.model.Product;
import com.example.sales.model.Shop;
import com.example.sales.repository.ProductRepository;
import com.example.sales.repository.ShopRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import java.time.LocalDateTime;
import java.util.List;
import java.util.UUID;
import java.util.stream.Collectors;

/**
 * Triển khai dịch vụ quản lý sản phẩm.
 */
@Service
@RequiredArgsConstructor
public class ProductServiceImpl implements ProductService {
    private final ProductRepository productRepository;
    private final ShopRepository shopRepository;
    private final AuditLogService auditLogService;

    @Override
    public ProductResponse createProduct(String shopId, ProductRequest request) {
        // Kiểm tra sự tồn tại của cửa hàng
        Shop shop = shopRepository.findByIdAndDeletedFalse(shopId)
                .orElseThrow(() -> new BusinessException(ApiCode.SHOP_NOT_FOUND));

        // Tạo productCode nếu không được cung cấp
        String productCode = request.getSku() != null && !request.getSku().isBlank()
                ? request.getSku()
                : UUID.randomUUID().toString();

        // Tạo sản phẩm sử dụng builder pattern
        Product product = Product.builder()
                .shopId(shopId)
                .name(request.getName())
                .price(request.getPrice())
                .quantity(requiresInventory(shop.getType()) ? request.getQuantity() : 0)
                .category(request.getCategory())
                .sku(productCode)
                .imageUrl(request.getImageUrl())
                .description(request.getDescription())
                .active(true)
                .unit(request.getUnit())
                .build();

        product = productRepository.save(product);

        // Ghi log kiểm tra
        auditLogService.log(null, shopId, product.getId(), "PRODUCT", "CREATED",
                String.format("Tạo sản phẩm: %s (Mã: %s)", product.getName(), product.getSku()));

        return toResponse(product);
    }

    @Override
    public ProductResponse updateProduct(String userId, String shopId, String id, ProductRequest request) {
        Product product = productRepository.findByIdAndShopIdAndDeletedFalse(id, shopId)
                .orElseThrow(() -> new BusinessException(ApiCode.PRODUCT_NOT_FOUND));

        // Lưu các giá trị cũ để ghi log
        double oldPrice = product.getPrice();
        String oldCategory = product.getCategory();
        int oldQuantity = product.getQuantity();

        // Lấy thông tin cửa hàng để kiểm tra ShopType
        Shop shop = shopRepository.findByIdAndDeletedFalse(shopId)
                .orElseThrow(() -> new BusinessException(ApiCode.SHOP_NOT_FOUND));

        // Cập nhật các trường
        product.setName(request.getName());
        product.setPrice(request.getPrice());
        product.setQuantity(requiresInventory(shop.getType()) ? request.getQuantity() : 0);
        product.setCategory(request.getCategory());
        product.setSku(request.getSku());
        product.setImageUrl(request.getImageUrl());
        product.setDescription(request.getDescription());
        product.setUnit(request.getUnit());
        product.setUpdatedAt(LocalDateTime.now());

        product = productRepository.save(product);

        // Ghi log kiểm tra cho các thay đổi
        if (oldPrice != request.getPrice()) {
            auditLogService.log(userId, shopId, product.getId(), "PRODUCT", "PRICE_CHANGED",
                    String.format("Thay đổi giá từ %.2f → %.2f", oldPrice, request.getPrice()));
        }
        if (!oldCategory.equals(request.getCategory())) {
            auditLogService.log(userId, shopId, product.getId(), "PRODUCT", "CATEGORY_CHANGED",
                    String.format("Chuyển danh mục từ %s → %s", oldCategory, request.getCategory()));
        }
        if (oldQuantity != request.getQuantity()) {
            auditLogService.log(userId, shopId, product.getId(), "PRODUCT", "QUANTITY_CHANGED",
                    String.format("Thay đổi tồn kho từ %d → %d", oldQuantity, request.getQuantity()));
        }

        return toResponse(product);
    }

    @Override
    public void deleteProduct(String shopId, String id) {
        Product product = productRepository.findByIdAndShopIdAndDeletedFalse(id, shopId)
                .orElseThrow(() -> new BusinessException(ApiCode.PRODUCT_NOT_FOUND));
        product.setDeleted(true);
        product.setUpdatedAt(LocalDateTime.now());
        productRepository.save(product);

        // Ghi log kiểm tra
        auditLogService.log(null, shopId, product.getId(), "PRODUCT", "DELETED",
                String.format("Xoá sản phẩm: %s (Mã: %s)", product.getName(), product.getSku()));
    }

    @Override
    public ProductResponse getProduct(String shopId, String id) {
        Product product = productRepository.findByIdAndShopIdAndDeletedFalse(id, shopId)
                .orElseThrow(() -> new BusinessException(ApiCode.PRODUCT_NOT_FOUND));
        return toResponse(product);
    }

    @Override
    public Page<ProductResponse> getAllByShop(String shopId, Pageable pageable) {
        return productRepository.findByShopIdAndDeletedFalse(shopId, pageable)
                .map(this::toResponse);
    }

    @Override
    public ProductResponse toggleActive(String shopId, String productId) {
        Product product = productRepository.findByIdAndShopIdAndDeletedFalse(productId, shopId)
                .orElseThrow(() -> new BusinessException(ApiCode.PRODUCT_NOT_FOUND));
        product.setActive(!product.isActive());
        product.setUpdatedAt(LocalDateTime.now());
        product = productRepository.save(product);

        // Ghi log kiểm tra
        String action = product.isActive() ? "ACTIVATED" : "DEACTIVATED";
        auditLogService.log(null, shopId, product.getId(), "PRODUCT", action,
                String.format("%s sản phẩm: %s (Mã: %s)",
                        product.isActive() ? "Kích hoạt" : "Ngưng bán",
                        product.getName(), product.getSku()));

        return toResponse(product);
    }

    @Override
    public List<ProductResponse> getLowStockProducts(String shopId, int threshold) {
        // Kiểm tra loại cửa hàng
        Shop shop = shopRepository.findByIdAndDeletedFalse(shopId)
                .orElseThrow(() -> new BusinessException(ApiCode.SHOP_NOT_FOUND));

        if (!requiresInventory(shop.getType())) {
            return List.of();
        }

        return productRepository.findByShopIdAndQuantityLessThanAndDeletedFalse(shopId, threshold)
                .stream()
                .map(this::toResponse)
                .collect(Collectors.toList());
    }

    private ProductResponse toResponse(Product product) {
        return ProductResponse.builder()
                .id(product.getId())
                .name(product.getName())
                .price(product.getPrice())
                .quantity(product.getQuantity())
                .category(product.getCategory())
                .sku(product.getSku())
                .imageUrl(product.getImageUrl())
                .description(product.getDescription())
                .active(product.isActive())
                .createdAt(product.getCreatedAt())
                .updatedAt(product.getUpdatedAt())
                .unit(product.getUnit())
                .build();
    }

    private boolean requiresInventory(ShopType type) {
        return switch (type) {
            case GROCERY, CONVENIENCE, PHARMACY, RETAIL -> true;
            case RESTAURANT, CAFE, BAR, OTHER -> false;
        };
    }
}
[END]
