[START]
// File: src/main/java/com/example/sales/constant/ApiCode.java
package com.example.sales.constant;

public enum ApiCode {
    // Success
    SUCCESS("2000", "Operation successful"),
    PRODUCT_CREATED("2001", "Product created successfully"),
    USER_UPDATED("2002", "User updated successfully"),
    PASSWORD_CHANGED("2003", "Password changed successfully"),
    EMAIL_SENT("2004", "Email sent successfully"),

    // Validation & Client Errors
    VALIDATION_ERROR("4000", "Validation error"),
    UNAUTHORIZED("4001", "Unauthorized access"),
    ACCESS_DENIED("4002", "Access denied"),
    NOT_FOUND("4003", "Resource not found"),
    INVALID_TOKEN("4004", "Invalid token"),
    ACCOUNT_LOCKED("4005", "Account is locked"),
    REFRESH_TOKEN_EXPIRED("4006", "Refresh token expired"),
    REFRESH_TOKEN_INVALID("4007", "Invalid refresh token"),
    INCORRECT_PASSWORD("4008", "Incorrect password"),
    EMAIL_EXISTS("4009", "Email already exists"),
    EMAIL_NOT_VERIFIED("4010", "Email not verified"),
    ALREADY_VERIFIED("4011", "Email already verified"),
    TOKEN_EXPIRED("4012", "Token expired"),
    VALIDATION_FILE_ERROR("4013", "Invalid file format"),
    ORDER_ALREADY_PAID("4014", "Order already paid"),
    INVALID_STATUS_TRANSITION("4015", "Invalid status transition"),
    PRODUCT_OUT_OF_STOCK("4016", "Product out of stock"),
    DUPLICATE_DATA("4017", "Duplicate data"),
    CANNOT_DELETE_SELF("4018", "Cannot delete self"),
    SHOP_ALREADY_EXISTS("4019", "Shop already exists"),
    PLAN_UPGRADE_REQUIRED("4020", "Plan upgrade required"),

    // System Errors
    INTERNAL_ERROR("5000", "Internal server error"),
    FILE_UPLOAD_FAILED("5001", "File upload failed"),
    FILE_TYPE_NOT_ALLOWED("5002", "File type not allowed"),

    // Business Logic
    SHOP_REQUIRED("4100", "Shop is required"),
    ORDER_ALREADY_COMPLETED("4101", "Order already completed"),
    PRODUCT_UPDATED("4102", "Product updated successfully"),
    SHOP_NOT_FOUND("4103", "Shop not found"),
    TABLE_CREATED("4104", "Table created successfully"),
    TABLE_LIST("4105", "Table list retrieved"),
    TABLE_STATUS_UPDATED("4106", "Table status updated"),
    USER_INFO("4107", "User info retrieved"),
    USER_NOT_FOUND("4108", "User not found"),
    BRANCH_NOT_FOUND("4109", "Branch not found"),
    CUSTOMER_NOT_FOUND("4110", "Customer not found"),
    ORDER_NOT_FOUND("4111", "Order not found"),
    PRODUCT_NOT_FOUND("4112", "Product not found"),
    PROMOTION_NOT_FOUND("4113", "Promotion not found"),
    TABLE_NOT_FOUND("4114", "Table not found"),
    USER_DELETED("4115", "User deleted successfully"),
    ORDER_PAYMENT_CONFIRMED("4116", "Order payment confirmed"),
    ORDER_STATUS_UPDATED("4117", "Order status updated"),
    ORDER_LIST("4118", "Order list retrieved"),
    ORDER_CANCELLED("4119", "Order cancelled"),
    ORDER_CREATED("4120", "Order created successfully"),
    CUSTOMER_CREATED("4121", "Customer created successfully"),
    CUSTOMER_UPDATED("4122", "Customer updated successfully"),
    CUSTOMER_DELETED("4123", "Customer deleted successfully"),
    CUSTOMER_LIST("4124", "Customer list retrieved"),
    PRODUCT_DELETED("4125", "Product deleted successfully"),
    PRODUCT_LIST("4126", "Product list retrieved"),
    PRODUCT_FOUND("4127", "Product found"),
    PRODUCT_IMPORTED("4128", "Product imported successfully"),
    PRODUCT_STATUS_UPDATED("4129", "Product status updated successfully"),
    PRODUCT_LOW_STOCK("4130", "Low stock products retrieved"),
    PRODUCT_SEARCH_RESULTS("4131", "Product search results retrieved"),
    SHOP_NAME_EXISTS("4132", "Shop name already exists"),
    SHOP_INACTIVE("4133", "Shop is inactive"),
    INVALID_CAPACITY("4134", "Invalid capacity"),
    TABLE_NAME_EXISTS("4135", "Table name already exists"),
    TABLE_OCCUPIED("4136", "Table is occupied"),
    USER_ALREADY_IN_SHOP("4137", "User already in shop"),
    CANNOT_DELETE_ONLY_BRANCH("4138", "Cannot delete the only branch of the shop");

    private final String code;
    private final String message;

    ApiCode(String code, String message) {
        this.code = code;
        this.message = message;
    }

    public String getCode() {
        return code;
    }

    public String getMessage() {
        return message;
    }
}

// File: src/main/java/com/example/sales/constant/DiscountType.java
package com.example.sales.constant;

public enum DiscountType {
    PERCENT, // Giảm theo %
    AMOUNT   // Giảm cố định số tiền
}

// File: src/main/java/com/example/sales/constant/InventoryType.java
package com.example.sales.constant;

public enum InventoryType {
    IMPORT,
    EXPORT,
    ADJUSTMENT
}

// File: src/main/java/com/example/sales/constant/OrderStatus.java
package com.example.sales.constant;

public enum OrderStatus {
    PENDING,       // Mới tạo
    CONFIRMED,     // Đã xác nhận
    SHIPPING,      // Đang vận chuyển
    COMPLETED,     // Hoàn tất
    CANCELLED      // Đã huỷ
}

// File: src/main/java/com/example/sales/constant/ShopRole.java
package com.example.sales.constant;

public enum ShopRole {
    ADMIN,
    OWNER,
    MANAGER,
    STAFF,
    CASHIER
}

// File: src/main/java/com/example/sales/constant/ShopType.java
package com.example.sales.constant;

import lombok.Getter;

@Getter
public enum ShopType {
    RESTAURANT(false),
    CAFE(false),
    BAR(false),
    GROCERY(true),
    CONVENIENCE(true),
    PHARMACY(true),
    RETAIL(true),
    OTHER(false);

    private final boolean trackInventory;

    ShopType(boolean trackInventory) {
        this.trackInventory = trackInventory;
    }

}

// File: src/main/java/com/example/sales/constant/SubscriptionActionType.java
package com.example.sales.constant;

public enum SubscriptionActionType {
    UPGRADE,          // Người dùng nâng cấp gói
    DOWNGRADE,        // Người dùng chủ động hạ gói
    AUTO_DOWNGRADE,   // Hệ thống tự động hạ gói khi hết hạn
    TRIAL_EXPIRED     // Gói thử nghiệm kết thúc
}

// File: src/main/java/com/example/sales/constant/SubscriptionPlan.java
package com.example.sales.constant;

public enum SubscriptionPlan {
    FREE, PRO, ENTERPRISE
}

// File: src/main/java/com/example/sales/constant/TableStatus.java
package com.example.sales.constant;

public enum TableStatus {
    AVAILABLE,  // Trống
    OCCUPIED,   // Đang có khách
    CLOSED      // Không hoạt động / Khoá
}

// File: src/main/java/com/example/sales/constant/UserRole.java
package com.example.sales.constant;

public enum UserRole {
    ROLE_USER,
    ROLE_ADMIN
}

// File: src/main/java/com/example/sales/dto/branch/BranchRequest.java
package com.example.sales.dto.branch;

import jakarta.validation.constraints.NotBlank;
import lombok.Getter;
import lombok.Setter;

@Getter
@Setter
public class BranchRequest {

    @NotBlank(message = "Tên chi nhánh không được để trống")
    private String name;

    private String address;

    private String phone;

    private boolean active = true;
}

// File: src/main/java/com/example/sales/dto/branch/BranchResponse.java
package com.example.sales.dto.branch;

import lombok.Builder;
import lombok.Data;

@Data
@Builder
public class BranchResponse {
    private String id;
    private String name;
    private String address;
    private String phone;
    private boolean active;
    private String createdAt;
}

// File: src/main/java/com/example/sales/dto/customer/CustomerRequest.java
package com.example.sales.dto.customer;

import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.NotBlank;
import lombok.Data;

@Data
public class CustomerRequest {
    @NotBlank(message = "Tên khách hàng không được để trống")
    private String name;

    private String phone;

    @Email(message = "Email không hợp lệ")
    private String email;

    private String address;

    private String note;
    private String branchId; // Có thể null nếu không phân biệt chi nhánh
}

// File: src/main/java/com/example/sales/dto/customer/CustomerResponse.java
package com.example.sales.dto.customer;

import lombok.Builder;
import lombok.Data;

@Data
@Builder
public class CustomerResponse {
    private String id;
    private String name;
    private String phone;
    private String email;
    private String address;
    private String note;
}

// File: src/main/java/com/example/sales/dto/customer/CustomerSearchRequest.java
package com.example.sales.dto.customer;

import lombok.Data;

import java.time.LocalDate;

@Data
public class CustomerSearchRequest {
    private String keyword = "";
    private int page = 0;
    private int size = 20;
    private LocalDate fromDate;
    private LocalDate toDate;
    private String sortBy = "createdAt";
    private String sortDir = "desc";
}

// File: src/main/java/com/example/sales/dto/inventory/InventoryRequest.java
package com.example.sales.dto.inventory;

import com.example.sales.constant.InventoryType;
import jakarta.validation.constraints.Min;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import lombok.Data;

@Data
public class InventoryRequest {

    @NotBlank
    private String productId;

    private String branchId; // optional

    @NotNull
    private InventoryType type;

    @Min(1)
    private int quantity;

    private String note;
}

// File: src/main/java/com/example/sales/dto/order/OrderItemRequest.java
package com.example.sales.dto.order;

import jakarta.validation.constraints.Min;
import jakarta.validation.constraints.NotBlank;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@AllArgsConstructor
@NoArgsConstructor
@Data
public class OrderItemRequest {
    @NotBlank
    private String productId;

    @Min(1)
    private int quantity;

    @Min(0)
    private double price;
}

// File: src/main/java/com/example/sales/dto/order/OrderItemResponse.java
package com.example.sales.dto.order;
import lombok.Builder;
import lombok.Data;

@Data
@Builder
public class OrderItemResponse {
    private String productId;
    private String productName;
    private int quantity;
    private double price;
    private double priceAfterDiscount; // giá sau khi đã áp dụng khuyến mãi
    private String appliedPromotionId; // id khuyến mãi được áp dụng (nếu có)
}

// File: src/main/java/com/example/sales/dto/order/OrderRequest.java
package com.example.sales.dto.order;

import jakarta.validation.Valid;
import jakarta.validation.constraints.NotNull;
import lombok.Data;

import java.util.List;

@Data
public class OrderRequest {
    @NotNull
    @Valid
    private List<OrderItemRequest> items;

    private String tableId; // optional
    private String note;
    private String branchId;
}

// File: src/main/java/com/example/sales/dto/order/OrderResponse.java
package com.example.sales.dto.order;

import com.example.sales.constant.OrderStatus;
import lombok.Builder;
import lombok.Data;

import java.time.LocalDateTime;
import java.util.List;

@Data
@Builder
public class OrderResponse {
    private String id;
    private String tableId;
    private String note;
    private OrderStatus status;

    private boolean paid;
    private String paymentMethod;
    private String paymentId;
    private LocalDateTime paymentTime;

    private double totalAmount;
    private double totalPrice;

    private List<OrderItemResponse> items;
}

// File: src/main/java/com/example/sales/dto/order/OrderUpdateRequest.java
package com.example.sales.dto.order;
import lombok.Data;
import java.util.List;

@Data
public class OrderUpdateRequest {
    private String note;
    private String tableId;
    private List<OrderItemRequest> items;
}

// File: src/main/java/com/example/sales/dto/product/ProductRequest.java
package com.example.sales.dto.product;

import jakarta.validation.constraints.*;
import lombok.Getter;
import lombok.Setter;

/**
 * DTO yêu cầu tạo/cập nhật sản phẩm.
 */
@Getter
@Setter
public class ProductRequest {

    /**
     * Tên sản phẩm, không được để trống.
     */
    @NotBlank(message = "Tên sản phẩm không được để trống")
    @Size(max = 100, message = "Tên sản phẩm không được vượt quá 100 ký tự")
    private String name;

    /**
     * Giá sản phẩm, phải là số dương.
     */
    @NotNull(message = "Giá sản phẩm là bắt buộc")
    @Positive(message = "Giá sản phẩm phải lớn hơn 0")
    private Double price;

    /**
     * Số lượng tồn kho, phải là số không âm.
     */
    @NotNull(message = "Số lượng tồn kho là bắt buộc")
    @PositiveOrZero(message = "Số lượng tồn kho phải là số không âm")
    private Integer quantity;

    /**
     * Danh mục sản phẩm, không được để trống.
     */
    @NotBlank(message = "Danh mục sản phẩm không được để trống")
    @Size(max = 50, message = "Danh mục không được vượt quá 50 ký tự")
    private String category;

    /**
     * Mã sản phẩm, nếu có, phải tuân theo định dạng (ví dụ: SKU-123).
     */
    @Pattern(regexp = "^[A-Z0-9-]{0,20}$", message = "Mã sản phẩm không hợp lệ")
    private String sku;

    /**
     * URL hình ảnh sản phẩm, nếu có.
     */
    @Size(max = 255, message = "URL hình ảnh không được vượt quá 255 ký tự")
    private String imageUrl;

    /**
     * Mô tả sản phẩm, nếu có.
     */
    @Size(max = 500, message = "Mô tả không được vượt quá 500 ký tự")
    private String description;

    /**
     * Đơn vị sản phẩm (ví dụ: kg, cái), nếu có.
     */
    @Size(max = 20, message = "Đơn vị không được vượt quá 20 ký tự")
    private String unit;

    /**
     * Trạng thái sản phẩm (mặc định là true).
     */
    private boolean active = true;

    /**
     * Mã định danh sản phẩm, nếu có.
     */
    @Size(max = 50, message = "Mã định danh sản phẩm không được vượt quá 50 ký tự")
    private String productCode;

    /**
     * ID chi nhánh, có thể để null nếu không thuộc chi nhánh cụ thể.
     */
    @Size(max = 50, message = "ID chi nhánh không được vượt quá 50 ký tự")
    private String branchId;
}

// File: src/main/java/com/example/sales/dto/product/ProductResponse.java
package com.example.sales.dto.product;

import lombok.Builder;
import lombok.Data;

import java.time.LocalDateTime;

/**
 * DTO phản hồi thông tin sản phẩm.
 */
@Data
@Builder
public class ProductResponse {
    /**
     * ID sản phẩm.
     */
    private String id;

    /**
     * Tên sản phẩm.
     */
    private String name;

    /**
     * Giá sản phẩm.
     */
    private double price;

    /**
     * Số lượng tồn kho.
     */
    private int quantity;

    /**
     * Danh mục sản phẩm.
     */
    private String category;

    /**
     * Mã sản phẩm.
     */
    private String sku;

    /**
     * URL hình ảnh sản phẩm.
     */
    private String imageUrl;

    /**
     * Mô tả sản phẩm.
     */
    private String description;

    /**
     * Trạng thái sản phẩm (kích hoạt hay không).
     */
    private boolean active;

    /**
     * Đơn vị sản phẩm (ví dụ: kg, lít).
     */
    private String unit;

    /**
     * Mã định danh sản phẩm.
     */
    private String productCode;

    /**
     * ID cửa hàng sở hữu sản phẩm.
     */
    private String shopId;

    /**
     * Thời gian tạo sản phẩm.
     */
    private LocalDateTime createdAt;

    /**
     * Thời gian cập nhật sản phẩm.
     */
    private LocalDateTime updatedAt;
}

// File: src/main/java/com/example/sales/dto/product/ProductSearchRequest.java
package com.example.sales.dto.product;

import lombok.Data;

@Data
public class ProductSearchRequest {
    private String keyword = "";
    private String category = "";
    private Boolean active;
    private Double minPrice;
    private Double maxPrice;
    private int page = 0;
    private int size = 20;
    private String sortBy = "createdAt";
    private String sortDir = "desc";
    private String branchId; // nếu có chi nhánh, có thể để null nếu không có
}

// File: src/main/java/com/example/sales/dto/promotion/PromotionRequest.java
package com.example.sales.dto.promotion;

import com.example.sales.constant.DiscountType;
import jakarta.validation.constraints.*;
import lombok.Data;

import java.time.LocalDateTime;
import java.util.List;

@Data
public class PromotionRequest {

    @NotBlank
    private String name;

    @NotNull
    private DiscountType discountType;

    @Positive
    private double discountValue;

    private List<String> applicableProductIds;

    @NotNull
    private LocalDateTime startDate;

    @NotNull
    private LocalDateTime endDate;

    private boolean active = true;
    private String branchId;
}

// File: src/main/java/com/example/sales/dto/promotion/PromotionResponse.java
package com.example.sales.dto.promotion;

import com.example.sales.constant.DiscountType;
import lombok.Builder;
import lombok.Data;

import java.time.LocalDateTime;
import java.util.List;

@Data
@Builder
public class PromotionResponse {
    private String id;
    private String name;
    private DiscountType discountType;
    private double discountValue;
    private List<String> applicableProductIds;
    private LocalDateTime startDate;
    private LocalDateTime endDate;
    private boolean active;
}

// File: src/main/java/com/example/sales/dto/report/DailyReportResponse.java
package com.example.sales.dto.report;

import lombok.Builder;
import lombok.Data;

import java.time.LocalDate;

@Data
@Builder
public class DailyReportResponse {
    private LocalDate date;
    private long totalOrders;
    private long totalProductsSold;
    private double totalRevenue;
}

// File: src/main/java/com/example/sales/dto/report/ReportRequest.java
package com.example.sales.dto.report;

import com.example.sales.constant.OrderStatus;
import com.example.sales.validation.ValidDateRange;
import lombok.Data;

import java.time.LocalDate;

@Data
@ValidDateRange
public class ReportRequest {
    private LocalDate startDate;
    private LocalDate endDate;
    private OrderStatus status; // optional
}

// File: src/main/java/com/example/sales/dto/report/ReportResponse.java
package com.example.sales.dto.report;

import lombok.Builder;
import lombok.Data;

@Data
@Builder
public class ReportResponse {
    private long totalOrders;
    private long totalProductsSold;
    private double totalRevenue;
}

// File: src/main/java/com/example/sales/dto/shop/ShopAdminResponse.java
package com.example.sales.dto.shop;

import com.example.sales.constant.ShopType;
import com.example.sales.constant.SubscriptionPlan;
import lombok.Builder;
import lombok.Data;

import java.time.LocalDateTime;

@Data
@Builder
public class ShopAdminResponse {
    private String id;
    private String name;
    private ShopType type;
    private String address;
    private String phone;
    private String logoUrl;
    private boolean active;
    private SubscriptionPlan plan;
    private String currency;
    private String timezone;
    private String orderPrefix;
    private LocalDateTime planExpiry;
}

// File: src/main/java/com/example/sales/dto/shop/ShopRequest.java
package com.example.sales.dto.shop;

import com.example.sales.constant.ShopType;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Pattern;
import lombok.Getter;
import lombok.Setter;

@Getter
@Setter
public class ShopRequest {
    @NotBlank(message = "Tên cửa hàng không được để trống")
    private String name;

    @NotNull(message = "Loại cửa hàng là bắt buộc")
    private ShopType type;

    @Pattern(regexp = "^\\+?[1-9]\\d{1,14}$", message = "Số điện thoại không hợp lệ")
    private String phone;

    private String address;
}

// File: src/main/java/com/example/sales/dto/shop/ShopResponse.java
package com.example.sales.dto.shop;

import com.example.sales.constant.ShopType;
import com.example.sales.constant.SubscriptionPlan;
import lombok.Builder;
import lombok.Data;

@Data
@Builder
public class ShopResponse {
    private String id;
    private String name;
    private ShopType type;
    private String address;
    private String phone;
    private String logoUrl;
    private boolean active;
    private SubscriptionPlan plan;
    private String currency;
}

// File: src/main/java/com/example/sales/dto/shop/ShopSimpleResponse.java
package com.example.sales.dto.shop;

import com.example.sales.constant.ShopRole;
import com.example.sales.constant.ShopType;
import lombok.Builder;
import lombok.Data;

@Data
@Builder
public class ShopSimpleResponse {
    private String id;
    private String name;
    private ShopType type;
    private String logoUrl;
    private boolean active;
    private ShopRole role; // 👈 vai trò của user trong shop
}

// File: src/main/java/com/example/sales/dto/shopUser/ShopUserResponse.java
package com.example.sales.dto.shopUser;

import com.example.sales.constant.ShopRole;
import lombok.Builder;
import lombok.Data;

@Data
@Builder
public class ShopUserResponse {
    private String shopId;
    private String shopName;
    private ShopRole role;
}

// File: src/main/java/com/example/sales/dto/subscription/UpgradePlanRequest.java
package com.example.sales.dto.subscription;

import com.example.sales.constant.SubscriptionPlan;
import jakarta.validation.constraints.NotNull;
import lombok.Data;

@Data
public class UpgradePlanRequest {
    @NotNull
    private SubscriptionPlan targetPlan;
    private int months = 1; // số tháng đăng ký (default = 1)
}

// File: src/main/java/com/example/sales/dto/table/TableRequest.java
package com.example.sales.dto.table;

import com.example.sales.constant.TableStatus;
import jakarta.validation.constraints.NotBlank;
import lombok.Getter;
import lombok.Setter;

@Getter
@Setter
public class TableRequest {
    @NotBlank
    private String name;

    private TableStatus status = TableStatus.AVAILABLE;
    private String shopId;
    private Integer capacity;
    private String note;
    private String branchId; // Có thể null nếu không phân biệt chi nhánh
}

// File: src/main/java/com/example/sales/dto/table/TableResponse.java
package com.example.sales.dto.table;

import com.example.sales.constant.TableStatus;
import lombok.*;

@Getter
@Setter
@Builder
public class TableResponse {
    private String id;
    private String name;
    private TableStatus status;
    private String shopId;
    private String shopName;
    private Integer capacity;
    private String note;
    private String currentOrderId;
    private String branchId; // Có thể null nếu không phân biệt chi nhánh
}

// File: src/main/java/com/example/sales/dto/table/TableUpdateRequest.java
package com.example.sales.dto.table;

import com.example.sales.constant.TableStatus;
import jakarta.validation.constraints.Min;
import jakarta.validation.constraints.NotBlank;
import lombok.Data;

@Data
public class TableUpdateRequest {
    @NotBlank
    private String name;
    private TableStatus status;
    private String shopId;
    @Min(1)
    private Integer capacity;
    private String note;
    private String branchId;
}

// File: src/main/java/com/example/sales/dto/ApiResponseDto.java
package com.example.sales.dto;

import com.example.sales.constant.ApiCode;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;

import java.time.Instant;

/**
 * Generic response class for API responses, including success status, error code, message, data, and timestamp.
 */
@Getter
@NoArgsConstructor
@AllArgsConstructor
public class ApiResponseDto<T> {
    private boolean success;
    private String code;
    private String message;
    private T data;
    private String timestamp;

    /**
     * Creates a successful response with data.
     */
    public static <T> ApiResponseDto<T> success(ApiCode code, T data) {
        return new ApiResponseDto<>(true, code.getCode(), code.getMessage(), data, Instant.now().toString());
    }

    /**
     * Creates a successful response without data.
     */
    public static <T> ApiResponseDto<T> success(ApiCode code) {
        return new ApiResponseDto<>(true, code.getCode(), code.getMessage(), null, Instant.now().toString());
    }

    /**
     * Creates an error response without data.
     */
    public static <T> ApiResponseDto<T> error(ApiCode code) {
        return new ApiResponseDto<>(false, code.getCode(), code.getMessage(), null, Instant.now().toString());
    }

    /**
     * Creates an error response with custom message and data.
     */
    public static <T> ApiResponseDto<T> error(ApiCode code, String message, T data) {
        return new ApiResponseDto<>(false, code.getCode(), message, data, Instant.now().toString());
    }
}

// File: src/main/java/com/example/sales/dto/ChangePasswordRequest.java
package com.example.sales.dto;

import jakarta.validation.constraints.NotBlank;
import lombok.Data;

@Data
public class ChangePasswordRequest {

    @NotBlank
    private String currentPassword;

    @NotBlank
    private String newPassword;
}
// File: src/main/java/com/example/sales/dto/JwtResponse.java
package com.example.sales.dto;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@AllArgsConstructor
@NoArgsConstructor
public class JwtResponse {
    private String accessToken;
    private String refreshToken;
}

// File: src/main/java/com/example/sales/dto/LoginRequest.java
package com.example.sales.dto;

import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.NotBlank;
import lombok.Data;

@Data
public class LoginRequest {
    @Email
    private String email;

    @NotBlank
    private String password;
}

// File: src/main/java/com/example/sales/dto/RefreshTokenRequest.java
package com.example.sales.dto;

import lombok.Data;

@Data
public class RefreshTokenRequest {
    private String refreshToken;
}

// File: src/main/java/com/example/sales/dto/RegisterRequest.java
package com.example.sales.dto;

import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.Size;
import lombok.Data;

@Data
public class RegisterRequest {
    @Email
    private String email;

    @Size(min = 6, message = "Mật khẩu phải từ 6 ký tự")
    private String password;
}

// File: src/main/java/com/example/sales/dto/SalesReportDto.java
package com.example.sales.dto;

import lombok.AllArgsConstructor;
import lombok.Data;

import java.time.LocalDate;

@Data
@AllArgsConstructor
public class SalesReportDto {
    private LocalDate date;
    private long totalOrders;
    private double totalAmount;
}

// File: src/main/java/com/example/sales/dto/UpdateProfileRequest.java
package com.example.sales.dto;

import lombok.Data;

@Data
public class UpdateProfileRequest {
    private String fullName;
    private String phone;
    private String businessType;
}

// File: src/main/java/com/example/sales/exception/BusinessException.java
package com.example.sales.exception;

import com.example.sales.constant.ApiCode;
import lombok.Getter;

@Getter
public class BusinessException extends RuntimeException {
    private final ApiCode error;

    public BusinessException(ApiCode error) {
        super(error.name());
        this.error = error;
    }
}

// File: src/main/java/com/example/sales/exception/GlobalExceptionHandler.java
package com.example.sales.exception;

import com.example.sales.constant.ApiCode;
import com.example.sales.dto.ApiResponseDto;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.http.converter.HttpMessageNotReadableException;
import org.springframework.security.access.AccessDeniedException;
import org.springframework.validation.FieldError;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.RestControllerAdvice;
import org.springframework.web.context.request.WebRequest;

import java.util.HashMap;
import java.util.Map;

@RestControllerAdvice
@Slf4j
public class GlobalExceptionHandler {

    /**
     * Xử lý lỗi validation cho các DTO
     */
    @ExceptionHandler(MethodArgumentNotValidException.class)
    public ResponseEntity<ApiResponseDto<Map<String, String>>> handleValidationExceptions(
            MethodArgumentNotValidException ex, WebRequest request) {
        Map<String, String> errors = new HashMap<>();
        for (FieldError error : ex.getBindingResult().getFieldErrors()) {
            errors.put(error.getField(), error.getDefaultMessage());
        }
        log.warn("Validation error at {}: {}", request.getDescription(false), errors);
        return ResponseEntity
                .status(HttpStatus.BAD_REQUEST)
                .body(ApiResponseDto.error(ApiCode.VALIDATION_ERROR, ApiCode.VALIDATION_ERROR.getMessage(), errors));
    }

    /**
     * Xử lý lỗi khi người dùng không có quyền truy cập
     */
    @ExceptionHandler(AccessDeniedException.class)
    public ResponseEntity<ApiResponseDto<String>> handleAccessDeniedException(
            AccessDeniedException ex, WebRequest request) {
        log.warn("Access denied at {}: {}", request.getDescription(false), ex.getMessage());
        return ResponseEntity
                .status(HttpStatus.FORBIDDEN)
                .body(ApiResponseDto.error(ApiCode.ACCESS_DENIED, ApiCode.ACCESS_DENIED.getMessage(), ex.getMessage()));
    }

    /**
     * Xử lý lỗi kinh doanh
     */
    @ExceptionHandler(BusinessException.class)
    public ResponseEntity<ApiResponseDto<String>> handleBusinessException(
            BusinessException ex, WebRequest request) {
        log.error("Business error at {}: {} - {}",
                request.getDescription(false), ex.getError().getCode(), ex.getError().getMessage());
        return ResponseEntity
                .status(getHttpStatus(ex.getError()))
                .body(ApiResponseDto.error(ex.getError(), ex.getError().getMessage(), null));
    }

    /**
     * Xử lý các lỗi chung (fallback)
     */
    @ExceptionHandler(Exception.class)
    public ResponseEntity<ApiResponseDto<String>> handleAllExceptions(
            Exception ex, WebRequest request) {
        request.getRemoteUser();
        log.error("Internal server error at {} for user {} (requestId: {}): {}",
                request.getDescription(false),
                request.getRemoteUser(),
                request.getHeader("X-Request-ID"),
                ex.getMessage(), ex);
        return ResponseEntity
                .status(HttpStatus.INTERNAL_SERVER_ERROR)
                .body(ApiResponseDto.error(ApiCode.INTERNAL_ERROR, ApiCode.INTERNAL_ERROR.getMessage(), ex.getMessage()));
    }

    @ExceptionHandler(IllegalArgumentException.class)
    public ResponseEntity<ApiResponseDto<String>> handleIllegalArgumentException(
            IllegalArgumentException ex, WebRequest request) {
        log.warn("Invalid argument at {}: {}", request.getDescription(false), ex.getMessage());
        return ResponseEntity
                .status(HttpStatus.BAD_REQUEST)
                .body(ApiResponseDto.error(ApiCode.VALIDATION_ERROR, ApiCode.VALIDATION_ERROR.getMessage(), ex.getMessage()));
    }

    @ExceptionHandler(HttpMessageNotReadableException.class)
    public ResponseEntity<ApiResponseDto<String>> handleHttpMessageNotReadableException(
            HttpMessageNotReadableException ex, WebRequest request) {
        log.warn("Invalid JSON at {}: {}", request.getDescription(false), ex.getMessage());
        return ResponseEntity
                .status(HttpStatus.BAD_REQUEST)
                .body(ApiResponseDto.error(ApiCode.VALIDATION_ERROR, ApiCode.VALIDATION_ERROR.getMessage(), ex.getMessage()));
    }

    /**
     * Ánh xạ ApiCode sang mã trạng thái HTTP
     */
    private HttpStatus getHttpStatus(ApiCode errorCode) {
        return switch (errorCode) {
            case UNAUTHORIZED -> HttpStatus.UNAUTHORIZED;
            case ACCESS_DENIED -> HttpStatus.FORBIDDEN;
            case NOT_FOUND, USER_NOT_FOUND, SHOP_NOT_FOUND, PRODUCT_NOT_FOUND, ORDER_NOT_FOUND,
                    TABLE_NOT_FOUND, BRANCH_NOT_FOUND, CUSTOMER_NOT_FOUND, PROMOTION_NOT_FOUND ->
                    HttpStatus.NOT_FOUND;
            case VALIDATION_ERROR, INVALID_TOKEN, ACCOUNT_LOCKED, REFRESH_TOKEN_EXPIRED,
                    REFRESH_TOKEN_INVALID, INCORRECT_PASSWORD, VALIDATION_FILE_ERROR,
                    PLAN_UPGRADE_REQUIRED, ORDER_ALREADY_PAID, INVALID_STATUS_TRANSITION,
                    PRODUCT_OUT_OF_STOCK, DUPLICATE_DATA, CANNOT_DELETE_SELF, SHOP_ALREADY_EXISTS,
                    EMAIL_EXISTS, ALREADY_VERIFIED, TOKEN_EXPIRED, EMAIL_NOT_VERIFIED ->
                    HttpStatus.BAD_REQUEST;
            case INTERNAL_ERROR, FILE_UPLOAD_FAILED, FILE_TYPE_NOT_ALLOWED ->
                    HttpStatus.INTERNAL_SERVER_ERROR;
            default -> HttpStatus.OK;
        };
    }
}

// File: src/main/java/com/example/sales/exception/ResourceNotFoundException.java
package com.example.sales.exception;

import com.example.sales.constant.ApiCode;
import lombok.Getter;

@Getter
public class ResourceNotFoundException extends RuntimeException {
    private final ApiCode error;

    public ResourceNotFoundException(ApiCode error) {
        super(error.name());
        this.error = error;
    }
}

// File: src/main/java/com/example/sales/export/GenericExcelExporter.java
package com.example.sales.export;

import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import java.io.*;
import java.util.List;
import java.util.function.Function;

public class GenericExcelExporter<T> {

    public InputStream export(String sheetName, List<String> headers, List<T> data, Function<T, List<String>> mapper) throws IOException {
        try (Workbook workbook = new XSSFWorkbook()) {
            Sheet sheet = workbook.createSheet(sheetName);

            // Header row
            Row headerRow = sheet.createRow(0);
            CellStyle headerStyle = createHeaderStyle(workbook);
            for (int i = 0; i < headers.size(); i++) {
                Cell cell = headerRow.createCell(i);
                cell.setCellValue(headers.get(i));
                cell.setCellStyle(headerStyle);
            }

            // Data rows
            int rowNum = 1;
            for (T item : data) {
                Row row = sheet.createRow(rowNum++);
                List<String> values = mapper.apply(item);
                for (int i = 0; i < values.size(); i++) {
                    row.createCell(i).setCellValue(values.get(i));
                }
            }

            // Auto-size columns
            for (int i = 0; i < headers.size(); i++) {
                sheet.autoSizeColumn(i);
            }

            ByteArrayOutputStream out = new ByteArrayOutputStream();
            workbook.write(out);
            return new ByteArrayInputStream(out.toByteArray());
        }
    }

    private CellStyle createHeaderStyle(Workbook wb) {
        CellStyle style = wb.createCellStyle();
        Font font = wb.createFont();
        font.setBold(true);
        style.setFont(font);
        return style;
    }
}

// File: src/main/java/com/example/sales/job/ImageCleanupJob.java
package com.example.sales.job;

import lombok.extern.slf4j.Slf4j;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;

import java.io.File;
import java.time.Instant;
import java.time.temporal.ChronoUnit;

@Slf4j
@Component
public class ImageCleanupJob {

    private static final String TEMP_FOLDER = "uploads/temp";
    private static final long EXPIRE_MINUTES = 30;

    @Scheduled(fixedRate = 15 * 60 * 1000) // mỗi 15 phút
    public void cleanUpTempImages() {
        File dir = new File(TEMP_FOLDER);
        if (!dir.exists() || !dir.isDirectory()) return;

        File[] files = dir.listFiles();
        if (files == null) return;

        Instant now = Instant.now();

        for (File file : files) {
            if (file.isFile()) {
                long lastModified = file.lastModified();
                Instant modifiedTime = Instant.ofEpochMilli(lastModified);
                if (modifiedTime.isBefore(now.minus(EXPIRE_MINUTES, ChronoUnit.MINUTES))) {
                    boolean deleted = file.delete();
                    log.info("Deleted temp image {}: {}", file.getName(), deleted);
                }
            }
        }
    }
}

// File: src/main/java/com/example/sales/scheduler/PlanExpiryScheduler.java
package com.example.sales.scheduler;

import com.example.sales.constant.SubscriptionActionType;
import com.example.sales.constant.SubscriptionPlan;
import com.example.sales.model.Shop;
import com.example.sales.model.SubscriptionHistory;
import com.example.sales.model.User;
import com.example.sales.repository.ShopRepository;
import com.example.sales.repository.SubscriptionHistoryRepository;
import com.example.sales.repository.UserRepository;
import com.example.sales.service.MailService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Map;

@Component
@RequiredArgsConstructor
@Slf4j
public class PlanExpiryScheduler {

    private final ShopRepository shopRepository;
    private final SubscriptionHistoryRepository historyRepository;
    private final MailService emailService; // Giả sử bạn có một service gửi email
    private final UserRepository userRepository; // Giả sử bạn có repository để lấy thông tin người dùng

    // Chạy mỗi ngày lúc 01:00 sáng
    @Scheduled(cron = "0 0 1 * * *")
    public void downgradeExpiredPlans() {
        log.info("🔄 Kiểm tra gói đã hết hạn...");

        List<Shop> expiredShops = shopRepository.findByPlanExpiryBeforeAndPlanNot(LocalDateTime.now(), SubscriptionPlan.FREE);

        for (Shop shop : expiredShops) {
            SubscriptionPlan oldPlan = shop.getPlan();
            log.info("⚠️ Shop {} đã hết hạn gói {} → hạ về FREE", shop.getId(), shop.getPlan());
            shop.setPlan(SubscriptionPlan.FREE);
            shop.setPlanExpiry(null); // hoặc giữ nguyên nếu muốn log

            // Ghi lịch sử
            SubscriptionHistory history = SubscriptionHistory.builder()
                    .shopId(shop.getId())
                    .userId(shop.getOwnerId())
                    .oldPlan(oldPlan)
                    .newPlan(SubscriptionPlan.FREE)
                    .durationMonths(0)
                    .paymentMethod("AUTO")
                    .actionType(SubscriptionActionType.AUTO_DOWNGRADE)
                    .build();

            historyRepository.save(history);

            User owner = userRepository.findById(shop.getOwnerId()).orElse(null);
            if (owner != null && owner.getEmail() != null) {
                Map<String, Object> model = Map.of(
                        "fullName", owner.getFullName(),
                        "oldPlan", oldPlan.name(),
                        "shopName", shop.getName()
                );

                emailService.sendHtmlTemplate(
                        owner.getEmail(),
                        "Gói dịch vụ của bạn đã hết hạn",
                        "emails/plan-downgraded",
                        model
                );
            }
        }

        shopRepository.saveAll(expiredShops);
    }
}

// File: src/main/java/com/example/sales/scheduler/PlanReminderScheduler.java
package com.example.sales.scheduler;

import com.example.sales.model.Shop;
import com.example.sales.model.User;
import com.example.sales.repository.ShopRepository;
import com.example.sales.repository.UserRepository;
import com.example.sales.service.MailService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;

import java.time.LocalDateTime;
import java.time.temporal.ChronoUnit;
import java.util.List;
import java.util.Map;

@Component
@RequiredArgsConstructor
@Slf4j
public class PlanReminderScheduler {

    private final ShopRepository shopRepository;
    private final UserRepository userRepository;
    private final MailService mailService;

    // Chạy mỗi ngày lúc 7h sáng
    @Scheduled(cron = "0 0 7 * * *")
    public void remindExpiringPlans() {
        LocalDateTime targetDate = LocalDateTime.now().plusDays(3).truncatedTo(ChronoUnit.DAYS);

        List<Shop> shops = shopRepository.findByPlanExpiryBetween(
                targetDate,
                targetDate.plusDays(1)
        );

        for (Shop shop : shops) {
            User owner = userRepository.findById(shop.getOwnerId()).orElse(null);
            if (owner == null || owner.getEmail() == null) continue;

            Map<String, Object> model = Map.of(
                    "fullName", owner.getFullName(),
                    "shopName", shop.getName(),
                    "expiryDate", shop.getPlanExpiry().toLocalDate(),
                    "currentPlan", shop.getPlan().name()
            );

            mailService.sendHtmlTemplate(
                    owner.getEmail(),
                    "⏳ Gói " + shop.getPlan() + " sắp hết hạn",
                    "emails/plan-expiry-reminder",
                    model
            );

            log.info("📧 Đã gửi email nhắc hạn cho shop {}", shop.getName());
        }
    }
}
[END]