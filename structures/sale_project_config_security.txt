[START]
// File: src/main/java/com/example/sales/config/AuditorAwareImpl.java
package com.example.sales.config;

import com.example.sales.security.CustomUserDetails;
import org.springframework.data.domain.AuditorAware;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Component;

import java.util.Optional;

@Component("auditorAware")
public class AuditorAwareImpl implements AuditorAware<String> {

    @Override
    public Optional<String> getCurrentAuditor() {
        Authentication auth = SecurityContextHolder.getContext().getAuthentication();

        if (auth != null && auth.isAuthenticated()
                && auth.getPrincipal() instanceof CustomUserDetails user) {
            return Optional.of(user.getId());
        }

        return Optional.empty();
    }
}

// File: src/main/java/com/example/sales/config/SecurityConfig.java
package com.example.sales.config;

import com.example.sales.security.CustomUserDetailsService;
import com.example.sales.security.JwtAuthenticationFilter;
import lombok.RequiredArgsConstructor;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;
import org.springframework.web.cors.CorsConfiguration;
import org.springframework.web.cors.CorsConfigurationSource;
import org.springframework.web.cors.UrlBasedCorsConfigurationSource;

import java.util.List;

@Configuration
@RequiredArgsConstructor
public class SecurityConfig {

    private final JwtAuthenticationFilter jwtAuthenticationFilter;
    private final CustomUserDetailsService userDetailsService;

    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        http
                .cors() // Kích hoạt CORS
                .and()
                .csrf(AbstractHttpConfigurer::disable) // Vô hiệu hóa CSRF
                .sessionManagement(sm -> sm.sessionCreationPolicy(SessionCreationPolicy.STATELESS))
                .authorizeHttpRequests(auth -> auth
                        .requestMatchers(
                                "/v3/api-docs/**", "/swagger-ui/**", "/swagger-ui.html"
                        ).permitAll()
                        .requestMatchers("/api/auth/**").permitAll() // Allow unauthenticated access
                        .requestMatchers("/api/webhook/**").permitAll()
                        .requestMatchers("/api/admin/**").hasRole("ADMIN")
                        .anyRequest().authenticated()
                )
                .addFilterBefore(jwtAuthenticationFilter, UsernamePasswordAuthenticationFilter.class);

        return http.build();
    }


    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }

    @Bean
    public AuthenticationManager authenticationManager(HttpSecurity http) throws Exception {
        DaoAuthenticationProvider provider = new DaoAuthenticationProvider();
        provider.setUserDetailsService(userDetailsService);
        provider.setPasswordEncoder(passwordEncoder());

        AuthenticationManagerBuilder builder = http.getSharedObject(AuthenticationManagerBuilder.class);
        builder.authenticationProvider(provider);

        return builder.build();
    }

    @Bean
    public CorsConfigurationSource corsConfigurationSource() {
        CorsConfiguration config = new CorsConfiguration();
        config.setAllowedOrigins(List.of("http://localhost:5173")); // FE origin
        config.setAllowedMethods(List.of("GET", "POST", "PUT", "DELETE", "OPTIONS"));
        config.setAllowedHeaders(List.of("*"));
        config.setAllowCredentials(true); // nếu gửi cookie / auth

        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
        source.registerCorsConfiguration("/**", config);
        return source;
    }
}

// File: src/main/java/com/example/sales/config/SwaggerConfig.java
package com.example.sales.config;

import io.swagger.v3.oas.models.OpenAPI;
import io.swagger.v3.oas.models.info.Info;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class SwaggerConfig {

    @Bean
    public OpenAPI customOpenAPI() {
        return new OpenAPI()
                .info(new Info()
                        .title("Sales Management API")
                        .version("1.0")
                        .description("API cho hệ thống quản lý bán hàng"));
    }
}

// File: src/main/java/com/example/sales/config/WebConfig.java
package com.example.sales.config;

import com.example.sales.security.PlanInterceptor;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.MessageSource;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.support.ReloadableResourceBundleMessageSource;
import org.springframework.web.servlet.config.annotation.InterceptorRegistry;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;
import org.springframework.web.servlet.i18n.AcceptHeaderLocaleResolver;

import java.util.Locale;

@Configuration
public class WebConfig implements WebMvcConfigurer {

    @Autowired
    private PlanInterceptor planInterceptor;

    @Bean
    public AcceptHeaderLocaleResolver localeResolver() {
        AcceptHeaderLocaleResolver resolver = new AcceptHeaderLocaleResolver();
        resolver.setDefaultLocale(Locale.ENGLISH);
        return resolver;
    }

    @Bean
    public MessageSource messageSource() {
        ReloadableResourceBundleMessageSource ms = new ReloadableResourceBundleMessageSource();
        ms.setBasename("classpath:messages");
        ms.setDefaultEncoding("UTF-8");
        return ms;
    }

    @Override
    public void addInterceptors(InterceptorRegistry registry) {
        registry.addInterceptor(planInterceptor)
                .addPathPatterns("/api/**"); // áp dụng cho mọi API
    }
}

// File: src/main/java/com/example/sales/security/CustomUserDetails.java
package com.example.sales.security;

import com.example.sales.constant.UserRole;
import lombok.AllArgsConstructor;
import lombok.Getter;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;

import java.util.Collection;

@Getter
@AllArgsConstructor
public class CustomUserDetails implements UserDetails {

    private final String id;
    private final String email;
    private final String password;
    private final UserRole role;
    private final Collection<? extends GrantedAuthority> authorities;

    @Override public String getUsername() { return email; }
    @Override public boolean isAccountNonExpired() { return true; }
    @Override public boolean isAccountNonLocked() { return true; }
    @Override public boolean isCredentialsNonExpired() { return true; }
    @Override public boolean isEnabled() { return true; }

}

// File: src/main/java/com/example/sales/security/CustomUserDetailsService.java
package com.example.sales.security;

import com.example.sales.model.User;
import com.example.sales.repository.UserRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
@RequiredArgsConstructor
public class CustomUserDetailsService implements UserDetailsService {

    private final UserRepository userRepository;

    @Override
    public UserDetails loadUserByUsername(String email) throws UsernameNotFoundException {
        User user = userRepository.findByEmailAndDeletedFalse(email)
                .orElseThrow(() -> new UsernameNotFoundException("User not found"));
        return new CustomUserDetails(
                user.getId(),
                user.getEmail(),
                user.getPassword(), // ✅ THÊM FIELD PASSWORD
                user.getRole(),
                List.of(new SimpleGrantedAuthority("ROLE_" + user.getRole()))
        );
    }
}

// File: src/main/java/com/example/sales/security/JwtAuthenticationFilter.java
package com.example.sales.security;

import com.example.sales.constant.UserRole;
import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Component;
import org.springframework.web.filter.OncePerRequestFilter;

import java.io.IOException;
import java.util.List;

@Slf4j
@Component
@RequiredArgsConstructor
public class JwtAuthenticationFilter extends OncePerRequestFilter {

    private final JwtUtil jwtUtil;

    @Override
    protected void doFilterInternal(HttpServletRequest request,
                                    HttpServletResponse response,
                                    FilterChain filterChain)
            throws ServletException, IOException {

        if ("OPTIONS".equalsIgnoreCase(request.getMethod())) {
            response.setStatus(HttpServletResponse.SC_OK);
            return;
        }

        String authHeader = request.getHeader("Authorization");
        if (authHeader == null || !authHeader.startsWith("Bearer ")) {
            filterChain.doFilter(request, response);
            return;
        }

        String token = authHeader.substring(7);
        if (!jwtUtil.isTokenValid(token)) {
            log.warn("JWT không hợp lệ hoặc hết hạn: {}", token);
            filterChain.doFilter(request, response);
            return;
        }

        if (SecurityContextHolder.getContext().getAuthentication() == null) {
            String userId = jwtUtil.extractUserId(token);
            String email = jwtUtil.extractEmail(token);
            String role = jwtUtil.extractRole(token);

            CustomUserDetails userDetails = new CustomUserDetails(
                    userId,
                    email,
                    null,
                    UserRole.valueOf(role),
                    List.of(new SimpleGrantedAuthority("ROLE_" + role))
            );
            UsernamePasswordAuthenticationToken authToken =
                    new UsernamePasswordAuthenticationToken(userDetails, null, userDetails.getAuthorities());
            authToken.setDetails(userDetails);

            SecurityContextHolder.getContext().setAuthentication(authToken);
            log.debug("JWT hợp lệ. Gán userId = {}, role = {}", userId, role);
        }

        filterChain.doFilter(request, response);
    }
}

// File: src/main/java/com/example/sales/security/JwtUtil.java
package com.example.sales.security;

import com.example.sales.model.User;
import io.jsonwebtoken.*;
import io.jsonwebtoken.security.Keys;
import jakarta.annotation.PostConstruct;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;

import java.nio.charset.StandardCharsets;
import java.security.Key;
import java.util.Date;

@Component
public class JwtUtil {

    @Value("${app.jwt.secret}")
    private String jwtSecret;

    private Key key;

    private static final long EXPIRATION_TIME = 1000 * 60 * 60 * 24; // 24h

    @PostConstruct
    public void init() {
        if (jwtSecret == null || jwtSecret.isBlank()) {
            throw new IllegalStateException("❌ JWT secret is missing. Please define 'app.jwt.secret' in application.properties.");
        }
        this.key = Keys.hmacShaKeyFor(jwtSecret.getBytes(StandardCharsets.UTF_8));
    }

    public String generateToken(User user) {
        return Jwts.builder()
                .setSubject(user.getId())
                .claim("email", user.getEmail())
                .claim("businessType", user.getBusinessType())
                .claim("role", user.getRole().name())
                .setIssuedAt(new Date())
                .setExpiration(new Date(System.currentTimeMillis() + EXPIRATION_TIME))
                .signWith(key, SignatureAlgorithm.HS256)
                .compact();
    }

    public String extractUserId(String token) {
        return getClaims(token).getSubject();
    }

    public String extractRole(String token) {
        return getClaims(token).get("role", String.class);
    }

    public String extractEmail(String token) {
        return getClaims(token).get("email", String.class);
    }

    public boolean isTokenValid(String token) {
        try {
            getClaims(token);
            return true;
        } catch (JwtException e) {
            return false;
        }
    }

    private Claims getClaims(String token) {
        return Jwts.parserBuilder()
                .setSigningKey(key)
                .build()
                .parseClaimsJws(token)
                .getBody();
    }
}

// File: src/main/java/com/example/sales/security/PermissionChecker.java
package com.example.sales.security;

import com.example.sales.constant.ShopRole;
import com.example.sales.repository.BranchRepository;
import com.example.sales.repository.ShopUserRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Component;

import java.util.Set;

@Component
@RequiredArgsConstructor
public class PermissionChecker {

    private final ShopUserRepository shopUserRepository;
    private final BranchRepository branchRepository;

    public boolean isOwner(String shopId, String userId) {
        return hasRole(shopId, userId, ShopRole.OWNER);
    }

    public boolean isStaff(String shopId, String userId) {
        return hasRole(shopId, userId, ShopRole.STAFF);
    }

    public boolean isOwnerOrStaff(String shopId, String userId) {
        return hasRole(shopId, userId, ShopRole.OWNER, ShopRole.STAFF);
    }

    public boolean isAdmin(String shopId, String userId) {
        return hasRole(shopId, userId, ShopRole.ADMIN);
    }

    public boolean hasRole(String shopId, String userId, ShopRole... roles) {
        Set<ShopRole> allowed = Set.of(roles);
        return shopUserRepository.findByShopIdAndUserIdAndDeletedFalse(shopId, userId)
                .map(user -> allowed.contains(user.getRole()))
                .orElse(false);
    }
    public boolean hasBranchRole(String branchId, String userId, ShopRole... roles) {
        return branchRepository.findByIdAndDeletedFalse(branchId)
                .map(branch -> hasRole(branch.getShopId(), userId, roles))
                .orElse(false);
    }
}

// File: src/main/java/com/example/sales/security/PlanInterceptor.java
package com.example.sales.security;

import com.example.sales.constant.ApiCode;
import com.example.sales.constant.SubscriptionPlan;
import com.example.sales.exception.BusinessException;
import com.example.sales.model.Shop;
import com.example.sales.service.ShopService;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Component;
import org.springframework.web.method.HandlerMethod;
import org.springframework.web.servlet.HandlerInterceptor;

import java.util.Arrays;

@Component
@RequiredArgsConstructor
public class PlanInterceptor implements HandlerInterceptor {

    private final ShopService shopService;

    @Override
    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) {
        if (!(handler instanceof HandlerMethod method)) return true;

        RequirePlan annotation = method.getMethodAnnotation(RequirePlan.class);
        if (annotation == null) return true;

        String shopId = request.getParameter("shopId");
        if (shopId == null || shopId.isBlank()) {
            throw new BusinessException(ApiCode.VALIDATION_ERROR); // hoặc custom lỗi
        }

        Shop shop = shopService.getShopById(shopId); // bạn cần viết hàm này
        SubscriptionPlan currentPlan = shop.getPlan();

        boolean allowed = Arrays.stream(annotation.value())
                .anyMatch(p -> currentPlan.ordinal() >= p.ordinal());

        if (!allowed) {
            throw new BusinessException(ApiCode.PLAN_UPGRADE_REQUIRED); // hoặc tạo code riêng như `PLAN_UPGRADE_REQUIRED`
        }

        return true;
    }
}

// File: src/main/java/com/example/sales/security/RequireBranchRole.java
package com.example.sales.security;

import com.example.sales.constant.ShopRole;

import java.lang.annotation.*;

@Target(ElementType.METHOD)
@Retention(RetentionPolicy.RUNTIME)
@Documented
public @interface RequireBranchRole {
    ShopRole[] value();
}

// File: src/main/java/com/example/sales/security/RequireBranchRoleAspect.java
package com.example.sales.security;

import com.example.sales.constant.ApiCode;
import com.example.sales.constant.ShopRole;
import com.example.sales.exception.BusinessException;
import com.example.sales.model.User;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.aspectj.lang.JoinPoint;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Before;
import org.aspectj.lang.reflect.MethodSignature;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.stereotype.Component;

import java.lang.annotation.Annotation;
import java.lang.reflect.Method;
import java.util.Arrays;

@Aspect
@Component
@RequiredArgsConstructor
@Slf4j
public class RequireBranchRoleAspect {

    private final PermissionChecker permissionChecker;

    @Before("@annotation(com.example.sales.security.RequireBranchRole)")
    public void checkBranchPermission(JoinPoint joinPoint) {
        Method method = ((MethodSignature) joinPoint.getSignature()).getMethod();
        RequireBranchRole annotation = method.getAnnotation(RequireBranchRole.class);
        ShopRole[] roles = annotation.value();

        User user = null;
        String branchId = null;

        Object[] args = joinPoint.getArgs();
        Annotation[][] paramAnnotations = method.getParameterAnnotations();

        for (int i = 0; i < args.length; i++) {
            if (user == null && Arrays.stream(paramAnnotations[i])
                    .anyMatch(a -> a.annotationType() == AuthenticationPrincipal.class)) {
                user = (User) args[i];
            }
            if (branchId == null && args[i] instanceof String str && str.startsWith("branch_")) {
                branchId = str;
            }
        }

        if (user == null || branchId == null) {
            log.warn("Thiếu user hoặc branchId khi kiểm tra quyền cho method: {}", method.getName());
            throw new BusinessException(ApiCode.UNAUTHORIZED);
        }

        boolean allowed = permissionChecker.hasBranchRole(branchId, user.getId(), roles);
        if (!allowed) {
            log.warn("Người dùng {} bị từ chối truy cập branch {} với vai trò yêu cầu: {}",
                    user.getId(), branchId, Arrays.toString(roles));
            throw new BusinessException(ApiCode.ACCESS_DENIED);
        }
    }
}

// File: src/main/java/com/example/sales/security/RequirePermission.java
package com.example.sales.security;

import java.lang.annotation.*;

@Target(ElementType.METHOD)
@Retention(RetentionPolicy.RUNTIME)
@Documented
public @interface RequirePermission {
    String value();
}

// File: src/main/java/com/example/sales/security/RequirePlan.java
package com.example.sales.security;

import com.example.sales.constant.SubscriptionPlan;

import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;

@Target({ElementType.METHOD, ElementType.TYPE})
@Retention(RetentionPolicy.RUNTIME)
public @interface RequirePlan {
    SubscriptionPlan[] value() default {};
}

// File: src/main/java/com/example/sales/security/RequireRole.java
package com.example.sales.security;

import com.example.sales.constant.ShopRole;

import java.lang.annotation.*;

@Target(ElementType.METHOD)
@Retention(RetentionPolicy.RUNTIME)
@Documented
public @interface RequireRole {
    ShopRole[] value();
}

// File: src/main/java/com/example/sales/security/RequireRoleAspect.java
package com.example.sales.security;

import com.example.sales.constant.ApiCode;
import com.example.sales.constant.ShopRole;
import com.example.sales.exception.BusinessException;
import com.example.sales.model.User;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.aspectj.lang.JoinPoint;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Before;
import org.aspectj.lang.reflect.MethodSignature;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.stereotype.Component;

import java.lang.annotation.Annotation;
import java.lang.reflect.Method;
import java.util.Arrays;

@Aspect
@Component
@RequiredArgsConstructor
@Slf4j
public class RequireRoleAspect {

    private final PermissionChecker permissionChecker;

    @Before("@annotation(com.example.sales.security.RequireRole)")
    public void checkPermission(JoinPoint joinPoint) {
        Method method = ((MethodSignature) joinPoint.getSignature()).getMethod();
        RequireRole requireRole = method.getAnnotation(RequireRole.class);
        ShopRole[] roles = requireRole.value();

        User user = null;
        String shopId = null;

        Object[] args = joinPoint.getArgs();
        Annotation[][] paramAnnotations = method.getParameterAnnotations();

        for (int i = 0; i < args.length; i++) {
            if (user == null && Arrays.stream(paramAnnotations[i])
                    .anyMatch(a -> a.annotationType() == AuthenticationPrincipal.class)) {
                user = (User) args[i];
            }
            if (shopId == null && args[i] instanceof String str && str.startsWith("shop_")) {
                shopId = str;
            }
        }

        if (user == null || shopId == null) {
            log.warn("Thiếu user hoặc shopId khi kiểm tra quyền cho method: {}", method.getName());
            throw new BusinessException(ApiCode.UNAUTHORIZED);
        }

        boolean allowed = permissionChecker.hasRole(shopId, user.getId(), roles);
        if (!allowed) {
            log.warn("Người dùng {} bị từ chối truy cập shop {} với vai trò yêu cầu: {}",
                    user.getId(), shopId, Arrays.toString(roles));
            throw new BusinessException(ApiCode.ACCESS_DENIED);
        }
    }
}
[END]