[START]
// File: src/main/java/com/example/sales/controller/admin/AdminUserController.java
package com.example.sales.controller.admin;

import com.example.sales.constant.ApiCode;
import com.example.sales.dto.ApiResponseDto;
import com.example.sales.exception.BusinessException;
import com.example.sales.model.User;
import com.example.sales.service.AdminUserService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import lombok.RequiredArgsConstructor;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/admin/users")
@RequiredArgsConstructor
@Validated
public class AdminUserController {

    private final AdminUserService adminUserService;

    @Operation(summary = "Lấy tất cả người dùng", description = "Chỉ dành cho admin. Trả về danh sách tất cả tài khoản người dùng.")
    @ApiResponses({
            @ApiResponse(responseCode = "200", description = "Thành công")
    })
    @GetMapping
    public ApiResponseDto<List<User>> getAll() {
        return ApiResponseDto.success(ApiCode.SUCCESS, adminUserService.getAllUsers());
    }

    @Operation(summary = "Lấy người dùng theo ID", description = "Lấy thông tin người dùng theo ID.")
    @ApiResponses({
            @ApiResponse(responseCode = "200", description = "Thành công"),
            @ApiResponse(responseCode = "404", description = "Không tìm thấy người dùng")
    })
    @GetMapping("/{id}")
    public ApiResponseDto<User> getById(
            @Parameter(description = "ID của người dùng") @PathVariable String id) {
        return ApiResponseDto.success(ApiCode.SUCCESS, adminUserService.getUserById(id));
    }

    @Operation(summary = "Cập nhật thông tin người dùng", description = "Cập nhật thông tin hồ sơ của người dùng bởi admin.")
    @ApiResponses({
            @ApiResponse(responseCode = "200", description = "Cập nhật thành công"),
            @ApiResponse(responseCode = "404", description = "Không tìm thấy người dùng")
    })
    @PutMapping("/{id}")
    public ApiResponseDto<User> updateUser(
            @Parameter(description = "ID của người dùng") @PathVariable String id,
            @RequestBody User userUpdate) {
        return ApiResponseDto.success(ApiCode.USER_UPDATED, adminUserService.updateUser(id, userUpdate));
    }

    @Operation(summary = "Xoá người dùng", description = "Admin xoá người dùng khỏi hệ thống. Không thể tự xoá tài khoản của chính mình.")
    @ApiResponses({
            @ApiResponse(responseCode = "200", description = "Xoá thành công"),
            @ApiResponse(responseCode = "400", description = "Không thể tự xoá chính mình"),
            @ApiResponse(responseCode = "404", description = "Không tìm thấy người dùng")
    })
    @DeleteMapping("/{id}")
    public ApiResponseDto<?> deleteUser(
            @Parameter(description = "ID của người dùng cần xoá") @PathVariable String id,
            @AuthenticationPrincipal @Parameter(hidden = true) User currentUser) {
        if (id.equals(currentUser.getId())) {
            throw new BusinessException(ApiCode.CANNOT_DELETE_SELF);
        }

        adminUserService.deleteUser(id);
        return ApiResponseDto.success(ApiCode.USER_DELETED);
    }
}

// File: src/main/java/com/example/sales/controller/product/ProductCrudController.java
package com.example.sales.controller.product;

import com.example.sales.constant.ApiCode;
import com.example.sales.constant.ShopRole;
import com.example.sales.dto.ApiResponseDto;
import com.example.sales.dto.product.ProductRequest;
import com.example.sales.dto.product.ProductResponse;
import com.example.sales.security.CustomUserDetails;
import com.example.sales.security.RequireRole;
import com.example.sales.service.ProductService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.data.web.PageableDefault;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/api") // Base path for more granular control with shopId/branchId
@RequiredArgsConstructor
public class ProductCrudController {

    private final ProductService productService;

    @Operation(summary = "Tạo sản phẩm mới tại một cửa hàng và chi nhánh cụ thể")
    @ApiResponses({
            @ApiResponse(responseCode = "200", description = "Tạo sản phẩm thành công"),
            @ApiResponse(responseCode = "400", description = "Dữ liệu không hợp lệ"),
            @ApiResponse(responseCode = "403", description = "Không có quyền tạo")
    })
    @PostMapping("/shops/{shopId}/products")
    @RequireRole(ShopRole.OWNER)
    public ResponseEntity<ApiResponseDto<ProductResponse>> create(
            @AuthenticationPrincipal @Parameter(hidden = true) CustomUserDetails user,
            @Parameter(description = "ID cửa hàng") @PathVariable String shopId,
            @Valid @RequestBody ProductRequest request) {
        ProductResponse response = productService.createProduct(shopId, request);
        return ResponseEntity.ok(ApiResponseDto.success(ApiCode.PRODUCT_CREATED, response));
    }

    @Operation(summary = "Cập nhật sản phẩm tại một chi nhánh cụ thể")
    @ApiResponses({
            @ApiResponse(responseCode = "200", description = "Cập nhật sản phẩm thành công"),
            @ApiResponse(responseCode = "404", description = "Không tìm thấy sản phẩm"),
            @ApiResponse(responseCode = "403", description = "Không có quyền cập nhật")
    })
    @PutMapping("/shops/{shopId}/branches/{branchId}/products/{id}")
    @RequireRole({ShopRole.OWNER, ShopRole.STAFF})
    public ResponseEntity<ApiResponseDto<ProductResponse>> update(
            @AuthenticationPrincipal @Parameter(hidden = true) CustomUserDetails user,
            @Parameter(description = "ID cửa hàng") @PathVariable String shopId,
            @Parameter(description = "ID chi nhánh") @PathVariable String branchId,
            @Parameter(description = "ID sản phẩm (BranchProduct ID)") @PathVariable String id,
            @Valid @RequestBody ProductRequest request) {
        ProductResponse response = productService.updateProduct(user.getId(), shopId, branchId, id, request);
        return ResponseEntity.ok(ApiResponseDto.success(ApiCode.PRODUCT_UPDATED, response));
    }

    @Operation(summary = "Xóa sản phẩm (xóa mềm) tại một chi nhánh cụ thể")
    @ApiResponses({
            @ApiResponse(responseCode = "200", description = "Xóa thành công"),
            @ApiResponse(responseCode = "404", description = "Không tìm thấy sản phẩm"),
            @ApiResponse(responseCode = "403", description = "Không có quyền xóa")
    })
    @DeleteMapping("/shops/{shopId}/branches/{branchId}/products/{id}")
    @RequireRole(ShopRole.OWNER)
    public ResponseEntity<ApiResponseDto<Void>> delete(
            @AuthenticationPrincipal @Parameter(hidden = true) CustomUserDetails user,
            @Parameter(description = "ID cửa hàng") @PathVariable String shopId,
            @Parameter(description = "ID chi nhánh") @PathVariable String branchId,
            @Parameter(description = "ID sản phẩm (BranchProduct ID)") @PathVariable String id) {
        productService.deleteProduct(user.getId(), shopId, branchId, id);
        return ResponseEntity.ok(ApiResponseDto.success(ApiCode.PRODUCT_DELETED, null));
    }

    @Operation(summary = "Lấy danh sách sản phẩm với phân trang cho một cửa hàng hoặc chi nhánh")
    @ApiResponses({
            @ApiResponse(responseCode = "200", description = "Trả về danh sách sản phẩm")
    })
    @GetMapping("/shops/{shopId}/products")
    @RequireRole({ShopRole.OWNER, ShopRole.STAFF})
    public ResponseEntity<ApiResponseDto<Page<ProductResponse>>> getAll(
            @Parameter(description = "ID cửa hàng") @PathVariable String shopId,
            @Parameter(description = "ID chi nhánh (tùy chọn)") @RequestParam(required = false) String branchId,
            @PageableDefault(size = 20, sort = "createdAt", direction = Sort.Direction.DESC)
            Pageable pageable) {
        Page<ProductResponse> response = productService.getAllByShop(shopId, branchId, pageable);
        return ResponseEntity.ok(ApiResponseDto.success(ApiCode.PRODUCT_LIST, response));
    }

    @Operation(summary = "Lấy chi tiết sản phẩm tại một chi nhánh cụ thể")
    @ApiResponses({
            @ApiResponse(responseCode = "200", description = "Trả về chi tiết sản phẩm"),
            @ApiResponse(responseCode = "404", description = "Không tìm thấy sản phẩm")
    })
    @GetMapping("/shops/{shopId}/branches/{branchId}/products/{id}")
    @RequireRole({ShopRole.OWNER, ShopRole.STAFF})
    public ResponseEntity<ApiResponseDto<ProductResponse>> getById(
            @Parameter(description = "ID cửa hàng") @PathVariable String shopId,
            @Parameter(description = "ID chi nhánh") @PathVariable String branchId,
            @Parameter(description = "ID sản phẩm (BranchProduct ID)") @PathVariable String id) {
        ProductResponse response = productService.getProduct(shopId, branchId, id);
        return ResponseEntity.ok(ApiResponseDto.success(ApiCode.PRODUCT_FOUND, response));
    }

    @Operation(summary = "Tìm kiếm sản phẩm theo từ khóa cho một cửa hàng hoặc chi nhánh")
    @ApiResponses({
            @ApiResponse(responseCode = "200", description = "Trả về danh sách sản phẩm khớp từ khóa")
    })
    @GetMapping("/shops/{shopId}/products/search")
    @RequireRole({ShopRole.OWNER, ShopRole.STAFF})
    public ResponseEntity<ApiResponseDto<Page<ProductResponse>>> search(
            @Parameter(description = "ID cửa hàng") @PathVariable String shopId,
            @Parameter(description = "ID chi nhánh (tùy chọn)") @RequestParam(required = false) String branchId,
            @Parameter(description = "Từ khóa tìm kiếm") @RequestParam String keyword,
            @PageableDefault(size = 20, sort = "createdAt", direction = Sort.Direction.DESC)
            Pageable pageable) {
        Page<ProductResponse> response = productService.searchProducts(shopId, branchId, keyword, pageable);
        return ResponseEntity.ok(ApiResponseDto.success(ApiCode.PRODUCT_SEARCH_RESULTS, response));
    }
}

// File: src/main/java/com/example/sales/controller/product/ProductImportExportController.java
package com.example.sales.controller.product;

import com.example.sales.constant.ApiCode;
import com.example.sales.constant.ShopRole;
import com.example.sales.dto.ApiResponseDto;
import com.example.sales.security.CustomUserDetails;
import com.example.sales.security.RequireRole;
import com.example.sales.service.ExcelExportService;
import com.example.sales.service.ExcelImportService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import jakarta.servlet.http.HttpServletResponse;
import lombok.RequiredArgsConstructor;
import org.springframework.http.HttpHeaders;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import java.io.IOException;

@RestController
@RequestMapping("/api/products/import-export")
@RequiredArgsConstructor
public class ProductImportExportController {

    private final ExcelImportService excelImportService;
    private final ExcelExportService excelExportService;

    @Operation(summary = "Nhập sản phẩm từ file Excel vào một chi nhánh cụ thể")
    @ApiResponses({
            @ApiResponse(responseCode = "200", description = "Nhập sản phẩm thành công"),
            @ApiResponse(responseCode = "400", description = "File không hợp lệ hoặc dữ liệu sai định dạng"),
            @ApiResponse(responseCode = "403", description = "Không có quyền nhập")
    })
    @PostMapping("/import")
    @RequireRole(ShopRole.OWNER)
    public ResponseEntity<ApiResponseDto<Integer>> importProducts(
            @AuthenticationPrincipal @Parameter(hidden = true) CustomUserDetails user,
            @Parameter(description = "ID cửa hàng") @RequestParam String shopId,
            @Parameter(description = "ID chi nhánh mà sản phẩm sẽ được nhập vào") @RequestParam String branchId,
            @Parameter(description = "File Excel chứa dữ liệu sản phẩm") @RequestParam("file") MultipartFile file) {
        if (file.isEmpty()) {
            throw new IllegalArgumentException("File không được để trống.");
        }
        try {
            int importedCount = excelImportService.importProducts(shopId, branchId, file.getInputStream());
            return ResponseEntity.ok(ApiResponseDto.success(ApiCode.PRODUCT_IMPORTED, importedCount));
        } catch (IOException e) {
            throw new IllegalArgumentException("Không thể đọc file hoặc xử lý dữ liệu: " + e.getMessage(), e);
        }
    }

    @Operation(summary = "Xuất sản phẩm ra file Excel cho một cửa hàng hoặc một chi nhánh cụ thể")
    @ApiResponses({
            @ApiResponse(responseCode = "200", description = "Xuất file Excel thành công"),
            @ApiResponse(responseCode = "403", description = "Không có quyền xuất")
    })
    @GetMapping("/export")
    @RequireRole({ShopRole.OWNER, ShopRole.STAFF})
    public void exportProducts(
            @AuthenticationPrincipal @Parameter(hidden = true) CustomUserDetails user,
            @Parameter(description = "ID cửa hàng") @RequestParam String shopId,
            @Parameter(description = "ID chi nhánh (tùy chọn). Nếu không cung cấp, sẽ xuất tất cả sản phẩm của shop trên mọi chi nhánh.")
            @RequestParam(required = false) String branchId,
            HttpServletResponse response) throws IOException {

        // ✅ Lấy ResponseEntity<byte[]> từ ExcelExportService
        ResponseEntity<byte[]> excelResponse = excelExportService.exportProducts(shopId, branchId);

        // ✅ Ghi dữ liệu từ ResponseEntity vào HttpServletResponse
        response.setContentType(excelResponse.getHeaders().getContentType().toString());
        response.setHeader(HttpHeaders.CONTENT_DISPOSITION, excelResponse.getHeaders().getFirst(HttpHeaders.CONTENT_DISPOSITION));
        response.setContentLength(excelResponse.getBody().length); // Đặt Content-Length
        response.getOutputStream().write(excelResponse.getBody());
        response.getOutputStream().flush(); // Đảm bảo tất cả dữ liệu được ghi
    }
}

// File: src/main/java/com/example/sales/controller/product/ProductStatusController.java
package com.example.sales.controller.product;

import com.example.sales.constant.ApiCode;
import com.example.sales.constant.ShopRole;
import com.example.sales.dto.ApiResponseDto;
import com.example.sales.dto.product.ProductResponse;
import com.example.sales.security.CustomUserDetails;
import com.example.sales.security.RequireRole;
import com.example.sales.service.ProductService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import lombok.RequiredArgsConstructor;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.web.bind.annotation.*;

import java.util.List;

/**
 * Controller xử lý trạng thái sản phẩm (bật/tắt, tồn kho thấp).
 */
@RestController
@RequestMapping("/api/products/status")
@RequiredArgsConstructor
public class ProductStatusController {

    private final ProductService productService;

    /**
     * Bật/tắt trạng thái hoạt động của sản phẩm tại một chi nhánh cụ thể.
     */
    @Operation(summary = "Bật/tắt trạng thái hoạt động của sản phẩm tại một chi nhánh")
    @ApiResponses({
            @ApiResponse(responseCode = "200", description = "Cập nhật trạng thái thành công"),
            @ApiResponse(responseCode = "404", description = "Không tìm thấy sản phẩm"),
            @ApiResponse(responseCode = "403", description = "Không có quyền thực hiện")
    })
    @PatchMapping("/shops/{shopId}/branches/{branchId}/products/{branchProductId}/toggle")
    @RequireRole({ShopRole.OWNER, ShopRole.STAFF})
    public ResponseEntity<ApiResponseDto<ProductResponse>> toggleActive(
            @AuthenticationPrincipal @Parameter(hidden = true) CustomUserDetails user,
            @Parameter(description = "ID cửa hàng", required = true) @PathVariable String shopId,
            @Parameter(description = "ID chi nhánh", required = true) @PathVariable String branchId,
            @Parameter(description = "ID sản phẩm (BranchProduct ID)", required = true) @PathVariable String branchProductId) {

        ProductResponse response = productService.toggleActive(user.getId(), shopId, branchId, branchProductId);
        return ResponseEntity.ok(ApiResponseDto.success(ApiCode.PRODUCT_STATUS_UPDATED, response));
    }

    /**
     * Lấy danh sách sản phẩm có tồn kho dưới ngưỡng cảnh báo cho một cửa hàng hoặc chi nhánh.
     */
    @Operation(summary = "Lấy danh sách sản phẩm tồn kho thấp cho một cửa hàng hoặc chi nhánh")
    @ApiResponses({
            @ApiResponse(responseCode = "200", description = "Danh sách sản phẩm được trả về thành công"),
            @ApiResponse(responseCode = "403", description = "Không có quyền truy cập")
    })
    @GetMapping("/shops/{shopId}/low-stock")
    @RequireRole({ShopRole.OWNER, ShopRole.STAFF})
    public ResponseEntity<ApiResponseDto<List<ProductResponse>>> getLowStock(
            @Parameter(description = "ID cửa hàng", required = true) @PathVariable String shopId,
            @Parameter(description = "ID chi nhánh (tùy chọn)") @RequestParam(required = false) String branchId,
            @Parameter(description = "Ngưỡng tồn kho thấp. Mặc định là 10", example = "10")
            @RequestParam(defaultValue = "10") int threshold) {

        List<ProductResponse> response = productService.getLowStockProducts(shopId, branchId, threshold);
        return ResponseEntity.ok(ApiResponseDto.success(ApiCode.PRODUCT_LOW_STOCK, response));
    }
}

// File: src/main/java/com/example/sales/controller/AuditLogController.java
package com.example.sales.controller;

import com.example.sales.constant.ApiCode;
import com.example.sales.constant.SubscriptionPlan;
import com.example.sales.dto.ApiResponseDto;
import com.example.sales.model.AuditLog;
import com.example.sales.repository.AuditLogRepository;
import com.example.sales.security.RequirePlan;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import lombok.RequiredArgsConstructor;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/audit")
@RequiredArgsConstructor
@Validated
public class AuditLogController {

    private final AuditLogRepository auditLogRepository;

    @RequirePlan({SubscriptionPlan.PRO, SubscriptionPlan.ENTERPRISE})
    @GetMapping("/{targetId}")
    @Operation(summary = "Lấy nhật ký thay đổi", description = "Trả về danh sách các bản ghi audit log của một thực thể cụ thể, theo thứ tự mới nhất trước.")
    @ApiResponses({
            @ApiResponse(responseCode = "200", description = "Lấy danh sách nhật ký thành công"),
            @ApiResponse(responseCode = "403", description = "Gói dịch vụ không đủ quyền truy cập")
    })
    public ApiResponseDto<List<AuditLog>> getLogs(
            @PathVariable @Parameter(description = "ID của thực thể cần xem lịch sử thay đổi (ví dụ: đơn hàng, sản phẩm, v.v.)") String targetId) {
        List<AuditLog> logs = auditLogRepository.findByTargetIdAndDeletedFalseOrderByCreatedAtDesc(targetId);
        return ApiResponseDto.success(ApiCode.SUCCESS, logs);
    }
}

// File: src/main/java/com/example/sales/controller/AuthController.java
package com.example.sales.controller;

import com.example.sales.constant.ApiCode;
import com.example.sales.dto.*;
import com.example.sales.service.AuthService;
import com.example.sales.service.TokenService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/api/auth")
@RequiredArgsConstructor
@Validated
public class AuthController {

    private final AuthService authService;
    private final TokenService tokenService;

    @PostMapping("/register")
    @Operation(summary = "Đăng ký tài khoản", description = "Gửi thông tin đăng ký để tạo tài khoản mới và gửi email xác minh.")
    @ApiResponses({
            @ApiResponse(responseCode = "200", description = "Email xác minh đã được gửi"),
            @ApiResponse(responseCode = "400", description = "Thông tin không hợp lệ hoặc email đã tồn tại")
    })
    public ApiResponseDto<?> register(
            @RequestBody @Valid @Parameter(description = "Thông tin đăng ký") RegisterRequest request) {
        authService.register(request);
        return ApiResponseDto.success(ApiCode.EMAIL_SENT);
    }

    @PostMapping("/login")
    @Operation(summary = "Đăng nhập", description = "Xác thực người dùng và trả về token JWT.")
    @ApiResponses({
            @ApiResponse(responseCode = "200", description = "Đăng nhập thành công"),
            @ApiResponse(responseCode = "401", description = "Sai thông tin đăng nhập")
    })
    public ApiResponseDto<JwtResponse> login(
            @RequestBody @Valid @Parameter(description = "Thông tin đăng nhập") LoginRequest request) {
        JwtResponse token = authService.login(request);
        return ApiResponseDto.success(ApiCode.SUCCESS, token);
    }

    @PostMapping("/forgot-password")
    @Operation(summary = "Quên mật khẩu", description = "Gửi email chứa liên kết đặt lại mật khẩu.")
    @ApiResponses({
            @ApiResponse(responseCode = "200", description = "Email đặt lại mật khẩu đã được gửi"),
            @ApiResponse(responseCode = "404", description = "Email không tồn tại")
    })
    public ApiResponseDto<?> forgotPassword(
            @RequestParam @Parameter(description = "Email đã đăng ký") String email) {
        authService.forgotPassword(email);
        return ApiResponseDto.success(ApiCode.EMAIL_SENT);
    }

    @PostMapping("/resend-verification")
    @Operation(summary = "Gửi lại email xác minh", description = "Gửi lại email xác minh nếu người dùng chưa xác thực.")
    @ApiResponses({
            @ApiResponse(responseCode = "200", description = "Email xác minh đã được gửi lại"),
            @ApiResponse(responseCode = "404", description = "Email không tồn tại hoặc đã xác minh")
    })
    public ApiResponseDto<?> resendVerification(
            @RequestParam @Parameter(description = "Email người dùng") String email) {
        authService.resendVerification(email);
        return ApiResponseDto.success(ApiCode.EMAIL_SENT);
    }

    @GetMapping("/verify")
    @Operation(summary = "Xác minh email", description = "Xác minh tài khoản thông qua token từ email.")
    @ApiResponses({
            @ApiResponse(responseCode = "200", description = "Xác minh thành công"),
            @ApiResponse(responseCode = "400", description = "Token không hợp lệ hoặc đã hết hạn")
    })
    public ApiResponseDto<?> verify(
            @RequestParam @Parameter(description = "Mã token xác minh email") String token) {
        authService.verifyEmail(token);
        return ApiResponseDto.success(ApiCode.SUCCESS);
    }

    @PostMapping("/refresh-token")
    @Operation(summary = "Làm mới token", description = "Cung cấp access token mới từ refresh token.")
    @ApiResponses({
            @ApiResponse(responseCode = "200", description = "Làm mới token thành công"),
            @ApiResponse(responseCode = "401", description = "Refresh token không hợp lệ")
    })
    public ApiResponseDto<JwtResponse> refreshToken(
            @RequestBody @Parameter(description = "Yêu cầu làm mới token") RefreshTokenRequest request) {
        String newAccessToken = tokenService.refreshAccessToken(request.getRefreshToken());
        JwtResponse response = new JwtResponse(newAccessToken, request.getRefreshToken());
        return ApiResponseDto.success(ApiCode.SUCCESS, response);
    }

    @PostMapping("/logout")
    @Operation(summary = "Đăng xuất", description = "Thu hồi refresh token để kết thúc phiên đăng nhập.")
    @ApiResponses({
            @ApiResponse(responseCode = "200", description = "Đăng xuất thành công")
    })
    public ApiResponseDto<?> logout(
            @RequestBody @Parameter(description = "Yêu cầu thu hồi token") RefreshTokenRequest request) {
        tokenService.revokeToken(request.getRefreshToken());
        return ApiResponseDto.success(ApiCode.SUCCESS);
    }
}

// File: src/main/java/com/example/sales/controller/BranchController.java
package com.example.sales.controller;

import com.example.sales.constant.ApiCode;
import com.example.sales.constant.ShopRole;
import com.example.sales.constant.SubscriptionPlan;
import com.example.sales.dto.ApiResponseDto;
import com.example.sales.dto.branch.BranchRequest;
import com.example.sales.dto.branch.BranchResponse;
import com.example.sales.security.CustomUserDetails;
import com.example.sales.security.RequirePlan;
import com.example.sales.security.RequireRole;
import com.example.sales.service.BranchService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/api/branches")
@RequiredArgsConstructor
@Validated
public class BranchController {

    private final BranchService branchService;

    @GetMapping
    @RequireRole({ShopRole.OWNER, ShopRole.STAFF})
    @Operation(summary = "Lấy danh sách chi nhánh", description = "Lấy danh sách chi nhánh của cửa hàng với phân trang")
    @ApiResponses({
            @ApiResponse(responseCode = "200", description = "Danh sách chi nhánh được trả về thành công"),
            @ApiResponse(responseCode = "401", description = "Không có quyền truy cập"),
            @ApiResponse(responseCode = "403", description = "Không có quyền thực hiện hành động này"),
            @ApiResponse(responseCode = "404", description = "Cửa hàng không tìm thấy")
    })
    public ApiResponseDto<Page<BranchResponse>> getAll(
            @AuthenticationPrincipal @Parameter(description = "Thông tin người dùng hiện tại") CustomUserDetails user,
            @RequestParam @Parameter(description = "ID của cửa hàng") String shopId,
            @Parameter(description = "Thông tin phân trang (page, size, sort)") Pageable pageable) {
        return ApiResponseDto.success(ApiCode.SUCCESS, branchService.getAll(user.getId(), shopId, pageable));
    }

    @RequirePlan({SubscriptionPlan.PRO, SubscriptionPlan.ENTERPRISE})
    @PostMapping
    @RequireRole({ShopRole.OWNER, ShopRole.ADMIN})
    @Operation(summary = "Tạo chi nhánh mới", description = "Tạo một chi nhánh mới cho cửa hàng")
    @ApiResponses({
            @ApiResponse(responseCode = "200", description = "Chi nhánh được tạo thành công"),
            @ApiResponse(responseCode = "400", description = "Dữ liệu đầu vào không hợp lệ"),
            @ApiResponse(responseCode = "401", description = "Không có quyền truy cập"),
            @ApiResponse(responseCode = "403", description = "Không có quyền thực hiện hành động này hoặc gói dịch vụ không hợp lệ"),
            @ApiResponse(responseCode = "404", description = "Cửa hàng không tìm thấy")
    })
    public ApiResponseDto<BranchResponse> create(
            @AuthenticationPrincipal @Parameter(description = "Thông tin người dùng hiện tại") CustomUserDetails user,
            @RequestParam @Parameter(description = "ID của cửa hàng") String shopId,
            @RequestBody @Valid @Parameter(description = "Thông tin chi nhánh") BranchRequest request) {
        return ApiResponseDto.success(ApiCode.SUCCESS, branchService.create(user.getId(), shopId, request));
    }

    @PutMapping("/{id}")
    @RequireRole({ShopRole.OWNER, ShopRole.ADMIN})
    @Operation(summary = "Cập nhật chi nhánh", description = "Cập nhật thông tin chi nhánh của cửa hàng")
    @ApiResponses({
            @ApiResponse(responseCode = "200", description = "Chi nhánh được cập nhật thành công"),
            @ApiResponse(responseCode = "400", description = "Dữ liệu đầu vào không hợp lệ"),
            @ApiResponse(responseCode = "401", description = "Không có quyền truy cập"),
            @ApiResponse(responseCode = "403", description = "Không có quyền thực hiện hành động này hoặc gói dịch vụ không hợp lệ"),
            @ApiResponse(responseCode = "404", description = "Chi nhánh hoặc cửa hàng không tìm thấy")
    })
    public ApiResponseDto<BranchResponse> update(
            @AuthenticationPrincipal @Parameter(description = "Thông tin người dùng hiện tại") CustomUserDetails user,
            @RequestParam @Parameter(description = "ID của cửa hàng") String shopId,
            @PathVariable @Parameter(description = "ID của chi nhánh") String id,
            @RequestBody @Valid @Parameter(description = "Thông tin cập nhật chi nhánh") BranchRequest request) {
        return ApiResponseDto.success(ApiCode.SUCCESS, branchService.update(user.getId(), shopId, id, request));
    }

    @DeleteMapping("/{id}")
    @RequireRole(ShopRole.OWNER)
    @Operation(summary = "Xóa chi nhánh", description = "Xóa mềm một chi nhánh của cửa hàng")
    @ApiResponses({
            @ApiResponse(responseCode = "200", description = "Chi nhánh được xóa thành công"),
            @ApiResponse(responseCode = "401", description = "Không có quyền truy cập"),
            @ApiResponse(responseCode = "403", description = "Không có quyền thực hiện hành động này hoặc gói dịch vụ không hợp lệ"),
            @ApiResponse(responseCode = "404", description = "Chi nhánh hoặc cửa hàng không tìm thấy")
    })
    public ApiResponseDto<?> delete(
            @AuthenticationPrincipal @Parameter(description = "Thông tin người dùng hiện tại") CustomUserDetails user,
            @RequestParam @Parameter(description = "ID của cửa hàng") String shopId,
            @PathVariable @Parameter(description = "ID của chi nhánh") String id) {
        branchService.delete(user.getId(), shopId, id);
        return ApiResponseDto.success(ApiCode.SUCCESS);
    }
}

// File: src/main/java/com/example/sales/controller/CustomerController.java
package com.example.sales.controller;

import com.example.sales.constant.ApiCode;
import com.example.sales.constant.ShopRole;
import com.example.sales.dto.ApiResponseDto;
import com.example.sales.dto.customer.CustomerRequest;
import com.example.sales.dto.customer.CustomerResponse;
import com.example.sales.security.CustomUserDetails;
import com.example.sales.security.RequireRole;
import com.example.sales.service.CustomerService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/customers")
@RequiredArgsConstructor
@Validated
public class CustomerController {

    private final CustomerService customerService;

    @GetMapping
    @RequireRole({ShopRole.OWNER, ShopRole.STAFF})
    @Operation(summary = "Lấy danh sách khách hàng", description = "Trả về danh sách khách hàng theo cửa hàng và (tuỳ chọn) chi nhánh")
    @ApiResponses({
            @ApiResponse(responseCode = "200", description = "Lấy danh sách khách hàng thành công"),
            @ApiResponse(responseCode = "401", description = "Chưa xác thực"),
            @ApiResponse(responseCode = "403", description = "Không có quyền truy cập")
    })
    public ApiResponseDto<List<CustomerResponse>> getAll(
            @RequestParam @Parameter(description = "ID của cửa hàng") String shopId,
            @RequestParam(required = false) @Parameter(description = "ID của chi nhánh (tuỳ chọn)") String branchId) {
        return ApiResponseDto.success(ApiCode.CUSTOMER_LIST, customerService.getCustomers(shopId, branchId));
    }

    @PostMapping
    @RequireRole({ShopRole.OWNER, ShopRole.STAFF})
    @Operation(summary = "Tạo khách hàng", description = "Tạo một khách hàng mới trong cửa hàng")
    @ApiResponses({
            @ApiResponse(responseCode = "200", description = "Tạo khách hàng thành công"),
            @ApiResponse(responseCode = "400", description = "Dữ liệu đầu vào không hợp lệ"),
            @ApiResponse(responseCode = "401", description = "Chưa xác thực"),
            @ApiResponse(responseCode = "403", description = "Không có quyền truy cập")
    })
    public ApiResponseDto<CustomerResponse> create(
            @AuthenticationPrincipal @Parameter(description = "Thông tin người dùng hiện tại") CustomUserDetails user,
            @RequestParam @Parameter(description = "ID của cửa hàng") String shopId,
            @RequestBody @Valid @Parameter(description = "Thông tin khách hàng") CustomerRequest request) {
        return ApiResponseDto.success(ApiCode.CUSTOMER_CREATED, customerService.createCustomer(shopId, user.getId(), request));
    }

    @PutMapping("/{id}")
    @RequireRole({ShopRole.OWNER, ShopRole.STAFF})
    @Operation(summary = "Cập nhật khách hàng", description = "Cập nhật thông tin khách hàng theo ID")
    @ApiResponses({
            @ApiResponse(responseCode = "200", description = "Cập nhật khách hàng thành công"),
            @ApiResponse(responseCode = "400", description = "Dữ liệu đầu vào không hợp lệ"),
            @ApiResponse(responseCode = "401", description = "Chưa xác thực"),
            @ApiResponse(responseCode = "403", description = "Không có quyền truy cập"),
            @ApiResponse(responseCode = "404", description = "Không tìm thấy khách hàng")
    })
    public ApiResponseDto<CustomerResponse> update(
            @RequestParam @Parameter(description = "ID của cửa hàng") String shopId,
            @PathVariable @Parameter(description = "ID của khách hàng") String id,
            @RequestBody @Valid @Parameter(description = "Thông tin cập nhật khách hàng") CustomerRequest request) {
        return ApiResponseDto.success(ApiCode.CUSTOMER_UPDATED, customerService.updateCustomer(shopId, id, request));
    }

    @DeleteMapping("/{id}")
    @RequireRole({ShopRole.OWNER, ShopRole.STAFF})
    @Operation(summary = "Xóa khách hàng", description = "Xoá mềm một khách hàng theo ID và chi nhánh")
    @ApiResponses({
            @ApiResponse(responseCode = "200", description = "Xoá khách hàng thành công"),
            @ApiResponse(responseCode = "401", description = "Chưa xác thực"),
            @ApiResponse(responseCode = "403", description = "Không có quyền truy cập"),
            @ApiResponse(responseCode = "404", description = "Không tìm thấy khách hàng")
    })
    public ApiResponseDto<?> delete(
            @RequestParam @Parameter(description = "ID của cửa hàng") String shopId,
            @RequestParam @Parameter(description = "ID của chi nhánh") String branchId,
            @PathVariable @Parameter(description = "ID của khách hàng") String id) {
        customerService.deleteCustomer(shopId, branchId, id);
        return ApiResponseDto.success(ApiCode.CUSTOMER_DELETED);
    }
}

// File: src/main/java/com/example/sales/controller/InventoryController.java
package com.example.sales.controller;

import com.example.sales.constant.ApiCode;
import com.example.sales.constant.InventoryType; // Import InventoryType
import com.example.sales.constant.ShopRole;
import com.example.sales.dto.ApiResponseDto;
import com.example.sales.dto.inventory.InventoryRequest;
import com.example.sales.dto.inventory.InventoryTransactionResponse; // Import InventoryTransactionResponse
import com.example.sales.security.CustomUserDetails;
import com.example.sales.security.RequireRole;
import com.example.sales.service.InventoryService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/api/shops/{shopId}/inventory") // Thêm shopId vào base path
@RequiredArgsConstructor
@Validated
public class InventoryController {

    private final InventoryService inventoryService;

    // ✅ Endpoint để nhập sản phẩm vào kho
    @PostMapping("/import")
    @RequireRole({ShopRole.OWNER, ShopRole.MANAGER, ShopRole.STAFF}) // MANAGER/STAFF có thể nhập kho
    @Operation(summary = "Nhập thêm số lượng sản phẩm vào kho của chi nhánh", description = "Tạo một giao dịch nhập kho cho sản phẩm tại một chi nhánh cụ thể.")
    @ApiResponses({
            @ApiResponse(responseCode = "200", description = "Nhập kho thành công, trả về số lượng tồn kho mới"),
            @ApiResponse(responseCode = "400", description = "Dữ liệu đầu vào không hợp lệ"),
            @ApiResponse(responseCode = "403", description = "Không có quyền thực hiện hành động này"),
            @ApiResponse(responseCode = "404", description = "Cửa hàng, chi nhánh hoặc sản phẩm không tìm thấy")
    })
    public ApiResponseDto<Integer> importProduct(
            @AuthenticationPrincipal @Parameter(hidden = true) CustomUserDetails user,
            @Parameter(description = "ID của cửa hàng") @PathVariable String shopId,
            @RequestBody @Valid @Parameter(description = "Thông tin nhập kho") InventoryRequest request) {

        // Kiểm tra loại giao dịch phải là IMPORT
        if (request.getType() != InventoryType.IMPORT) {
            throw new IllegalArgumentException("Loại giao dịch phải là 'IMPORT' cho endpoint này.");
        }

        int newQuantity = inventoryService.importProductQuantity(
                user.getId(), shopId, request.getBranchId(), request.getBranchProductId(),
                request.getQuantity(), request.getNote());

        return ApiResponseDto.success(ApiCode.SUCCESS, newQuantity);
    }

    // ✅ Endpoint để xuất sản phẩm khỏi kho
    @PostMapping("/export")
    @RequireRole({ShopRole.OWNER, ShopRole.MANAGER, ShopRole.STAFF, ShopRole.CASHIER}) // CASHIER cũng có thể xuất kho (khi bán hàng)
    @Operation(summary = "Xuất bớt số lượng sản phẩm khỏi kho của chi nhánh", description = "Tạo một giao dịch xuất kho cho sản phẩm tại một chi nhánh cụ thể. Kiểm tra số lượng tồn kho.")
    @ApiResponses({
            @ApiResponse(responseCode = "200", description = "Xuất kho thành công, trả về số lượng tồn kho mới"),
            @ApiResponse(responseCode = "400", description = "Dữ liệu đầu vào không hợp lệ hoặc không đủ tồn kho"),
            @ApiResponse(responseCode = "403", description = "Không có quyền thực hiện hành động này"),
            @ApiResponse(responseCode = "404", description = "Cửa hàng, chi nhánh hoặc sản phẩm không tìm thấy")
    })
    public ApiResponseDto<Integer> exportProduct(
            @AuthenticationPrincipal @Parameter(hidden = true) CustomUserDetails user,
            @Parameter(description = "ID của cửa hàng") @PathVariable String shopId,
            @RequestBody @Valid @Parameter(description = "Thông tin xuất kho") InventoryRequest request) {

        // Kiểm tra loại giao dịch phải là EXPORT
        if (request.getType() != InventoryType.EXPORT) {
            throw new IllegalArgumentException("Loại giao dịch phải là 'EXPORT' cho endpoint này.");
        }

        int newQuantity = inventoryService.exportProductQuantity(
                user.getId(), shopId, request.getBranchId(), request.getBranchProductId(),
                request.getQuantity(), request.getNote(), request.getReferenceId());

        return ApiResponseDto.success(ApiCode.SUCCESS, newQuantity);
    }

    // ✅ Endpoint để điều chỉnh tồn kho
    @PostMapping("/adjust")
    @RequireRole({ShopRole.OWNER, ShopRole.MANAGER, ShopRole.STAFF}) // Chỉ các vai trò quản lý/nhân viên có thể điều chỉnh
    @Operation(summary = "Điều chỉnh số lượng tồn kho của sản phẩm tại chi nhánh", description = "Tạo một giao dịch điều chỉnh tồn kho cho sản phẩm tại một chi nhánh cụ thể. Có thể tăng hoặc giảm.")
    @ApiResponses({
            @ApiResponse(responseCode = "200", description = "Điều chỉnh tồn kho thành công, trả về số lượng tồn kho mới"),
            @ApiResponse(responseCode = "400", description = "Dữ liệu đầu vào không hợp lệ"),
            @ApiResponse(responseCode = "403", description = "Không có quyền thực hiện hành động này"),
            @ApiResponse(responseCode = "404", description = "Cửa hàng, chi nhánh hoặc sản phẩm không tìm thấy")
    })
    public ApiResponseDto<Integer> adjustProduct(
            @AuthenticationPrincipal @Parameter(hidden = true) CustomUserDetails user,
            @Parameter(description = "ID của cửa hàng") @PathVariable String shopId,
            @RequestBody @Valid @Parameter(description = "Thông tin điều chỉnh tồn kho") InventoryRequest request) {

        // Kiểm tra loại giao dịch phải là ADJUSTMENT
        if (request.getType() != InventoryType.ADJUSTMENT) {
            throw new IllegalArgumentException("Loại giao dịch phải là 'ADJUSTMENT' cho endpoint này.");
        }

        // Đối với ADJUSTMENT, request.getQuantity() sẽ là newQuantity
        int newQuantity = inventoryService.adjustProductQuantity(
                user.getId(), shopId, request.getBranchId(), request.getBranchProductId(),
                request.getQuantity(), request.getNote());

        return ApiResponseDto.success(ApiCode.SUCCESS, newQuantity);
    }

    // ✅ Endpoint để lấy lịch sử giao dịch tồn kho
    @GetMapping("/branches/{branchId}/products/{branchProductId}/history")
    @RequireRole({ShopRole.OWNER, ShopRole.MANAGER, ShopRole.STAFF}) // OWNER/MANAGER/STAFF có thể xem lịch sử
    @Operation(summary = "Lấy lịch sử giao dịch tồn kho cho một sản phẩm tại chi nhánh", description = "Lấy lịch sử giao dịch tồn kho của một BranchProduct cụ thể với phân trang.")
    @ApiResponses({
            @ApiResponse(responseCode = "200", description = "Lịch sử giao dịch tồn kho được trả về thành công"),
            @ApiResponse(responseCode = "401", description = "Không có quyền truy cập"),
            @ApiResponse(responseCode = "403", description = "Không có quyền thực hiện hành động này"),
            @ApiResponse(responseCode = "404", description = "Sản phẩm không tìm thấy")
    })
    public ApiResponseDto<Page<InventoryTransactionResponse>> getHistory(
            @AuthenticationPrincipal @Parameter(hidden = true) CustomUserDetails user,
            @Parameter(description = "ID của cửa hàng") @PathVariable String shopId,
            @Parameter(description = "ID của chi nhánh") @PathVariable String branchId,
            @Parameter(description = "ID của BranchProduct") @PathVariable String branchProductId,
            @Parameter(description = "Thông tin phân trang (page, size, sort)") Pageable pageable) {

        // Bạn có thể thêm kiểm tra quyền chi tiết hơn ở đây nếu cần,
        // ví dụ: đảm bảo user có quyền trong branchId này.
        // Hiện tại, @RequireRole sẽ kiểm tra quyền ở cấp shop.

        Page<InventoryTransactionResponse> history = inventoryService.getTransactionHistory(branchProductId, pageable);
        return ApiResponseDto.success(ApiCode.SUCCESS, history);
    }
}

// File: src/main/java/com/example/sales/controller/OrderController.java
package com.example.sales.controller;

import com.example.sales.constant.ApiCode;
import com.example.sales.constant.OrderStatus;
import com.example.sales.constant.ShopRole;
import com.example.sales.dto.ApiResponseDto;
import com.example.sales.dto.order.OrderRequest;
import com.example.sales.dto.order.OrderResponse;
import com.example.sales.security.CustomUserDetails;
import com.example.sales.security.RequireRole;
import com.example.sales.service.OrderService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/api/orders")
@RequiredArgsConstructor
@Validated
public class OrderController {

    private final OrderService orderService;

    @GetMapping
    @RequireRole({ShopRole.OWNER, ShopRole.STAFF})
    @Operation(summary = "Lấy danh sách đơn hàng", description = "Lấy danh sách đơn hàng của cửa hàng với phân trang")
    @ApiResponses({
            @ApiResponse(responseCode = "200", description = "Danh sách đơn hàng được trả về thành công"),
            @ApiResponse(responseCode = "401", description = "Không có quyền truy cập"),
            @ApiResponse(responseCode = "403", description = "Không có quyền thực hiện hành động này"),
            @ApiResponse(responseCode = "404", description = "Cửa hàng không tìm thấy")
    })
    public ApiResponseDto<Page<OrderResponse>> getMyOrders(
            @AuthenticationPrincipal @Parameter(description = "Thông tin người dùng hiện tại") CustomUserDetails user,
            @RequestParam @Parameter(description = "ID của cửa hàng") String shopId,
            @Parameter(description = "Thông tin phân trang (page, size, sort)") Pageable pageable) {
        Page<OrderResponse> orders = orderService.getOrdersByUser(user.getId(), shopId, pageable);
        return ApiResponseDto.success(ApiCode.ORDER_LIST, orders);
    }

    @PostMapping
    @RequireRole({ShopRole.OWNER, ShopRole.STAFF})
    @Operation(summary = "Tạo đơn hàng mới", description = "Tạo đơn hàng với danh sách sản phẩm, thông tin bàn và chi nhánh")
    @ApiResponses({
            @ApiResponse(responseCode = "200", description = "Đơn hàng được tạo thành công"),
            @ApiResponse(responseCode = "400", description = "Dữ liệu đầu vào không hợp lệ"),
            @ApiResponse(responseCode = "401", description = "Không có quyền truy cập"),
            @ApiResponse(responseCode = "403", description = "Không có quyền thực hiện hành động này"),
            @ApiResponse(responseCode = "404", description = "Cửa hàng, sản phẩm hoặc bàn không tìm thấy")
    })
    public ApiResponseDto<OrderResponse> createOrder(
            @AuthenticationPrincipal @Parameter(description = "Thông tin người dùng hiện tại") CustomUserDetails user,
            @RequestParam @Parameter(description = "ID của cửa hàng") String shopId,
            @RequestBody @Valid @Parameter(description = "Thông tin đơn hàng") OrderRequest request) {
        OrderResponse created = orderService.createOrder(user.getId(), shopId, request);
        return ApiResponseDto.success(ApiCode.ORDER_CREATED, created);
    }

    @PutMapping("/{id}/cancel")
    @RequireRole({ShopRole.OWNER, ShopRole.STAFF})
    @Operation(summary = "Hủy đơn hàng", description = "Hủy đơn hàng nếu chưa được thanh toán")
    @ApiResponses({
            @ApiResponse(responseCode = "200", description = "Đơn hàng được hủy thành công"),
            @ApiResponse(responseCode = "400", description = "Đơn hàng đã được thanh toán"),
            @ApiResponse(responseCode = "401", description = "Không có quyền truy cập"),
            @ApiResponse(responseCode = "403", description = "Không có quyền thực hiện hành động này"),
            @ApiResponse(responseCode = "404", description = "Đơn hàng hoặc cửa hàng không tìm thấy")
    })
    public ApiResponseDto<?> cancelOrder(
            @AuthenticationPrincipal @Parameter(description = "Thông tin người dùng hiện tại") CustomUserDetails user,
            @RequestParam @Parameter(description = "ID của cửa hàng") String shopId,
            @PathVariable @Parameter(description = "ID của đơn hàng") String id) {
        orderService.cancelOrder(user.getId(), shopId, id);
        return ApiResponseDto.success(ApiCode.ORDER_CANCELLED);
    }

    @PostMapping("/{orderId}/confirm-payment")
    @RequireRole({ShopRole.OWNER, ShopRole.STAFF})
    @Operation(summary = "Xác nhận thanh toán", description = "Xác nhận thanh toán cho đơn hàng và cập nhật trạng thái")
    @ApiResponses({
            @ApiResponse(responseCode = "200", description = "Thanh toán được xác nhận thành công"),
            @ApiResponse(responseCode = "400", description = "Đơn hàng đã được thanh toán"),
            @ApiResponse(responseCode = "401", description = "Không có quyền truy cập"),
            @ApiResponse(responseCode = "403", description = "Không có quyền thực hiện hành động này"),
            @ApiResponse(responseCode = "404", description = "Đơn hàng hoặc cửa hàng không tìm thấy")
    })
    public ApiResponseDto<OrderResponse> confirmPayment(
            @PathVariable @Parameter(description = "ID của đơn hàng") String orderId,
            @RequestParam @Parameter(description = "ID của giao dịch thanh toán") String paymentId,
            @RequestParam @Parameter(description = "Phương thức thanh toán") String paymentMethod,
            @RequestParam @Parameter(description = "ID của cửa hàng") String shopId,
            @AuthenticationPrincipal @Parameter(description = "Thông tin người dùng hiện tại") CustomUserDetails user) {
        OrderResponse confirmed = orderService.confirmPayment(user.getId(), shopId, orderId, paymentId, paymentMethod);
        return ApiResponseDto.success(ApiCode.ORDER_PAYMENT_CONFIRMED, confirmed);
    }

    @PutMapping("/{id}/status")
    @RequireRole({ShopRole.OWNER, ShopRole.STAFF})
    @Operation(summary = "Cập nhật trạng thái đơn hàng", description = "Cập nhật trạng thái đơn hàng (PENDING, COMPLETED, CANCELLED, v.v.)")
    @ApiResponses({
            @ApiResponse(responseCode = "200", description = "Trạng thái đơn hàng được cập nhật thành công"),
            @ApiResponse(responseCode = "400", description = "Đơn hàng đã bị hủy hoặc trạng thái không hợp lệ"),
            @ApiResponse(responseCode = "401", description = "Không có quyền truy cập"),
            @ApiResponse(responseCode = "403", description = "Không có quyền thực hiện hành động này"),
            @ApiResponse(responseCode = "404", description = "Đơn hàng hoặc cửa hàng không tìm thấy")
    })
    public ApiResponseDto<OrderResponse> updateStatus(
            @AuthenticationPrincipal @Parameter(description = "Thông tin người dùng hiện tại") CustomUserDetails user,
            @RequestParam @Parameter(description = "ID của cửa hàng") String shopId,
            @PathVariable @Parameter(description = "ID của đơn hàng") String id,
            @RequestParam @Parameter(description = "Trạng thái mới của đơn hàng") OrderStatus status) {
        OrderResponse updated = orderService.updateStatus(user.getId(), shopId, id, status);
        return ApiResponseDto.success(ApiCode.ORDER_STATUS_UPDATED, updated);
    }

    @GetMapping("/filter")
    @RequireRole({ShopRole.OWNER, ShopRole.STAFF})
    @Operation(summary = "Lấy đơn hàng theo trạng thái", description = "Lấy danh sách đơn hàng theo trạng thái và chi nhánh với phân trang")
    @ApiResponses({
            @ApiResponse(responseCode = "200", description = "Danh sách đơn hàng được trả về thành công"),
            @ApiResponse(responseCode = "401", description = "Không có quyền truy cập"),
            @ApiResponse(responseCode = "403", description = "Không có quyền thực hiện hành động này"),
            @ApiResponse(responseCode = "404", description = "Cửa hàng không tìm thấy")
    })
    public ApiResponseDto<Page<OrderResponse>> getByStatus(
            @AuthenticationPrincipal @Parameter(description = "Thông tin người dùng hiện tại") CustomUserDetails user,
            @RequestParam @Parameter(description = "ID của cửa hàng") String shopId,
            @RequestParam @Parameter(description = "Trạng thái đơn hàng (PENDING, COMPLETED, CANCELLED, v.v.)") OrderStatus status,
            @RequestParam(required = false) @Parameter(description = "ID của chi nhánh (tùy chọn)") String branchId,
            @Parameter(description = "Thông tin phân trang (page, size, sort)") Pageable pageable) {
        Page<OrderResponse> filtered = orderService.getOrdersByStatus(user.getId(), shopId, status, branchId, pageable);
        return ApiResponseDto.success(ApiCode.ORDER_LIST, filtered);
    }
}

// File: src/main/java/com/example/sales/controller/PromotionController.java
package com.example.sales.controller;

import com.example.sales.constant.ApiCode;
import com.example.sales.constant.ShopRole;
import com.example.sales.constant.SubscriptionPlan;
import com.example.sales.dto.ApiResponseDto;
import com.example.sales.dto.promotion.PromotionRequest;
import com.example.sales.dto.promotion.PromotionResponse;
import com.example.sales.security.CustomUserDetails;
import com.example.sales.security.RequirePlan;
import com.example.sales.security.RequireRole;
import com.example.sales.service.PromotionService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/api/promotions")
@RequiredArgsConstructor
@Validated
public class PromotionController {

    private final PromotionService promotionService;

    @RequirePlan({SubscriptionPlan.PRO, SubscriptionPlan.ENTERPRISE})
    @GetMapping
    @RequireRole({ShopRole.OWNER, ShopRole.STAFF})
    @Operation(summary = "Lấy danh sách khuyến mãi", description = "Lấy danh sách khuyến mãi của cửa hàng với phân trang")
    @ApiResponses({
            @ApiResponse(responseCode = "200", description = "Danh sách khuyến mãi được trả về thành công"),
            @ApiResponse(responseCode = "401", description = "Không có quyền truy cập"),
            @ApiResponse(responseCode = "403", description = "Không có quyền thực hiện hành động này hoặc gói dịch vụ không hợp lệ"),
            @ApiResponse(responseCode = "404", description = "Cửa hàng không tìm thấy")
    })
    public ApiResponseDto<Page<PromotionResponse>> getAll(
            @AuthenticationPrincipal @Parameter(description = "Thông tin người dùng hiện tại") CustomUserDetails user,
            @RequestParam @Parameter(description = "ID của cửa hàng") String shopId,
            @RequestParam(required = false) @Parameter(description = "ID của chi nhánh (tùy chọn)") String branchId,
            @Parameter(description = "Thông tin phân trang (page, size, sort)") Pageable pageable) {
        return ApiResponseDto.success(ApiCode.SUCCESS, promotionService.getAll(user.getId(), shopId, branchId, pageable));
    }

    @RequirePlan({SubscriptionPlan.PRO, SubscriptionPlan.ENTERPRISE})
    @PostMapping
    @RequireRole(ShopRole.OWNER)
    @Operation(summary = "Tạo khuyến mãi mới", description = "Tạo một khuyến mãi mới cho cửa hàng")
    @ApiResponses({
            @ApiResponse(responseCode = "200", description = "Khuyến mãi được tạo thành công"),
            @ApiResponse(responseCode = "400", description = "Dữ liệu đầu vào không hợp lệ"),
            @ApiResponse(responseCode = "401", description = "Không có quyền truy cập"),
            @ApiResponse(responseCode = "403", description = "Không có quyền thực hiện hành động này hoặc gói dịch vụ không hợp lệ"),
            @ApiResponse(responseCode = "404", description = "Cửa hàng không tìm thấy")
    })
    public ApiResponseDto<PromotionResponse> create(
            @AuthenticationPrincipal @Parameter(description = "Thông tin người dùng hiện tại") CustomUserDetails user,
            @RequestParam @Parameter(description = "ID của cửa hàng") String shopId,
            @RequestBody @Valid @Parameter(description = "Thông tin khuyến mãi") PromotionRequest request) {
        return ApiResponseDto.success(ApiCode.SUCCESS, promotionService.create(user.getId(), shopId, request));
    }

    @RequirePlan({SubscriptionPlan.PRO, SubscriptionPlan.ENTERPRISE})
    @PutMapping("/{id}")
    @RequireRole(ShopRole.OWNER)
    @Operation(summary = "Cập nhật khuyến mãi", description = "Cập nhật thông tin khuyến mãi của cửa hàng")
    @ApiResponses({
            @ApiResponse(responseCode = "200", description = "Khuyến mãi được cập nhật thành công"),
            @ApiResponse(responseCode = "400", description = "Dữ liệu đầu vào không hợp lệ"),
            @ApiResponse(responseCode = "401", description = "Không có quyền truy cập"),
            @ApiResponse(responseCode = "403", description = "Không có quyền thực hiện hành động này hoặc gói dịch vụ không hợp lệ"),
            @ApiResponse(responseCode = "404", description = "Khuyến mãi hoặc cửa hàng không tìm thấy")
    })
    public ApiResponseDto<PromotionResponse> update(
            @AuthenticationPrincipal @Parameter(description = "Thông tin người dùng hiện tại") CustomUserDetails user,
            @RequestParam @Parameter(description = "ID của cửa hàng") String shopId,
            @PathVariable @Parameter(description = "ID của khuyến mãi") String id,
            @RequestBody @Valid @Parameter(description = "Thông tin cập nhật khuyến mãi") PromotionRequest request) {
        return ApiResponseDto.success(ApiCode.SUCCESS, promotionService.update(user.getId(), shopId, id, request));
    }

    @RequirePlan({SubscriptionPlan.PRO, SubscriptionPlan.ENTERPRISE})
    @DeleteMapping("/{id}")
    @RequireRole(ShopRole.OWNER)
    @Operation(summary = "Xóa khuyến mãi", description = "Xóa mềm một khuyến mãi của cửa hàng")
    @ApiResponses({
            @ApiResponse(responseCode = "200", description = "Khuyến mãi được xóa thành công"),
            @ApiResponse(responseCode = "401", description = "Không có quyền truy cập"),
            @ApiResponse(responseCode = "403", description = "Không có quyền thực hiện hành động này hoặc gói dịch vụ không hợp lệ"),
            @ApiResponse(responseCode = "404", description = "Khuyến mãi hoặc cửa hàng không tìm thấy")
    })
    public ApiResponseDto<?> delete(
            @AuthenticationPrincipal @Parameter(description = "Thông tin người dùng hiện tại") CustomUserDetails user,
            @RequestParam @Parameter(description = "ID của cửa hàng") String shopId,
            @PathVariable @Parameter(description = "ID của khuyến mãi") String id) {
        promotionService.delete(user.getId(), shopId, id);
        return ApiResponseDto.success(ApiCode.SUCCESS);
    }
}

// File: src/main/java/com/example/sales/controller/ReportController.java
package com.example.sales.controller;

import com.example.sales.constant.ApiCode;
import com.example.sales.constant.ShopRole;
import com.example.sales.constant.SubscriptionPlan;
import com.example.sales.dto.ApiResponseDto;
import com.example.sales.dto.report.DailyReportResponse;
import com.example.sales.dto.report.ReportRequest;
import com.example.sales.dto.report.ReportResponse;
import com.example.sales.security.RequirePlan;
import com.example.sales.security.RequireRole;
import com.example.sales.service.ReportService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import java.time.LocalDate;
import java.util.List;

@RestController
@RequestMapping("/api/reports")
@RequiredArgsConstructor
@Validated
public class ReportController {

    private final ReportService reportService;

    @RequirePlan({SubscriptionPlan.PRO, SubscriptionPlan.ENTERPRISE})
    @PostMapping("/summary")
    @RequireRole({ShopRole.OWNER, ShopRole.STAFF})
    @Operation(
            summary = "Lấy báo cáo tổng hợp",
            description = "Trả về báo cáo tổng hợp doanh thu, số lượng đơn hàng, sản phẩm đã bán,... trong khoảng thời gian được chỉ định"
    )
    @ApiResponses({
            @ApiResponse(responseCode = "200", description = "Báo cáo tổng hợp được trả về thành công"),
            @ApiResponse(responseCode = "401", description = "Không có quyền truy cập"),
            @ApiResponse(responseCode = "403", description = "Không có quyền thực hiện hành động này hoặc gói dịch vụ không hợp lệ"),
            @ApiResponse(responseCode = "404", description = "Không tìm thấy cửa hàng hoặc dữ liệu báo cáo")
    })
    public ApiResponseDto<ReportResponse> getReport(
            @RequestParam @Parameter(description = "ID của cửa hàng") String shopId,
            @RequestBody @Valid @Parameter(description = "Thông tin yêu cầu báo cáo") ReportRequest request) {
        return ApiResponseDto.success(ApiCode.SUCCESS, reportService.getReport(shopId, request));
    }

    @RequirePlan({SubscriptionPlan.PRO, SubscriptionPlan.ENTERPRISE})
    @PostMapping("/daily")
    @RequireRole({ShopRole.OWNER, ShopRole.STAFF})
    @Operation(
            summary = "Lấy báo cáo theo ngày",
            description = "Trả về danh sách báo cáo chi tiết theo từng ngày trong khoảng thời gian chỉ định"
    )
    @ApiResponses({
            @ApiResponse(responseCode = "200", description = "Báo cáo theo ngày được trả về thành công"),
            @ApiResponse(responseCode = "401", description = "Không có quyền truy cập"),
            @ApiResponse(responseCode = "403", description = "Không có quyền thực hiện hành động này hoặc gói dịch vụ không hợp lệ"),
            @ApiResponse(responseCode = "404", description = "Không tìm thấy cửa hàng hoặc dữ liệu báo cáo")
    })
    public ApiResponseDto<List<DailyReportResponse>> getDaily(
            @RequestParam @Parameter(description = "ID của cửa hàng") String shopId,
            @RequestBody @Valid @Parameter(description = "Thông tin yêu cầu báo cáo theo ngày") ReportRequest request) {
        return ApiResponseDto.success(ApiCode.SUCCESS, reportService.getDailyReport(shopId, request));
    }

    @RequirePlan({SubscriptionPlan.PRO, SubscriptionPlan.ENTERPRISE})
    @GetMapping("/daily/export")
    @RequireRole({ShopRole.OWNER, ShopRole.STAFF})
    @Operation(
            summary = "Xuất báo cáo theo ngày ra file Excel",
            description = "Xuất dữ liệu báo cáo theo ngày trong khoảng thời gian chỉ định dưới dạng file Excel"
    )
    @ApiResponses({
            @ApiResponse(responseCode = "200", description = "File Excel được xuất thành công"),
            @ApiResponse(responseCode = "401", description = "Không có quyền truy cập"),
            @ApiResponse(responseCode = "403", description = "Không có quyền thực hiện hành động này hoặc gói dịch vụ không hợp lệ"),
            @ApiResponse(responseCode = "404", description = "Không tìm thấy cửa hàng hoặc dữ liệu báo cáo")
    })
    public ResponseEntity<byte[]> exportDaily(
            @RequestParam @Parameter(description = "ID của cửa hàng") String shopId,
            @RequestParam @DateTimeFormat(iso = DateTimeFormat.ISO.DATE)
            @Parameter(description = "Ngày bắt đầu (yyyy-MM-dd)") LocalDate startDate,
            @RequestParam @DateTimeFormat(iso = DateTimeFormat.ISO.DATE)
            @Parameter(description = "Ngày kết thúc (yyyy-MM-dd)") LocalDate endDate) {
        return reportService.exportDailyReportExcel(shopId, startDate, endDate);
    }
}

// File: src/main/java/com/example/sales/controller/shop/ShopController.java
package com.example.sales.controller.shop;

import com.example.sales.constant.ApiCode;
import com.example.sales.constant.ShopRole;
import com.example.sales.dto.ApiResponseDto;
import com.example.sales.dto.shop.ShopRequest;
import com.example.sales.dto.shop.ShopSimpleResponse;
import com.example.sales.model.Shop;
import com.example.sales.security.CustomUserDetails;
import com.example.sales.security.RequireRole;
import com.example.sales.service.FileUploadService;
import com.example.sales.service.ShopService;
import com.example.sales.service.ShopUserService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

@RestController
@RequestMapping("/api/shop")
@RequiredArgsConstructor
@Validated
public class ShopController {

    private final ShopService shopService;
    private final ShopUserService shopUserService;
    private final FileUploadService fileUploadService;

    @PostMapping(consumes = "multipart/form-data")
    @Operation(summary = "Tạo cửa hàng mới", description = "Tạo cửa hàng với thông tin và logo tùy chọn")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Cửa hàng được tạo thành công"),
            @ApiResponse(responseCode = "400", description = "Dữ liệu không hợp lệ"),
            @ApiResponse(responseCode = "403", description = "Không có quyền truy cập")
    })
    public ApiResponseDto<Shop> create(@AuthenticationPrincipal CustomUserDetails user,
                                       @RequestPart("shop") @Valid ShopRequest request,
                                       @RequestPart(value = "file", required = false) MultipartFile file) {
        String logoUrl = null;
        if (file != null && !file.isEmpty()) {
            logoUrl = fileUploadService.upload(file);
        }
        return ApiResponseDto.success(ApiCode.SUCCESS, shopService.createShop(user.getId(), request, logoUrl));
    }

    @GetMapping("/me")
    @RequireRole(ShopRole.OWNER)
    @Operation(summary = "Lấy thông tin cửa hàng hiện tại", description = "Trả về thông tin chi tiết của cửa hàng mà người dùng hiện tại sở hữu")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Trả về thông tin cửa hàng thành công"),
            @ApiResponse(responseCode = "403", description = "Không có quyền truy cập"),
            @ApiResponse(responseCode = "404", description = "Không tìm thấy cửa hàng")
    })
    public ApiResponseDto<?> getMyShop(@AuthenticationPrincipal CustomUserDetails user) {
        Shop shop = shopService.getShopByOwner(user.getId());
        return ApiResponseDto.success(ApiCode.SUCCESS, shopService.getShopResponse(user, shop));
    }

    @PutMapping("/me")
    @RequireRole(ShopRole.OWNER)
    @Operation(summary = "Cập nhật thông tin cửa hàng", description = "Cập nhật tên, địa chỉ, số điện thoại hoặc logo của cửa hàng")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Cập nhật thành công"),
            @ApiResponse(responseCode = "400", description = "Dữ liệu không hợp lệ"),
            @ApiResponse(responseCode = "403", description = "Không có quyền cập nhật"),
            @ApiResponse(responseCode = "404", description = "Không tìm thấy cửa hàng")
    })
    public ApiResponseDto<Shop> update(@AuthenticationPrincipal CustomUserDetails user,
                                       @RequestBody @Valid ShopRequest request) {
        return ApiResponseDto.success(ApiCode.SUCCESS, shopService.updateShop(user.getId(), request));
    }

    @GetMapping("/my")
    @Operation(summary = "Lấy danh sách các cửa hàng mà người dùng tham gia", description = "Trả về danh sách shop mà người dùng hiện tại có vai trò trong đó (OWNER, STAFF,...)")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Trả về danh sách thành công"),
            @ApiResponse(responseCode = "403", description = "Không có quyền truy cập")
    })
    public ApiResponseDto<Page<ShopSimpleResponse>> getMyShops(
            @AuthenticationPrincipal CustomUserDetails user,
            @Parameter(description = "Thông tin phân trang (page, size, sort)") Pageable pageable
    ) {
        return ApiResponseDto.success(ApiCode.SUCCESS, shopUserService.getShopsForUser(user.getId(), pageable));
    }

    @DeleteMapping
    @RequireRole(ShopRole.OWNER)
    @Operation(summary = "Xóa cửa hàng hiện tại", description = "Xóa cửa hàng mà người dùng hiện tại đang sở hữu. Thao tác không thể hoàn tác.")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Xóa thành công"),
            @ApiResponse(responseCode = "403", description = "Không có quyền xóa"),
            @ApiResponse(responseCode = "404", description = "Không tìm thấy cửa hàng")
    })
    public ApiResponseDto<?> deleteShop(@AuthenticationPrincipal CustomUserDetails user) {
        shopService.deleteShop(user.getId());
        return ApiResponseDto.success(ApiCode.SUCCESS);
    }

    // File: ShopController.java
    @GetMapping("/search")
    @RequireRole({ShopRole.OWNER, ShopRole.STAFF})
    @Operation(summary = "Tìm kiếm cửa hàng", description = "Tìm kiếm cửa hàng theo tên hoặc địa chỉ")
    public ApiResponseDto<Page<ShopSimpleResponse>> search(
            @RequestParam String keyword,
            Pageable pageable) {
        return ApiResponseDto.success(ApiCode.SUCCESS, shopService.searchShops(keyword, pageable));
    }
}

// File: src/main/java/com/example/sales/controller/shop/ShopUserController.java
package com.example.sales.controller.shop;

import com.example.sales.constant.ApiCode;
import com.example.sales.dto.ApiResponseDto;
import com.example.sales.security.CustomUserDetails;
import com.example.sales.service.ShopUserService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import lombok.RequiredArgsConstructor;
import org.springframework.data.domain.Pageable;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

@RestController
@RequestMapping("/api/shop-users")
@RequiredArgsConstructor
@Validated
public class ShopUserController {

    private final ShopUserService shopUserService;

    @GetMapping("/my")
    @Operation(summary = "Lấy danh sách cửa hàng của người dùng hiện tại",
            description = "Trả về danh sách các cửa hàng mà người dùng hiện tại sở hữu hoặc tham gia")
    @ApiResponses({
            @ApiResponse(responseCode = "200", description = "Thành công"),
            @ApiResponse(responseCode = "400", description = "Dữ liệu không hợp lệ"),
            @ApiResponse(responseCode = "404", description = "Không tìm thấy cửa hàng")
    })
    public ApiResponseDto<?> getMyShops(
            @AuthenticationPrincipal CustomUserDetails customUserDetails,
            @RequestParam(required = false) Pageable pageable
    ) {
        return ApiResponseDto.success(ApiCode.SUCCESS, shopUserService.getShopsForUser(customUserDetails.getId(), pageable));
    }
}

// File: src/main/java/com/example/sales/controller/SubscriptionController.java
package com.example.sales.controller;

import com.example.sales.constant.ApiCode;
import com.example.sales.dto.ApiResponseDto;
import com.example.sales.dto.subscription.UpgradePlanRequest;
import com.example.sales.model.Shop;
import com.example.sales.model.SubscriptionHistory;
import com.example.sales.repository.SubscriptionHistoryRepository;
import com.example.sales.security.CustomUserDetails;
import com.example.sales.service.PaymentService;
import com.example.sales.service.ShopService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/subscription")
@RequiredArgsConstructor
public class SubscriptionController {

    private final ShopService shopService;
    private final PaymentService paymentService;
    private final SubscriptionHistoryRepository subscriptionHistoryRepository;

    @GetMapping("/me")
    @Operation(summary = "Lấy thông tin gói hiện tại", description = "Trả về gói dịch vụ hiện tại của cửa hàng do người dùng sở hữu")
    @ApiResponses({
            @ApiResponse(responseCode = "200", description = "Trả về thông tin cửa hàng và gói hiện tại thành công"),
            @ApiResponse(responseCode = "401", description = "Không xác thực hoặc token không hợp lệ"),
            @ApiResponse(responseCode = "403", description = "Không có quyền truy cập")
    })
    public ApiResponseDto<Shop> getCurrentPlan(
            @AuthenticationPrincipal @Parameter(description = "Thông tin người dùng hiện tại") CustomUserDetails user) {
        Shop shop = shopService.getShopByOwner(user.getId());
        return ApiResponseDto.success(ApiCode.SUCCESS, shop);
    }

    @PostMapping("/upgrade")
    @Operation(summary = "Nâng cấp gói dịch vụ", description = "Nâng cấp cửa hàng lên gói dịch vụ cao hơn (Pro, Enterprise)")
    @ApiResponses({
            @ApiResponse(responseCode = "200", description = "Nâng cấp gói thành công"),
            @ApiResponse(responseCode = "400", description = "Dữ liệu đầu vào không hợp lệ hoặc gói không hợp lệ"),
            @ApiResponse(responseCode = "401", description = "Không xác thực hoặc token không hợp lệ"),
            @ApiResponse(responseCode = "403", description = "Không có quyền truy cập")
    })
    public ApiResponseDto<?> upgrade(
            @AuthenticationPrincipal @Parameter(description = "Thông tin người dùng hiện tại") CustomUserDetails user,
            @RequestBody @Valid @Parameter(description = "Thông tin nâng cấp gói dịch vụ") UpgradePlanRequest req) {
        Shop shop = shopService.getShopByOwner(user.getId());

        paymentService.upgradeShopPlan(shop, req.getTargetPlan(), req.getMonths());
        shopService.save(shop);

        return ApiResponseDto.success(ApiCode.SUCCESS);
    }

    @GetMapping("/history")
    @Operation(summary = "Lịch sử nâng cấp gói", description = "Trả về lịch sử các lần nâng cấp gói dịch vụ của cửa hàng")
    @ApiResponses({
            @ApiResponse(responseCode = "200", description = "Lấy lịch sử thành công"),
            @ApiResponse(responseCode = "401", description = "Không xác thực hoặc token không hợp lệ"),
            @ApiResponse(responseCode = "403", description = "Không có quyền truy cập")
    })
    public ApiResponseDto<List<SubscriptionHistory>> getHistory(
            @AuthenticationPrincipal @Parameter(description = "Thông tin người dùng hiện tại") CustomUserDetails user) {
        Shop shop = shopService.getShopByOwner(user.getId());
        List<SubscriptionHistory> history = subscriptionHistoryRepository.findByShopIdOrderByCreatedAtDesc(shop.getId());
        return ApiResponseDto.success(ApiCode.SUCCESS, history);
    }
}

// File: src/main/java/com/example/sales/controller/TableController.java
package com.example.sales.controller;

import com.example.sales.constant.ApiCode;
import com.example.sales.constant.ShopRole;
import com.example.sales.constant.TableStatus;
import com.example.sales.dto.ApiResponseDto;
import com.example.sales.dto.table.TableRequest;
import com.example.sales.dto.table.TableResponse;
import com.example.sales.security.CustomUserDetails;
import com.example.sales.security.RequireRole;
import com.example.sales.service.TableService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/api/tables")
@RequiredArgsConstructor
@Validated
public class TableController {

    private final TableService tableService;

    @PostMapping
    @RequireRole(ShopRole.OWNER)
    @Operation(summary = "Tạo bàn mới", description = "Tạo một bàn mới trong cửa hàng với thông tin bàn và chi nhánh")
    @ApiResponses({
            @ApiResponse(responseCode = "200", description = "Bàn được tạo thành công"),
            @ApiResponse(responseCode = "400", description = "Dữ liệu đầu vào không hợp lệ hoặc tên bàn đã tồn tại"),
            @ApiResponse(responseCode = "401", description = "Không có quyền truy cập"),
            @ApiResponse(responseCode = "403", description = "Không có quyền thực hiện hành động này"),
            @ApiResponse(responseCode = "404", description = "Cửa hàng không tìm thấy")
    })
    public ApiResponseDto<TableResponse> create(
            @AuthenticationPrincipal @Parameter(description = "Thông tin người dùng hiện tại") CustomUserDetails user,
            @RequestBody @Valid @Parameter(description = "Thông tin bàn") TableRequest request) {
        return ApiResponseDto.success(ApiCode.SUCCESS, tableService.create(user.getId(), request));
    }

    @GetMapping
    @RequireRole({ShopRole.OWNER, ShopRole.STAFF})
    @Operation(summary = "Lấy danh sách bàn", description = "Lấy danh sách bàn của cửa hàng với phân trang")
    @ApiResponses({
            @ApiResponse(responseCode = "200", description = "Danh sách bàn được trả về thành công"),
            @ApiResponse(responseCode = "401", description = "Không có quyền truy cập"),
            @ApiResponse(responseCode = "403", description = "Không có quyền thực hiện hành động này"),
            @ApiResponse(responseCode = "404", description = "Cửa hàng không tìm thấy")
    })
    public ApiResponseDto<Page<TableResponse>> getByShop(
            @AuthenticationPrincipal @Parameter(description = "Thông tin người dùng hiện tại") CustomUserDetails user,
            @RequestParam @Parameter(description = "ID của cửa hàng") String shopId,
            @RequestParam @Parameter(description = "ID của chi nhánh (tùy chọn)") String branchId,
            @Parameter(description = "Thông tin phân trang (page, size, sort)") Pageable pageable) {
        return ApiResponseDto.success(ApiCode.SUCCESS, tableService.getByShop(user.getId(), shopId, branchId, pageable));
    }

    @PutMapping("/{id}/status")
    @RequireRole({ShopRole.OWNER, ShopRole.STAFF})
    @Operation(summary = "Cập nhật trạng thái bàn", description = "Cập nhật trạng thái bàn (AVAILABLE, OCCUPIED, v.v.)")
    @ApiResponses({
            @ApiResponse(responseCode = "200", description = "Trạng thái bàn được cập nhật thành công"),
            @ApiResponse(responseCode = "400", description = "Trạng thái không hợp lệ hoặc bàn không thể cập nhật"),
            @ApiResponse(responseCode = "401", description = "Không có quyền truy cập"),
            @ApiResponse(responseCode = "403", description = "Không có quyền thực hiện hành động này"),
            @ApiResponse(responseCode = "404", description = "Bàn hoặc cửa hàng không tìm thấy")
    })
    public ApiResponseDto<TableResponse> updateStatus(
            @AuthenticationPrincipal @Parameter(description = "Thông tin người dùng hiện tại") CustomUserDetails user,
            @PathVariable @Parameter(description = "ID của bàn") String id,
            @RequestParam @Parameter(description = "Trạng thái mới của bàn") TableStatus status) {
        return ApiResponseDto.success(ApiCode.SUCCESS, tableService.updateStatus(user.getId(), id, status));
    }

    @PutMapping("/{id}")
    @RequireRole(ShopRole.OWNER)
    @Operation(summary = "Cập nhật thông tin bàn", description = "Cập nhật thông tin bàn như tên, sức chứa, ghi chú")
    @ApiResponses({
            @ApiResponse(responseCode = "200", description = "Thông tin bàn được cập nhật thành công"),
            @ApiResponse(responseCode = "400", description = "Dữ liệu đầu vào không hợp lệ hoặc bàn đang được sử dụng"),
            @ApiResponse(responseCode = "401", description = "Không có quyền truy cập"),
            @ApiResponse(responseCode = "403", description = "Không có quyền thực hiện hành động này"),
            @ApiResponse(responseCode = "404", description = "Bàn hoặc cửa hàng không tìm thấy")
    })
    public ApiResponseDto<TableResponse> updateTable(
            @AuthenticationPrincipal @Parameter(description = "Thông tin người dùng hiện tại") CustomUserDetails user,
            @PathVariable @Parameter(description = "ID của bàn") String id,
            @RequestBody @Valid @Parameter(description = "Thông tin cập nhật bàn") TableRequest request) {
        return ApiResponseDto.success(ApiCode.SUCCESS, tableService.updateTable(user.getId(), id, request));
    }

    @DeleteMapping("/{id}")
    @RequireRole(ShopRole.OWNER)
    @Operation(summary = "Xóa bàn", description = "Xóa mềm một bàn nếu bàn không đang được sử dụng")
    @ApiResponses({
            @ApiResponse(responseCode = "200", description = "Bàn được xóa thành công"),
            @ApiResponse(responseCode = "400", description = "Bàn đang được sử dụng"),
            @ApiResponse(responseCode = "401", description = "Không có quyền truy cập"),
            @ApiResponse(responseCode = "403", description = "Không có quyền thực hiện hành động này"),
            @ApiResponse(responseCode = "404", description = "Bàn hoặc cửa hàng không tìm thấy")
    })
    public ApiResponseDto<?> deleteTable(
            @AuthenticationPrincipal @Parameter(description = "Thông tin người dùng hiện tại") CustomUserDetails user,
            @PathVariable @Parameter(description = "ID của bàn") String id) {
        tableService.deleteTable(user.getId(), id);
        return ApiResponseDto.success(ApiCode.SUCCESS);
    }
}

// File: src/main/java/com/example/sales/controller/UserController.java
package com.example.sales.controller;

import com.example.sales.constant.ApiCode;
import com.example.sales.dto.ApiResponseDto;
import com.example.sales.dto.ChangePasswordRequest;
import com.example.sales.dto.UpdateProfileRequest;
import com.example.sales.model.User;
import com.example.sales.security.CustomUserDetails;
import com.example.sales.service.UserService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/api/user")
@RequiredArgsConstructor
@Validated
public class UserController {

    private final UserService userService;

    @GetMapping("/me")
    @Operation(summary = "Lấy thông tin người dùng hiện tại", description = "Trả về thông tin chi tiết của người dùng đang đăng nhập.")
    @ApiResponses({
            @ApiResponse(responseCode = "200", description = "Lấy thông tin thành công"),
            @ApiResponse(responseCode = "401", description = "Chưa xác thực hoặc token không hợp lệ")
    })
    public ApiResponseDto<User> getCurrentUser(
            @AuthenticationPrincipal @Parameter(description = "Thông tin người dùng hiện tại") CustomUserDetails user) {
        return ApiResponseDto.success(ApiCode.USER_INFO, userService.getCurrentUser(user.getId()));
    }

    @PutMapping("/update-profile")
    @Operation(summary = "Cập nhật thông tin người dùng", description = "Cập nhật họ tên, số điện thoại và loại hình kinh doanh của người dùng.")
    @ApiResponses({
            @ApiResponse(responseCode = "200", description = "Cập nhật thành công"),
            @ApiResponse(responseCode = "400", description = "Dữ liệu đầu vào không hợp lệ"),
            @ApiResponse(responseCode = "401", description = "Chưa xác thực hoặc token không hợp lệ")
    })
    public ApiResponseDto<User> updateProfile(
            @AuthenticationPrincipal @Parameter(description = "Thông tin người dùng hiện tại") CustomUserDetails user,
            @RequestBody @Valid @Parameter(description = "Thông tin cập nhật hồ sơ") UpdateProfileRequest request) {
        User updated = userService.updateProfile(user.getId(), request.getFullName(), request.getPhone(), request.getBusinessType());
        return ApiResponseDto.success(ApiCode.USER_UPDATED, updated);
    }

    @PostMapping("/change-password")
    @Operation(summary = "Đổi mật khẩu", description = "Cho phép người dùng đổi mật khẩu bằng cách cung cấp mật khẩu hiện tại và mật khẩu mới.")
    @ApiResponses({
            @ApiResponse(responseCode = "200", description = "Đổi mật khẩu thành công"),
            @ApiResponse(responseCode = "400", description = "Mật khẩu hiện tại không đúng hoặc dữ liệu không hợp lệ"),
            @ApiResponse(responseCode = "401", description = "Chưa xác thực hoặc token không hợp lệ")
    })
    public ApiResponseDto<?> changePassword(
            @AuthenticationPrincipal @Parameter(description = "Thông tin người dùng hiện tại") CustomUserDetails user,
            @RequestBody @Valid @Parameter(description = "Thông tin đổi mật khẩu") ChangePasswordRequest request) {
        userService.changePassword(user.getId(), request.getCurrentPassword(), request.getNewPassword());
        return ApiResponseDto.success(ApiCode.PASSWORD_CHANGED);
    }
}

// File: src/main/java/com/example/sales/controller/WebhookController.java
package com.example.sales.controller;

import com.example.sales.constant.SubscriptionPlan;
import com.example.sales.model.Shop;
import com.example.sales.service.PaymentService;
import com.example.sales.service.ShopService;
import com.example.sales.util.SignatureUtil;
import com.fasterxml.jackson.databind.ObjectMapper;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.web.bind.annotation.*;

import java.util.Map;

@RestController
@RequestMapping("/api/webhook")
@RequiredArgsConstructor
@Slf4j
public class WebhookController {

    private final ShopService shopService;
    private final PaymentService paymentService;
    private final ObjectMapper objectMapper;

    @Value("${webhook.secret}")
    private String webhookSecret;

    @PostMapping("/payment")
    public void handlePaymentWebhook(@RequestBody String rawBody,
                                     @RequestHeader("X-Payment-Signature") String signature) {
        log.info("Received payment webhook");

        try {
            // ✅ 1. Verify signature
            if (!SignatureUtil.isValidHmac(rawBody, signature, webhookSecret)) {
                log.warn("Invalid webhook signature");
                return;
            }

            // ✅ 2. Parse JSON payload
            Map<String, Object> payload = objectMapper.readValue(rawBody, Map.class);
            String shopId = (String) payload.get("shopId");
            String planStr = (String) payload.get("plan");
            Integer months = (Integer) payload.get("months");

            if (shopId == null || planStr == null || months == null) {
                log.warn("Missing required fields in webhook payload");
                return;
            }

            SubscriptionPlan targetPlan = SubscriptionPlan.valueOf(planStr);
            Shop shop = shopService.getShopById(shopId);

            // ✅ 3. Upgrade plan
            paymentService.upgradeShopPlan(shop, targetPlan, months);
            shopService.save(shop);

            log.info("✅ Shop {} upgraded to {} for {} months", shopId, targetPlan, months);
        } catch (Exception e) {
            log.error("Error processing webhook", e);
        }
    }
}

// File: src/main/java/com/example/sales/controller/shop/ShopUserManagementController.java
package com.example.sales.controller.shop;

import com.example.sales.constant.ApiCode;
import com.example.sales.constant.ShopRole;
import com.example.sales.dto.ApiResponseDto;
import com.example.sales.security.CustomUserDetails;
import com.example.sales.security.RequireRole;
import com.example.sales.service.ShopUserService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import lombok.RequiredArgsConstructor;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/api/shops/{shopId}") // Base path cho các API quản lý user trong shop
@RequiredArgsConstructor
@Validated
public class ShopUserManagementController {

    private final ShopUserService shopUserService;

    // ✅ API để thêm người dùng vào chi nhánh
    @PostMapping("/branches/{branchId}/users/{userId}")
    @RequireRole({ShopRole.OWNER, ShopRole.ADMIN, ShopRole.MANAGER})
    @Operation(summary = "Thêm/Tái kích hoạt người dùng vào một chi nhánh",
            description = "Thêm người dùng vào chi nhánh cụ thể với vai trò xác định. " +
                    "Nếu người dùng đã bị xóa, sẽ tái kích hoạt họ.")
    @ApiResponses({
            @ApiResponse(responseCode = "200", description = "Thành công"),
            @ApiResponse(responseCode = "400", description = "Dữ liệu không hợp lệ hoặc trùng lặp"),
            @ApiResponse(responseCode = "403", description = "Không có quyền")
    })
    public ApiResponseDto<?> addUserToBranch(
            @Parameter(description = "ID của cửa hàng") @PathVariable String shopId,
            @Parameter(description = "ID của chi nhánh") @PathVariable String branchId,
            @Parameter(description = "ID của người dùng cần thêm") @PathVariable String userId,
            @Parameter(description = "Vai trò của người dùng trong chi nhánh (OWNER, ADMIN, MANAGER, STAFF, CASHIER)")
            @RequestParam ShopRole role, // Sử dụng @RequestParam cho role
            @AuthenticationPrincipal CustomUserDetails customUserDetails
    ) {
        // Có thể thêm kiểm tra branchId có tồn tại trong shop này không nếu cần thiết
        shopUserService.addUser(shopId, userId, role, branchId, customUserDetails.getId());
        return ApiResponseDto.success(
                ApiCode.SUCCESS,
                String.format("Người dùng %s đã được thêm vào chi nhánh %s của cửa hàng %s với vai trò %s.",
                        userId, branchId, shopId, role)
        );
    }

    // ✅ API mới: Xóa người dùng khỏi một chi nhánh cụ thể
    @DeleteMapping("/branches/{branchId}/users/{userId}")
    @RequireRole({ShopRole.OWNER, ShopRole.ADMIN, ShopRole.MANAGER}) // MANAGER có thể xóa STAFF/CASHIER trong chi nhánh của họ
    @Operation(summary = "Xóa người dùng khỏi một chi nhánh cụ thể",
            description = "Xóa mềm (soft delete) một người dùng khỏi một chi nhánh cụ thể của cửa hàng. " +
                    "Chỉ dành cho các vai trò có quyền quản lý nhân viên.")
    @ApiResponses({
            @ApiResponse(responseCode = "200", description = "Thành công"),
            @ApiResponse(responseCode = "400", description = "Lỗi xác thực hoặc logic nghiệp vụ"),
            @ApiResponse(responseCode = "403", description = "Không có quyền truy cập"),
            @ApiResponse(responseCode = "404", description = "ShopUser hoặc tài nguyên không tìm thấy")
    })
    public ApiResponseDto<?> removeUserFromBranch(
            @Parameter(description = "ID của cửa hàng") @PathVariable String shopId,
            @Parameter(description = "ID của chi nhánh") @PathVariable String branchId,
            @Parameter(description = "ID của người dùng cần xóa khỏi chi nhánh") @PathVariable String userId,
            @AuthenticationPrincipal CustomUserDetails customUserDetails
    ) {
        shopUserService.removeUser(shopId, userId, branchId, customUserDetails.getId());
        return ApiResponseDto.success(
                ApiCode.SUCCESS,
                String.format("Người dùng %s đã được xóa khỏi chi nhánh %s của cửa hàng %s thành công.", userId, branchId, shopId)
        );
    }

    // ✅ API mới: Xóa người dùng khỏi toàn bộ shop (tất cả các chi nhánh)
    @DeleteMapping("/users/{userId}")
    @RequireRole({ShopRole.OWNER, ShopRole.ADMIN}) // Chỉ OWNER hoặc ADMIN mới có thể xóa người dùng khỏi toàn bộ shop
    @Operation(summary = "Xóa người dùng khỏi cửa hàng (tất cả các chi nhánh)",
            description = "Xóa mềm (soft delete) một người dùng khỏi tất cả các chi nhánh của một cửa hàng. " +
                    "Chỉ dành cho các vai trò có quyền quản lý cấp cao.")
    @ApiResponses({
            @ApiResponse(responseCode = "200", description = "Thành công"),
            @ApiResponse(responseCode = "400", description = "Lỗi xác thực hoặc logic nghiệp vụ"),
            @ApiResponse(responseCode = "403", description = "Không có quyền truy cập"),
            @ApiResponse(responseCode = "404", description = "Người dùng không tìm thấy trong cửa hàng")
    })
    public ApiResponseDto<?> removeUserFromShop(
            @Parameter(description = "ID của cửa hàng") @PathVariable String shopId,
            @Parameter(description = "ID của người dùng cần xóa khỏi cửa hàng") @PathVariable String userId,
            @AuthenticationPrincipal CustomUserDetails customUserDetails
    ) {
        shopUserService.removeUserFromShop(shopId, userId, customUserDetails.getId());
        return ApiResponseDto.success(
                ApiCode.SUCCESS,
                String.format("Người dùng %s đã được xóa khỏi cửa hàng %s thành công.", userId, shopId)
        );
    }
}

[END]