[START]
// File: src/main/java/com/example/sales/util/SignatureUtil.java
package com.example.sales.util;

import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;
import java.util.Base64;

public class SignatureUtil {

    public static boolean isValidHmac(String payload, String signature, String secret) {
        try {
            Mac sha256 = Mac.getInstance("HmacSHA256");
            SecretKeySpec keySpec = new SecretKeySpec(secret.getBytes(), "HmacSHA256");
            sha256.init(keySpec);
            byte[] hash = sha256.doFinal(payload.getBytes());
            String expected = Base64.getEncoder().encodeToString(hash);
            return expected.equals(signature);
        } catch (Exception e) {
            return false;
        }
    }
}

// File: src/main/java/com/example/sales/validation/DateRangeValidator.java
package com.example.sales.validation;

import com.example.sales.dto.report.ReportRequest;
import jakarta.validation.ConstraintValidator;
import jakarta.validation.ConstraintValidatorContext;

public class DateRangeValidator implements ConstraintValidator<ValidDateRange, ReportRequest> {

    @Override
    public boolean isValid(ReportRequest req, ConstraintValidatorContext context) {
        if (req.getStartDate() == null || req.getEndDate() == null) {
            return false; // bắt buộc cả 2 phải có
        }
        return !req.getStartDate().isAfter(req.getEndDate());
    }
}

// File: src/main/java/com/example/sales/validation/ValidDateRange.java
package com.example.sales.validation;

import jakarta.validation.Constraint;
import jakarta.validation.Payload;

import java.lang.annotation.*;

@Documented
@Constraint(validatedBy = DateRangeValidator.class)
@Target({ ElementType.TYPE })
@Retention(RetentionPolicy.RUNTIME)
public @interface ValidDateRange {
    String message() default "Ngày bắt đầu phải trước hoặc bằng ngày kết thúc";

    Class<?>[] groups() default {};

    Class<? extends Payload>[] payload() default {};
}

// File: src/main/java/com/example/sales/SalesApplication.java
package com.example.sales;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.cache.annotation.EnableCaching;
import org.springframework.data.mongodb.config.EnableMongoAuditing;
import org.springframework.scheduling.annotation.EnableScheduling;

@EnableMongoAuditing(auditorAwareRef = "auditorAware")
@EnableScheduling
@SpringBootApplication
@EnableCaching
public class SalesApplication {

	public static void main(String[] args) {
		SpringApplication.run(SalesApplication.class, args);
	}

}

// File: src/test/java/com/example/sales/config/TestMailConfig.java
package com.example.sales.config;

import org.springframework.boot.test.context.TestConfiguration;
import org.springframework.context.annotation.Bean;
import org.springframework.mail.javamail.JavaMailSender;

import static org.mockito.Mockito.mock;

@TestConfiguration
public class TestMailConfig {
    @Bean
    public JavaMailSender javaMailSender() {
        return mock(JavaMailSender.class);
    }
}

// File: src/test/java/com/example/sales/exception/GlobalExceptionHandlerTest.java
package com.example.sales.exception;

import com.example.sales.constant.ApiCode;
import com.example.sales.dto.ApiResponseDto;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.AccessDeniedException;
import org.springframework.validation.BindingResult;
import org.springframework.validation.FieldError;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.context.request.WebRequest;

import java.util.List;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
class GlobalExceptionHandlerTest {

    private final GlobalExceptionHandler handler = new GlobalExceptionHandler();

    @Test
    void testHandleValidationExceptions() {
        BindingResult bindingResult = mock(BindingResult.class);
        FieldError fieldError = new FieldError("objectName", "name", "Field is required");
        when(bindingResult.getFieldErrors()).thenReturn(List.of(fieldError));

        MethodArgumentNotValidException ex = new MethodArgumentNotValidException(null, bindingResult);
        WebRequest webRequest = mock(WebRequest.class);
        when(webRequest.getDescription(false)).thenReturn("POST /api/users");

        ResponseEntity<ApiResponseDto<Map<String, String>>> response = handler.handleValidationExceptions(ex, webRequest);

        assertEquals(HttpStatus.BAD_REQUEST, response.getStatusCode());
        assertEquals(false, response.getBody().isSuccess());
        assertEquals("4000", response.getBody().getCode());
        assertEquals("Validation error", response.getBody().getMessage());
        assertEquals("Field is required", response.getBody().getData().get("name"));
    }

    @Test
    void testHandleAccessDeniedException() {
        AccessDeniedException ex = new AccessDeniedException("Access denied");
        WebRequest webRequest = mock(WebRequest.class);
        when(webRequest.getDescription(false)).thenReturn("GET /api/admin");

        ResponseEntity<ApiResponseDto<String>> response = handler.handleAccessDeniedException(ex, webRequest);

        assertEquals(HttpStatus.FORBIDDEN, response.getStatusCode());
        assertEquals(false, response.getBody().isSuccess());
        assertEquals("4002", response.getBody().getCode());
        assertEquals("Access denied", response.getBody().getMessage());
        assertEquals("Access denied", response.getBody().getData());
    }

    @Test
    void testHandleBusinessException() {
        BusinessException ex = new BusinessException(ApiCode.USER_NOT_FOUND);
        WebRequest webRequest = mock(WebRequest.class);
        when(webRequest.getDescription(false)).thenReturn("GET /api/users/123");

        ResponseEntity<ApiResponseDto<String>> response = handler.handleBusinessException(ex, webRequest);

        assertEquals(HttpStatus.NOT_FOUND, response.getStatusCode());
        assertEquals(false, response.getBody().isSuccess());
        assertEquals("4108", response.getBody().getCode());
        assertEquals("User not found", response.getBody().getMessage());
        assertEquals(null, response.getBody().getData());
    }

    @Test
    void testHandleAllExceptions() {
        Exception ex = new RuntimeException("Unexpected error");
        WebRequest webRequest = mock(WebRequest.class);
        when(webRequest.getDescription(false)).thenReturn("GET /api/test");
        when(webRequest.getRemoteUser()).thenReturn("testUser");

        ResponseEntity<ApiResponseDto<String>> response = handler.handleAllExceptions(ex, webRequest);

        assertEquals(HttpStatus.INTERNAL_SERVER_ERROR, response.getStatusCode());
        assertEquals(false, response.getBody().isSuccess());
        assertEquals("5000", response.getBody().getCode());
        assertEquals("Internal server error", response.getBody().getMessage());
        assertEquals("Unexpected error", response.getBody().getData());
    }

    @Test
    void testApiResponseSuccessWithData() {
        ApiResponseDto<String> response = ApiResponseDto.success(ApiCode.SUCCESS, "Test data");
        assertEquals(true, response.isSuccess());
        assertEquals("2000", response.getCode());
        assertEquals("Operation successful", response.getMessage());
        assertEquals("Test data", response.getData());
    }

    @Test
    void testApiResponseSuccessWithoutData() {
        ApiResponseDto<?> response = ApiResponseDto.success(ApiCode.SUCCESS);
        assertEquals(true, response.isSuccess());
        assertEquals("2000", response.getCode());
        assertEquals("Operation successful", response.getMessage());
        assertEquals(null, response.getData());
    }

    @Test
    void testApiResponseErrorWithoutData() {
        ApiResponseDto<?> response = ApiResponseDto.error(ApiCode.INTERNAL_ERROR);
        assertEquals(false, response.isSuccess());
        assertEquals("5000", response.getCode());
        assertEquals("Internal server error", response.getMessage());
        assertEquals(null, response.getData());
    }

    @Test
    void testApiResponseErrorWithCustomMessageAndData() {
        ApiResponseDto<String> response = ApiResponseDto.error(ApiCode.VALIDATION_ERROR, "Custom validation error", "Details");
        assertEquals(false, response.isSuccess());
        assertEquals("4000", response.getCode());
        assertEquals("Custom validation error", response.getMessage());
        assertEquals("Details", response.getData());
    }
}

// File: src/test/java/com/example/sales/service/CustomerServiceTest.java
package com.example.sales.service;

import com.example.sales.dto.customer.CustomerRequest;
import com.example.sales.dto.customer.CustomerResponse;
import com.example.sales.model.Customer;
import com.example.sales.repository.CustomerRepository;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class CustomerServiceTest {

    @InjectMocks
    private CustomerService customerService;

    @Mock
    private CustomerRepository customerRepository;

    @Mock
    private AuditLogService auditLogService;

    @Test
    void testCreateCustomer() {
        CustomerRequest request = new CustomerRequest();
        request.setName("Nguyễn Văn A");

        when(customerRepository.save(any())).thenAnswer(invocation -> {
            Customer customer = invocation.getArgument(0);
            customer.setId("c1");
            return customer;
        });

        CustomerResponse response = customerService.createCustomer("shop1", "user1", request);

        assertEquals("Nguyễn Văn A", response.getName());
        verify(customerRepository).save(any(Customer.class));
        verify(auditLogService).log(any(), any(), any(), any(), any(), any());
    }
}

// File: src/test/java/com/example/sales/service/OrderServiceTest.java
package com.example.sales.service;

import com.example.sales.constant.*;
import com.example.sales.dto.order.OrderItemRequest;
import com.example.sales.dto.order.OrderRequest;
import com.example.sales.exception.BusinessException;
import com.example.sales.model.*;
import com.example.sales.repository.*;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.util.List;
import java.util.Optional;

import static org.assertj.core.api.Assertions.*;
import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.*;

class OrderServiceTest {

    @Mock private OrderRepository orderRepository;
    @Mock private ProductRepository productRepository;
    @Mock private PromotionRepository promotionRepository;
    @Mock private ShopRepository shopRepository;
    @Mock private TableRepository tableRepository;
    @Mock private InventoryTransactionRepository inventoryTransactionRepository;
    @Mock private AuditLogService auditLogService;
    @Mock private ShopUserService shopUserService;

    @InjectMocks private OrderService orderService;

    private final String userId = "user123";
    private final String shopId = "shop123";
    private final String branchId = "branch123";

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void createOrder_shouldCreateOrderAndAdjustInventory() {
        Product product = Product.builder()
                .id("prod1")
                .name("Coca")
                .quantity(100)
                .shopId(shopId)
                .build();

        Shop shop = new Shop();
        shop.setId(shopId);
        shop.setType(ShopType.RETAIL);

        OrderItemRequest itemRequest = new OrderItemRequest("prod1", 2, 10000);
        OrderRequest request = new OrderRequest();
        request.setItems(List.of(itemRequest));
        request.setBranchId(branchId);

        when(productRepository.findById("prod1")).thenReturn(Optional.of(product));
        when(shopRepository.findByIdAndDeletedFalse(shopId)).thenReturn(Optional.of(shop));
        when(orderRepository.save(any())).thenAnswer(i -> i.getArgument(0));

        var response = orderService.createOrder(userId, shopId, request);

        assertThat(response).isNotNull();
        assertThat(response.getItems()).hasSize(1);
        assertThat(response.getTotalAmount()).isEqualTo(2);
        assertThat(response.getTotalPrice()).isEqualTo(20000);

        verify(productRepository).save(any());
        verify(inventoryTransactionRepository).save(any());
    }

    @Test
    void createOrder_shouldThrowIfProductNotFound() {
        OrderRequest request = new OrderRequest();
        request.setItems(List.of(new OrderItemRequest("missingProd", 1, 5000)));

        when(productRepository.findById("missingProd")).thenReturn(Optional.empty());

        assertThatThrownBy(() -> orderService.createOrder(userId, shopId, request))
                .isInstanceOf(Exception.class);
    }

    @Test
    void cancelOrder_shouldSetStatusCancelled() {
        Order order = new Order();
        order.setId("order123");
        order.setShopId(shopId);
        order.setUserId(userId);
        order.setPaid(false);

        when(orderRepository.findByIdAndDeletedFalse("order123")).thenReturn(Optional.of(order));

        orderService.cancelOrder(userId, shopId, "order123");

        assertThat(order.getStatus()).isEqualTo(OrderStatus.CANCELLED);
        verify(orderRepository).save(order);
    }

    @Test
    void cancelOrder_shouldFailIfAlreadyPaid() {
        Order order = new Order();
        order.setId("order123");
        order.setPaid(true);
        order.setShopId(shopId);
        order.setUserId(userId);

        when(orderRepository.findByIdAndDeletedFalse("order123")).thenReturn(Optional.of(order));

        assertThatThrownBy(() -> orderService.cancelOrder(userId, shopId, "order123"))
                .isInstanceOf(BusinessException.class)
                .hasMessageContaining("ORDER_ALREADY_PAID");
    }
}

// File: src/test/java/com/example/sales/service/ProductServiceTest.java
package com.example.sales.service;

import com.example.sales.constant.ShopType;
import com.example.sales.dto.product.ProductRequest;
import com.example.sales.dto.product.ProductResponse;
import com.example.sales.model.Product;
import com.example.sales.model.Shop;
import com.example.sales.repository.ProductRepository;
import com.example.sales.repository.ShopRepository;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.*;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.Optional;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class ProductServiceTest {

    @InjectMocks
    private ProductService productService;

    @Mock private ProductRepository productRepository;
    @Mock private ShopRepository shopRepository;
    @Mock private AuditLogService auditLogService;
    @Mock private FileUploadService fileUploadService;

    @Test
    void testCreateProduct() {
        // Arrange
        ProductRequest req = new ProductRequest();
        req.setName("Cà phê");
        req.setPrice(10000.0);
        req.setQuantity(10);
        req.setCategory("Đồ uống");
        req.setUnit("Cốc");
        req.setImageUrl("http://example.com/image.jpg");

        Shop mockShop = Shop.builder()
                .id("shop1")
                .name("Quán A")
                .type(ShopType.CAFE)
                .build();

        when(shopRepository.findByIdAndDeletedFalse("shop1"))
                .thenReturn(Optional.of(mockShop));

        when(productRepository.save(any(Product.class)))
                .thenAnswer(invocation -> {
                    Product product = invocation.getArgument(0);
                    product.setId("p1");
                    return product;
                });

        // Act
        ProductResponse response = productService.createProduct("shop1", req);

        // Assert
        assertEquals("Cà phê", response.getName());
        assertEquals("shop1", response.getShopId());

        verify(productRepository).save(any(Product.class));
        verify(fileUploadService).moveToProduct(eq("http://example.com/image.jpg"));
        verify(auditLogService).log(
                eq(null),
                eq("shop1"),
                eq("p1"),
                eq("PRODUCT"),
                eq("CREATED"),
                contains("Cà phê")
        );
    }

    @Test
    void testUpdateProduct() {
        Product product = Product.builder()
                .id("p1")
                .shopId("shop1")
                .name("Cà phê")
                .price(10000.0)
                .quantity(10)
                .category("Đồ uống")
                .build();
        when(productRepository.findByIdAndShopIdAndDeletedFalse("p1", "shop1"))
                .thenReturn(Optional.of(product));
        when(shopRepository.findByIdAndDeletedFalse("shop1"))
                .thenReturn(Optional.of(Shop.builder().id("shop1").type(ShopType.CAFE).build()));
        when(productRepository.save(any())).thenAnswer(i -> i.getArgument(0));

        ProductRequest req = new ProductRequest();
        req.setName("Trà sữa");
        req.setPrice(15000.0);
        req.setQuantity(20);
        req.setCategory("Đồ uống");

        ProductResponse response = productService.updateProduct("user1", "shop1", "p1", req);

        assertEquals("Trà sữa", response.getName());
        assertEquals(15000.0, response.getPrice());
        verify(auditLogService).log(eq("user1"), eq("shop1"), eq("p1"), eq("PRODUCT"), eq("PRICE_CHANGED"), anyString());
    }
}

// File: src/test/java/com/example/sales/service/ShopServiceTest.java
package com.example.sales.service;

import com.example.sales.constant.ApiCode;
import com.example.sales.constant.ShopType;
import com.example.sales.dto.shop.ShopRequest;
import com.example.sales.exception.BusinessException;
import com.example.sales.model.Shop;
import com.example.sales.repository.ShopRepository;
import com.example.sales.repository.ShopUserRepository;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.Optional;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class ShopServiceTest {

    @Mock
    private ShopRepository shopRepository;

    @Mock
    private AuditLogService auditLogService;

    @Mock
    private ShopUserRepository shopUserRepository;

    @InjectMocks
    private ShopService shopService;

    @Test
    void testCreateShop() {
        ShopRequest request = new ShopRequest();
        request.setName("Test Shop");
        request.setType(ShopType.RETAIL);
        request.setPhone("+123456789");
        request.setAddress("123 Street");

        when(shopRepository.findByOwnerIdAndDeletedFalse("user1")).thenReturn(Optional.empty());
        when(shopRepository.save(any(Shop.class))).thenAnswer(i -> i.getArgument(0));
        when(shopUserRepository.save(any())).thenAnswer(i -> i.getArgument(0));

        Shop shop = shopService.createShop("user1", request, "logo.png");

        assertEquals("Test Shop", shop.getName());
        assertEquals(ShopType.RETAIL, shop.getType());
        verify(auditLogService).log(eq("user1"), eq(shop.getId()), eq(shop.getId()), eq("SHOP"), eq("CREATED"), anyString());
    }

    @Test
    void testCreateShop_AlreadyExists() {
        ShopRequest request = new ShopRequest();
        request.setName("Test Shop");
        request.setType(ShopType.RETAIL);

        when(shopRepository.findByOwnerIdAndDeletedFalse("user1")).thenReturn(Optional.of(new Shop()));

        assertThrows(BusinessException.class, () -> shopService.createShop("user1", request, null),
                ApiCode.SHOP_ALREADY_EXISTS.getMessage());
    }
}

// File: src/test/java/com/example/sales/service/ShopUserServiceTest.java
package com.example.sales.service;

import com.example.sales.constant.ApiCode;
import com.example.sales.constant.ShopRole;
import com.example.sales.constant.ShopType;
import com.example.sales.dto.shop.ShopSimpleResponse;
import com.example.sales.exception.BusinessException;
import com.example.sales.model.Shop;
import com.example.sales.model.ShopUser;
import com.example.sales.repository.ShopRepository;
import com.example.sales.repository.ShopUserRepository;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;

import java.util.List;
import java.util.Optional;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class ShopUserServiceTest {

    @Mock
    private ShopUserRepository shopUserRepository;

    @Mock
    private ShopRepository shopRepository;

    @InjectMocks
    private ShopUserService shopUserService;

    @Test
    void testAddUser() {
        Shop shop = Shop.builder()
                .id("shop1")
                .name("Test Shop")
                .type(ShopType.RETAIL)
                .active(true)
                .build();
        when(shopRepository.findByIdAndDeletedFalse("shop1")).thenReturn(Optional.of(shop));
        when(shopUserRepository.findByShopIdAndUserIdAndDeletedFalse("shop1", "user1"))
                .thenReturn(Optional.empty());
        when(shopUserRepository.save(any(ShopUser.class))).thenAnswer(i -> i.getArgument(0));

        shopUserService.addUser("shop1", "user1", ShopRole.STAFF, null);

        verify(shopUserRepository).save(argThat(su ->
                su.getShopId().equals("shop1") &&
                        su.getUserId().equals("user1") &&
                        su.getRole() == ShopRole.STAFF));
    }

    @Test
    void testAddUser_Duplicate() {
        Shop shop = Shop.builder()
                .id("shop1")
                .name("Test Shop")
                .active(true)
                .build();
        ShopUser shopUser = ShopUser.builder()
                .shopId("shop1")
                .userId("user1")
                .role(ShopRole.STAFF)
                .build();
        when(shopRepository.findByIdAndDeletedFalse("shop1")).thenReturn(Optional.of(shop));
        when(shopUserRepository.findByShopIdAndUserIdAndDeletedFalse("shop1", "user1"))
                .thenReturn(Optional.of(shopUser));

        BusinessException exception = assertThrows(BusinessException.class,
                () -> shopUserService.addUser("shop1", "user1", ShopRole.STAFF, null));
        assertEquals(ApiCode.DUPLICATE_DATA.getMessage(), exception.getMessage());
    }

    @Test
    void testAddUser_ShopNotFound() {
        when(shopRepository.findByIdAndDeletedFalse("shop1")).thenReturn(Optional.empty());

        BusinessException exception = assertThrows(BusinessException.class,
                () -> shopUserService.addUser("shop1", "user1", ShopRole.STAFF, null));
        assertEquals(ApiCode.SHOP_NOT_FOUND.getMessage(), exception.getMessage());
    }

    @Test
    void testRemoveUser() {
        ShopUser shopUser = ShopUser.builder()
                .shopId("shop1")
                .userId("user1")
                .role(ShopRole.STAFF)
                .build();
        when(shopUserRepository.findByShopIdAndUserIdAndDeletedFalse("shop1", "user1"))
                .thenReturn(Optional.of(shopUser));

        shopUserService.removeUser("shop1", "user1");

        verify(shopUserRepository).delete(shopUser);
    }

    @Test
    void testRemoveUser_NotFound() {
        when(shopUserRepository.findByShopIdAndUserIdAndDeletedFalse("shop1", "user1"))
                .thenReturn(Optional.empty());

        BusinessException exception = assertThrows(BusinessException.class,
                () -> shopUserService.removeUser("shop1", "user1"));
        assertEquals(ApiCode.NOT_FOUND.getMessage(), exception.getMessage());
    }

    @Test
    void testGetShopsForUser() {
        ShopUser shopUser = ShopUser.builder()
                .shopId("shop1")
                .userId("user1")
                .role(ShopRole.STAFF)
                .build();
        Shop shop = Shop.builder()
                .id("shop1")
                .name("Test Shop")
                .type(ShopType.RETAIL)
                .active(true)
                .build();
        Page<ShopUser> shopUserPage = new PageImpl<>(List.of(shopUser), PageRequest.of(0, 10), 1);
        when(shopUserRepository.findByUserIdAndDeletedFalse(eq("user1"), any(Pageable.class)))
                .thenReturn(shopUserPage);
        when(shopRepository.findByIdAndDeletedFalse("shop1")).thenReturn(Optional.of(shop));

        List<ShopSimpleResponse> shops = shopUserService.getShopsForUser("user1", PageRequest.of(0, 10)).getContent();

        assertEquals(1, shops.size());
        assertEquals("Test Shop", shops.get(0).getName());
        assertEquals(ShopRole.STAFF, shops.get(0).getRole());
        assertEquals(ShopType.RETAIL, shops.get(0).getType());
    }

    @Test
    void testGetShopsForUser_Empty() {
        Page<ShopUser> emptyPage = new PageImpl<>(List.of(), PageRequest.of(0, 10), 0);
        when(shopUserRepository.findByUserIdAndDeletedFalse(eq("user1"), any(Pageable.class)))
                .thenReturn(emptyPage);

        List<ShopSimpleResponse> shops = shopUserService.getShopsForUser("user1", PageRequest.of(0, 10)).getContent();

        assertTrue(shops.isEmpty());
    }

    @Test
    void testGetUserRoleInShop() {
        ShopUser shopUser = ShopUser.builder()
                .shopId("shop1")
                .userId("user1")
                .role(ShopRole.OWNER)
                .build();
        when(shopUserRepository.findByShopIdAndUserIdAndDeletedFalse("shop1", "user1"))
                .thenReturn(Optional.of(shopUser));

        ShopRole role = shopUserService.getUserRoleInShop("shop1", "user1");

        assertEquals(ShopRole.OWNER, role);
    }

    @Test
    void testGetUserRoleInShop_NotFound() {
        when(shopUserRepository.findByShopIdAndUserIdAndDeletedFalse("shop1", "user1"))
                .thenReturn(Optional.empty());

        BusinessException exception = assertThrows(BusinessException.class,
                () -> shopUserService.getUserRoleInShop("shop1", "user1"));
        assertEquals(ApiCode.UNAUTHORIZED.getMessage(), exception.getMessage());
    }
}

// File: src/test/java/com/example/sales/service/UserServiceTest.java
package com.example.sales.service;

import com.example.sales.constant.ApiCode;
import com.example.sales.exception.BusinessException;
import com.example.sales.model.User;
import com.example.sales.repository.UserRepository;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.*;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.security.crypto.password.PasswordEncoder;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class UserServiceTest {

    @InjectMocks
    private UserService userService;

    @Mock private UserRepository userRepository;
    @Mock private PasswordEncoder passwordEncoder;

    @Test
    void testGetCurrentUser_shouldReturnSameUser() {
        User mockUser = new User();
        mockUser.setId("user1");

        User result = userService.getCurrentUser("user1");

        assertEquals("user1", result.getId());
    }

    @Test
    void testUpdateProfile_shouldUpdateAndSave() {
        User user = new User();
        user.setId("u1");

        when(userRepository.save(any())).thenAnswer(invocation -> invocation.getArgument(0));

        User updated = userService.updateProfile("u1", "Nguyễn Văn A", "0123456789", "Cửa hàng tiện lợi");

        assertEquals("Nguyễn Văn A", updated.getFullName());
        assertEquals("0123456789", updated.getPhone());
        assertEquals("Cửa hàng tiện lợi", updated.getBusinessType());

        verify(userRepository).save(user);
    }

    @Test
    void testChangePassword_shouldThrowExceptionIfCurrentPasswordWrong() {
        User user = new User();
        user.setPassword("encoded-old");

        when(passwordEncoder.matches("wrong-pass", "encoded-old")).thenReturn(false);

        BusinessException ex = assertThrows(BusinessException.class, () ->
                userService.changePassword("user1", "wrong-pass", "new-pass")
        );

        assertEquals(ApiCode.INCORRECT_PASSWORD, ex.getError());
        verify(userRepository, never()).save(any());
    }

    @Test
    void testChangePassword_shouldEncodeAndSaveNewPassword() {
        User user = new User();
        user.setPassword("encoded-old");

        when(passwordEncoder.matches("old-pass", "encoded-old")).thenReturn(true);
        when(passwordEncoder.encode("new-pass")).thenReturn("encoded-new");
        when(userRepository.save(any())).thenAnswer(i -> i.getArgument(0));

        userService.changePassword("user1", "old-pass", "new-pass");

        assertEquals("encoded-new", user.getPassword());
        verify(userRepository).save(user);
    }
}

// File: src/test/java/com/example/sales/BaseSpringTest.java
package com.example.sales;

import com.example.sales.config.TestMailConfig;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.context.annotation.Import;

@SpringBootTest
@ActiveProfiles("test")
@Import(TestMailConfig.class)
public abstract class BaseSpringTest {
}

// File: src/test/java/com/example/sales/SalesManagementBackendApplicationTests.java
package com.example.sales;

import org.junit.jupiter.api.Test;

class SalesManagementBackendApplicationTests extends BaseSpringTest {

	@Test
	void contextLoads() {
	}

}

[END]